{"version":3,"file":"Notification-69d32803.js","sources":["../../../src/components/Notification/Notification.tsx"],"sourcesContent":["import {\n  Box,\n  chakra,\n  useColorMode,\n  useColorModeValue,\n  useMultiStyleConfig,\n} from \"@chakra-ui/react\";\nimport React, { forwardRef, useState } from \"react\";\n\nimport Button from \"../Button/Button\";\nimport Heading from \"../Heading/Heading\";\nimport Icon, { IconColors, IconNames, IconSizes } from \"../Icons/Icon\";\n\nexport const notificationTypesArray = [\n  \"standard\",\n  \"announcement\",\n  \"warning\",\n] as const;\nexport type NotificationTypes = typeof notificationTypesArray[number];\n\ninterface BaseProps {\n  /** Optional prop to control text alignment in `NotificationContent` */\n  alignText?: boolean;\n  /** Optional custom `Icon` that will override the default `Icon`. */\n  icon?: JSX.Element;\n  /** ID that other components can cross reference for accessibility purposes. */\n  id?: string;\n  /** Optional prop to control horizontal alignment of the `Notification` content */\n  isCentered?: boolean;\n  /** Content to be rendered in a `NotificationHeading` component. */\n  notificationHeading?: string;\n  /** Optional prop to control the coloring of the `Notification` text and the\n   * visibility of an applicable icon. */\n  notificationType?: NotificationTypes;\n  /** Prop to display the `Notification` icon. Defaults to `true`. */\n  showIcon?: boolean;\n}\n\n// Used for `NotificationHeading`\ntype NotificationHeadingProps = Omit<\n  BasePropsWithoutAlignText,\n  \"notificationHeading\" | \"showIcon\"\n>;\n// Used for `NotificationContent`\ntype NotificationContentProps = Omit<BaseProps, \"icon\">;\n\n// Used for `Notification`\ntype BasePropsWithoutAlignText = Omit<BaseProps, \"alignText\">;\n\nexport interface NotificationProps extends BasePropsWithoutAlignText {\n  /** Label used to describe the `Notification`'s aside HTML element. */\n  ariaLabel?: string;\n  /** Additional `className` to add.  */\n  className?: string;\n  /** Optional prop to control whether a `Notification` can be dismissed\n   * (closed) by a user. */\n  dismissible?: boolean;\n  /** Optional custom `Icon` that will override the default `Icon`. */\n  icon?: JSX.Element;\n  /** Optional prop to control the margin around the `Notification` component. */\n  noMargin?: boolean;\n  /** Content to be rendered in a `NotificationContent` component. */\n  notificationContent: string | JSX.Element;\n}\n\n/**\n * NotificationHeading child-component.\n */\nexport const NotificationHeading = chakra(\n  (props: React.PropsWithChildren<NotificationHeadingProps>) => {\n    const { children, icon, id, isCentered, notificationType, ...rest } = props;\n    const styles = useMultiStyleConfig(\"NotificationHeading\", {\n      icon,\n      isCentered,\n      notificationType,\n    });\n\n    return (\n      <Box as=\"header\" __css={styles} {...rest}>\n        {icon}\n        {children && (\n          <Heading\n            id={`${id}-heading`}\n            level=\"four\"\n            noSpace\n            __css={styles.heading}\n          >\n            {children}\n          </Heading>\n        )}\n      </Box>\n    );\n  }\n);\n\n/**\n * NotificationContent child-component.\n */\nexport const NotificationContent = chakra(\n  (props: React.PropsWithChildren<NotificationContentProps>) => {\n    const {\n      alignText,\n      children,\n      isCentered,\n      notificationHeading,\n      notificationType,\n      showIcon,\n      ...rest\n    } = props;\n    const styles = useMultiStyleConfig(\"NotificationContent\", {\n      alignText,\n      isCentered,\n      notificationHeading,\n      notificationType,\n      showIcon,\n    });\n\n    return (\n      <Box __css={styles} {...rest}>\n        {children && <Box __css={styles.content}>{children}</Box>}\n      </Box>\n    );\n  }\n);\n\n/**\n * Component used to present users with three different levels of notifications:\n * standard, announcement, and warning.\n */\nexport const Notification = chakra(\n  forwardRef<HTMLDivElement, NotificationProps>((props, ref?) => {\n    const {\n      ariaLabel,\n      className,\n      dismissible = false,\n      icon,\n      id,\n      isCentered = false,\n      noMargin = false,\n      notificationContent,\n      notificationHeading,\n      notificationType = \"standard\",\n      showIcon = true,\n      ...rest\n    } = props;\n    const [isOpen, setIsOpen] = useState(true);\n    const { colorMode } = useColorMode();\n    const handleClose = () => setIsOpen(false);\n    const styles = useMultiStyleConfig(\"Notification\", {\n      isCentered,\n      noMargin,\n      notificationHeading,\n      notificationType,\n      showIcon,\n    });\n\n    const iconElement = () => {\n      const baseIconProps = {\n        size: \"large\" as IconSizes,\n        __css: styles.icon,\n      };\n      // If the icon should not display, return undefined.\n      if (!showIcon) {\n        return undefined;\n      }\n      // If a custom icon is passed, add specific `Notification` styles.\n      if (icon)\n        return React.cloneElement(icon, {\n          id: `${id}-custom-notification-icon`,\n          ...baseIconProps,\n        });\n      interface IconProps {\n        color: IconColors;\n        name: IconNames;\n        title: string;\n      }\n      const iconProps = {\n        announcement: {\n          color:\n            colorMode === \"dark\"\n              ? \"dark.ui.success.primary\"\n              : \"section.research.secondary\",\n          name: \"speakerNotes\",\n          title: \"Notification announcement icon\",\n        } as IconProps,\n        standard: {\n          color: colorMode === \"dark\" ? \"ui.status.primary\" : \"ui.black\",\n          name: \"alertNotificationImportant\",\n          title: \"Notification standard icon\",\n        } as IconProps,\n        warning: {\n          color:\n            colorMode === \"dark\" ? \"dark.ui.error.primary\" : \"brand.primary\",\n          name: \"errorFilled\",\n          title: \"Notification warning icon\",\n        } as IconProps,\n      };\n      return (\n        <Icon\n          className=\"notification-icon\"\n          id={`${id}-notification-icon`}\n          {...iconProps[notificationType]}\n          {...baseIconProps}\n        />\n      );\n    };\n    /** Setting the icon color in the styles is not working, so we need to\n     * explicitly override the icon color directly on the component. */\n    const dismissibleButtonIconColor = useColorModeValue(\n      \"ui.black\",\n      \"dark.ui.typography.heading\"\n    );\n    const dismissibleButton = dismissible && (\n      <Button\n        aria-label=\"Close the notification\"\n        buttonType=\"text\"\n        id={`${id}-notification-dismissible-button`}\n        onClick={handleClose}\n        __css={styles.dismissibleButton}\n      >\n        <Icon\n          fill={dismissibleButtonIconColor}\n          id={`${id}-dismissible-notification-icon`}\n          name=\"close\"\n          size=\"large\"\n          title=\"Notification close icon\"\n        />\n      </Button>\n    );\n    const iconElem = iconElement();\n    const childHeading = (notificationHeading || showIcon) && (\n      <NotificationHeading\n        icon={iconElem}\n        id={id}\n        isCentered={isCentered}\n        notificationType={notificationType}\n      >\n        {notificationHeading}\n      </NotificationHeading>\n    );\n    // Specific alignment styles for the content.\n    const alignText = !!(childHeading && showIcon && (!!icon || !isCentered));\n    const childContent = (\n      <NotificationContent\n        alignText={alignText}\n        isCentered={isCentered}\n        notificationHeading={notificationHeading}\n        notificationType={notificationType}\n        showIcon={showIcon}\n      >\n        {notificationContent}\n      </NotificationContent>\n    );\n\n    // If the `Notification` is closed, don't render anything.\n    if (!isOpen) {\n      return null;\n    }\n    return (\n      <Box\n        aria-label={ariaLabel}\n        as=\"aside\"\n        className={className}\n        data-type={notificationType}\n        id={id}\n        ref={ref}\n        __css={styles}\n        {...rest}\n      >\n        <Box __css={styles.container}>\n          {childHeading}\n          {childContent}\n        </Box>\n        {dismissibleButton}\n      </Box>\n    );\n  })\n);\n\nexport default Notification;\n"],"names":["notificationTypesArray","NotificationHeading","chakra","props","children","icon","id","isCentered","notificationType","rest","styles","useMultiStyleConfig","jsxs","Box","jsx","Heading","NotificationContent","alignText","notificationHeading","showIcon","Notification","forwardRef","ref","ariaLabel","className","dismissible","noMargin","notificationContent","isOpen","setIsOpen","useState","colorMode","useColorMode","handleClose","iconElement","baseIconProps","React","iconProps","Icon","dismissibleButtonIconColor","useColorModeValue","dismissibleButton","Button","iconElem","childHeading","childContent"],"mappings":"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"}