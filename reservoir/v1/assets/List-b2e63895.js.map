{"version":3,"file":"List-b2e63895.js","sources":["../../../src/components/List/List.tsx"],"sourcesContent":["import { As, Box, chakra, useStyleConfig } from \"@chakra-ui/react\";\nimport React, { forwardRef } from \"react\";\n\nimport Heading from \"../Heading/Heading\";\n\nexport const listTypesArray = [\"ol\", \"ul\", \"dl\"] as const;\nexport type ListTypes = typeof listTypesArray[number];\n\nexport interface DescriptionProps {\n  term: string;\n  description: string | JSX.Element;\n}\n\nexport interface ListProps {\n  /** ClassName you can add in addition to 'list' */\n  className?: string;\n  /** ID that other components can cross reference for accessibility purposes */\n  id?: string;\n  /** Display the list in a row. */\n  inline?: boolean;\n  /** Data to render if children are not passed. For `listTypes` ordered `\"ol\"`\n   * and unordered `\"ul\"` `List` types, the data structure is an array of strings\n   * to renders as `li` items. For description `\"dl\"` `List` types, the data\n   * structure is an array of objects with `term` and `description` properties\n   * to render `dt` and `dd` elements, respectively.\n   */\n  listItems?: (string | JSX.Element | DescriptionProps)[];\n  /** Remove list styling. */\n  noStyling?: boolean;\n  /** An optional title that will appear over the list. This prop only applies\n   * to Description Lists. */\n  title?: string;\n  /** The type of list: \"ol\", \"ul\", or \"dl\". \"ul\" by default. */\n  type: ListTypes;\n}\n\n/**\n * A component that renders list item `li` elements or description item `dt`\n * and `dd` elements based on the `type` prop. Note that the `title` prop will\n * only display for the `Description` list type.\n */\nexport const List = chakra(\n  forwardRef<\n    HTMLDivElement & HTMLUListElement & HTMLOListElement,\n    React.PropsWithChildren<ListProps>\n  >((props, ref?) => {\n    const {\n      children,\n      className,\n      id,\n      inline = false,\n      listItems,\n      noStyling = false,\n      title,\n      type = \"ul\",\n      ...rest\n    } = props;\n    const styles = useStyleConfig(\"List\", { inline, noStyling, variant: type });\n    let listElement = null;\n\n    // Either li/dt/dd children elements must be passed or the `listItems`\n    // prop must be used.\n    if (children && listItems && listItems?.length > 0) {\n      console.warn(\n        \"NYPL Reservoir List: Pass in either `<li>`, `<dt>`, or `<dd>` \" +\n          \"children or use the `listItems` data prop. Do not use both.\"\n      );\n      return null;\n    }\n    if (!children && !listItems) {\n      console.warn(\n        \"NYPL Reservoir List: Pass in either `<li>` children or pass data in \" +\n          \"the `listItems` prop, not both.\"\n      );\n      return null;\n    }\n\n    /**\n     * This returns either the `children` elements passed to the `List` component\n     * first, otherwise it will check and render the data passed into the\n     * `listItems` props based on the `ListType` type. If it is of type unordered\n     * or ordered, it will return `li` elements. Otherwise, it will return a\n     * combination of `dt` and `dd` elements for the description type.\n     */\n    const listChildrenElms = (listType: ListTypes) => {\n      if (children) {\n        return children;\n      }\n      if (!listItems) {\n        return null;\n      }\n      if (listType === \"ol\" || listType === \"ul\") {\n        return listItems.map((item, i) => <li key={i}>{item}</li>);\n      } else if (listType === \"dl\") {\n        return (listItems as DescriptionProps[]).map((item, i) => [\n          <dt key={`${i}-term`}>{item.term}</dt>,\n          <dd key={`${i}-des`}>{item.description}</dd>,\n        ]);\n      }\n      return null;\n    };\n    /**\n     * Checks for `dt` and `dd` elements and consoles a warning if the\n     * children are different HTML elements.\n     */\n    const checkDescriptionChildrenError = () => {\n      React.Children.map(\n        children as JSX.Element,\n        (child: React.ReactElement) => {\n          if (\n            child.type !== \"dt\" &&\n            child.type !== \"dd\" &&\n            child.type !== React.Fragment &&\n            child.props.mdxType !== \"dt\" &&\n            child.props.mdxType !== \"dd\" &&\n            child.props.mdxType !== React.Fragment\n          ) {\n            console.warn(\n              \"NYPL Reservoir List: Direct children of `List` (description) must \" +\n                \"be `<dt>`s and `<dd>`s.\"\n            );\n          }\n        }\n      );\n    };\n\n    if (type === \"ol\" || type === \"ul\") {\n      checkListChildrenError(children, type);\n      listElement = (\n        <Box\n          as={type as As}\n          id={id}\n          className={className}\n          ref={ref}\n          __css={styles}\n          {...rest}\n        >\n          {listChildrenElms(type)}\n        </Box>\n      );\n    } else if (type === \"dl\") {\n      checkDescriptionChildrenError();\n      listElement = (\n        <Box\n          as=\"section\"\n          id={id}\n          className={className}\n          ref={ref}\n          __css={styles}\n          {...rest}\n        >\n          {title && <Heading id={`${id}-heading`}>{title}</Heading>}\n          <dl>{listChildrenElms(type)}</dl>\n        </Box>\n      );\n    }\n\n    return listElement;\n  })\n);\n\n/**\n * Checks for `li` elements and consoles a warning if the\n * children are different HTML elements.\n */\nexport const checkListChildrenError = (\n  children: React.ReactNode,\n  listType = \"ul\",\n  componentName = \"List\"\n) => {\n  React.Children.map(children as JSX.Element, (child: React.ReactElement) => {\n    if (child && child?.type !== \"li\" && child?.props?.mdxType !== \"li\") {\n      console.warn(\n        `NYPL Reservoir ${componentName}: Direct children of \\`${componentName}\\` (${listType}) must be \\`<li>\\`s.`\n      );\n    }\n  });\n};\n\nexport default List;\n"],"names":["listTypesArray","List","chakra","forwardRef","props","ref","children","className","id","inline","listItems","noStyling","title","type","rest","styles","useStyleConfig","listElement","listChildrenElms","listType","item","i","jsx","checkListChildrenError","Box","React","child","jsxs","Heading","componentName","_a"],"mappings":"6OAKO,MAAAA,EAAA,CAAA,KAAA,KAAA,IAAA,EAoCAC,EAAAC,EAAaC,aAAA,CAAAC,EAAAC,IAAA,CAKhB,KAAA,CAAM,SAAAC,EACJ,UAAAC,EACA,GAAAC,EACA,OAAAC,EAAA,GACS,UAAAC,EACT,UAAAC,EAAA,GACY,MAAAC,EACZ,KAAAC,EAAA,KACO,GAAAC,CACJ,EAAAV,EAELW,EAAAC,EAAA,OAAA,CAAA,OAAAP,EAAA,UAAAE,EAAA,QAAAE,CAAA,CAAA,EACA,IAAAI,EAAA,KAIA,GAAAX,GAAAI,IAAAA,GAAA,YAAAA,EAAA,QAAA,EACE,eAAA,KAAQ,2HACN,EAGF,KAEF,GAAA,CAAAJ,GAAA,CAAAI,EACE,eAAA,KAAQ,qGACN,EAGF,KAUF,MAAAQ,EAAAC,GACEb,IAGAI,EAGAS,IAAA,MAAAA,IAAA,KACET,EAAA,IAAA,CAAAU,EAAAC,IAAAC,EAAA,KAAA,CAAA,SAAAF,GAAAC,CAAA,CAAA,EAAyDF,IAAA,KAEzDT,EAAA,IAAA,CAAAU,EAAAC,IAAA,CAA0DC,EAAA,KAAA,CAAA,SAAAF,EAAA,IAAA,EAAA,GAAAC,QAAA,EACvBC,EAAA,KAAA,CAAA,SAAAF,EAAA,WAAA,EAAA,GAAAC,OAAA,CACM,CAAA,EAG3C,KAVE,MAqCJ,OAAAR,IAAA,MAAAA,IAAA,MACEU,EAAAjB,EAAAO,CAAA,EACAI,EAAAK,EACEE,EAAC,CAAA,GAAAX,EACK,GAAAL,EACJ,UAAAD,EACA,IAAAF,EACA,MAAAU,EACO,GAAAD,EACH,SAAAI,EAAAL,CAAA,CAEkB,CAAA,GACxBA,IAAA,QAjCJ,IAAA,CACEY,EAAA,SAAA,IAAenB,EACboB,GAAA,CAEEA,EAAA,OAAA,MAAAA,EAAA,OAAA,MAAAA,EAAA,OAAAD,EAAA,UAAAC,EAAA,MAAA,UAAA,MAAAA,EAAA,MAAA,UAAA,MAAAA,EAAA,MAAA,UAAAD,EAAA,UAQE,QAAA,KAAQ,2FACN,CAGJ,CACF,CACF,KAmBAR,EAAAU,EACEH,EAAC,CAAA,GAAA,UACI,GAAAhB,EACH,UAAAD,EACA,IAAAF,EACA,MAAAU,EACO,GAAAD,EACH,SAAA,CAEHF,GAAAU,EAAAM,EAAA,CAAA,GAAA,GAAApB,YAAA,SAAAI,EAAA,EAA8CU,EAAA,KAAA,CAAA,SAAAJ,EAAAL,CAAA,CAAA,CAAA,CACnB,CAAA,CAAA,GAKlCI,CAAO,CAAA,CAEX,EAMOM,EAAA,CAAAjB,EAAAa,EAAA,KAAAU,EAAA,SAAA,CAKLJ,EAAA,SAAA,IAAAnB,EAAAoB,GAAA,OACEA,IAAAA,GAAA,YAAAA,EAAA,QAAA,QAAAI,EAAAJ,GAAA,YAAAA,EAAA,QAAA,YAAAI,EAAA,WAAA,MACE,QAAA,KAAQ,kBAAAD,2BAAAA,QAAAV,uBACuE,CAEjF,CAAA,CAEJ;"}