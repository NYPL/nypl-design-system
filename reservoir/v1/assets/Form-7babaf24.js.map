{"version":3,"file":"Form-7babaf24.js","sources":["../../../src/components/Form/Form.tsx"],"sourcesContent":["import { Box, chakra } from \"@chakra-ui/react\";\nimport React, { forwardRef } from \"react\";\n\nimport SimpleGrid, { GridGaps } from \"../Grid/SimpleGrid\";\n\ninterface FormBaseProps {\n  /** className to be applied to FormRow, FormField, and Form */\n  className?: string;\n  /** Optional spacing size; if omitted, the default `large` (2rem / 32px)\n   * spacing will be used; ```IMPORTANT: for general form layout, this prop\n   * should not be used``` */\n  gap?: GridGaps;\n  /** ID that other components can cross reference (internal use) */\n  id: string;\n}\n\nexport interface FormChildProps extends Partial<FormBaseProps> {}\n\nexport interface FormProps extends FormBaseProps {\n  /** Optional form `action` attribute */\n  action?: string;\n  /** Optional form `method` attribute */\n  method?: \"get\" | \"post\";\n  /** Function to call for the `onSubmit` form event. */\n  onSubmit?: (e: React.FormEvent<any>) => void;\n}\n\n/** FormRow child-component */\nexport const FormRow = chakra(\n  (props: React.PropsWithChildren<FormChildProps>) => {\n    const { children, className, gap, id, ...rest } = props;\n    const count = React.Children.count(children);\n    const alteredChildren = React.Children.map(\n      children as JSX.Element,\n      (child: React.ReactElement, i) => {\n        if (!child) return null;\n        if (child.type === FormField || child.props.mdxType === \"FormField\") {\n          return React.cloneElement(child, { id: `${id}-grandchild${i}` });\n        }\n        console.warn(\n          \"NYPL Reservoir FormRow: Children must be `FormField` components.\"\n        );\n        return null;\n      }\n    );\n    return (\n      <SimpleGrid\n        columns={count}\n        className={className}\n        gap={gap}\n        id={id}\n        {...rest}\n      >\n        {alteredChildren}\n      </SimpleGrid>\n    );\n  }\n);\n\n/** FormField child-component */\nexport const FormField = chakra(\n  (props: React.PropsWithChildren<FormChildProps>) => {\n    const { children, className, gap, id, ...rest } = props;\n    return (\n      <SimpleGrid columns={1} className={className} gap={gap} id={id} {...rest}>\n        {children}\n      </SimpleGrid>\n    );\n  }\n);\n\n/** Main Form component */\nexport const Form = chakra(\n  forwardRef<\n    HTMLDivElement & HTMLFormElement,\n    React.PropsWithChildren<FormProps>\n  >((props, ref?) => {\n    const {\n      action,\n      children,\n      className,\n      gap = \"grid.l\",\n      id,\n      method,\n      onSubmit,\n      ...rest\n    } = props;\n\n    if (!id) {\n      console.warn(\n        \"NYPL Reservoir Form: This component's required `id` prop was not passed.\"\n      );\n    }\n\n    const attributes: Partial<FormProps> = {};\n    action && (attributes[\"action\"] = action);\n\n    method &&\n      (method === \"get\" || method === \"post\") &&\n      (attributes[\"method\"] = method);\n\n    const alteredChildren = React.Children.map(\n      children as JSX.Element,\n      (child: React.ReactElement, i) => {\n        return (\n          child && React.cloneElement(child, { gap, id: `${id}-child${i}` })\n        );\n      }\n    );\n\n    return (\n      <Box\n        as=\"form\"\n        aria-label=\"form\"\n        className={className}\n        id={id}\n        onSubmit={onSubmit}\n        ref={ref}\n        {...attributes}\n        {...rest}\n      >\n        <SimpleGrid columns={1} gap={gap} id={`${id}-parent`}>\n          {alteredChildren}\n        </SimpleGrid>\n      </Box>\n    );\n  }),\n  { shouldForwardProp: () => true }\n);\n\nexport default Form;\n"],"names":["FormRow","chakra","props","children","className","gap","id","rest","count","React","alteredChildren","child","i","FormField","jsx","SimpleGrid","Form","forwardRef","ref","action","method","onSubmit","attributes","Box"],"mappings":"kOA4BO,MAAAA,EAAAC,EAAgBC,GAAA,CAEnB,KAAA,CAAA,SAAAC,EAAA,UAAAC,EAAA,IAAAC,EAAA,GAAAC,EAAA,GAAAC,CAAA,EAAAL,EACAM,EAAAC,EAAA,SAAA,MAAAN,CAAA,EACAO,EAAAD,EAAA,SAAA,IAAuCN,EACrC,CAAAQ,EAAAC,IAEED,EACAA,EAAA,OAAAE,GAAAF,EAAA,MAAA,UAAA,YACEF,EAAA,aAAAE,EAAA,CAAA,GAAA,GAAAL,eAAAM,GAAA,CAAA,GAEF,QAAA,KAAQ,kEACN,EAEF,MAPY,IAQd,EAEF,OAAAE,EACEC,EAAC,CAAA,QAAAP,EACU,UAAAJ,EACT,IAAAC,EACA,GAAAC,EACA,GAAAC,EACI,SAAAG,CAEH,CAAA,CACH,CAGN,EAGOG,EAAAZ,EAAkBC,GAAA,CAErB,KAAA,CAAA,SAAAC,EAAA,UAAAC,EAAA,IAAAC,EAAA,GAAAC,EAAA,GAAAC,CAAA,EAAAL,EACA,OAAAY,EAAAC,EAAA,CAAA,QAAA,EAAA,UAAAX,EAAA,IAAAC,EAAA,GAAAC,EAAA,GAAAC,EAAA,SAAAJ,CAAA,CAAA,CAGE,CAGN,EAGOa,EAAAf,EAAagB,aAAA,CAAAf,EAAAgB,IAAA,CAKhB,KAAA,CAAM,OAAAC,EACJ,SAAAhB,EACA,UAAAC,EACA,IAAAC,EAAA,SACM,GAAAC,EACN,OAAAc,EACA,SAAAC,EACA,GAAAd,CACG,EAAAL,EAGLI,GACE,QAAA,KAAQ,0EACN,EAIJ,MAAAgB,EAAA,CAAA,EACAH,IAAAG,EAAA,OAAAH,GAEAC,IAAAA,IAAA,OAAAA,IAAA,UAAAE,EAAA,OAAAF,GAIA,MAAAV,EAAAD,EAAA,SAAA,IAAuCN,EACrC,CAAAQ,EAAAC,IAEED,GAAAF,EAAA,aAAAE,EAAA,CAAA,IAAAN,EAAA,GAAA,GAAAC,UAAAM,GAAA,CAAA,CAGF,EAGF,OAAAE,EACES,EAAC,CAAA,GAAA,OACI,aAAA,OACQ,UAAAnB,EACX,GAAAE,EACA,SAAAe,EACA,IAAAH,EACA,GAAAI,EACI,GAAAf,EACA,SAAAO,EAAAC,EAAA,CAAA,QAAA,EAAA,IAAAV,EAAA,GAAA,GAAAC,WAAA,SAAAI,CAAA,CAAA,CAIJ,CAAA,CACF,CAAA,EAEH,CAAA,kBAAA,IAAA,EAAA,CAEH"}