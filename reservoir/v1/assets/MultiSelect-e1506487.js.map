{"version":3,"file":"MultiSelect-e1506487.js","sources":["../../../node_modules/react-is/cjs/react-is.production.min.js","../../../node_modules/downshift/node_modules/compute-scroll-into-view/dist/index.mjs","../../../node_modules/downshift/dist/downshift.esm.js","../../../src/components/MultiSelect/MultiSelectMenuButton.tsx","../../../src/components/MultiSelect/MultiSelectListbox.tsx","../../../src/hooks/useCloseDropDown.ts","../../../src/components/MultiSelect/MultiSelectDialog.tsx","../../../src/components/MultiSelect/MultiSelect.tsx"],"sourcesContent":["/** @license React v17.0.2\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var b=60103,c=60106,d=60107,e=60108,f=60114,g=60109,h=60110,k=60112,l=60113,m=60120,n=60115,p=60116,q=60121,r=60122,u=60117,v=60129,w=60131;\nif(\"function\"===typeof Symbol&&Symbol.for){var x=Symbol.for;b=x(\"react.element\");c=x(\"react.portal\");d=x(\"react.fragment\");e=x(\"react.strict_mode\");f=x(\"react.profiler\");g=x(\"react.provider\");h=x(\"react.context\");k=x(\"react.forward_ref\");l=x(\"react.suspense\");m=x(\"react.suspense_list\");n=x(\"react.memo\");p=x(\"react.lazy\");q=x(\"react.block\");r=x(\"react.server.block\");u=x(\"react.fundamental\");v=x(\"react.debug_trace_mode\");w=x(\"react.legacy_hidden\")}\nfunction y(a){if(\"object\"===typeof a&&null!==a){var t=a.$$typeof;switch(t){case b:switch(a=a.type,a){case d:case f:case e:case l:case m:return a;default:switch(a=a&&a.$$typeof,a){case h:case k:case p:case n:case g:return a;default:return t}}case c:return t}}}var z=g,A=b,B=k,C=d,D=p,E=n,F=c,G=f,H=e,I=l;exports.ContextConsumer=h;exports.ContextProvider=z;exports.Element=A;exports.ForwardRef=B;exports.Fragment=C;exports.Lazy=D;exports.Memo=E;exports.Portal=F;exports.Profiler=G;exports.StrictMode=H;\nexports.Suspense=I;exports.isAsyncMode=function(){return!1};exports.isConcurrentMode=function(){return!1};exports.isContextConsumer=function(a){return y(a)===h};exports.isContextProvider=function(a){return y(a)===g};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===b};exports.isForwardRef=function(a){return y(a)===k};exports.isFragment=function(a){return y(a)===d};exports.isLazy=function(a){return y(a)===p};exports.isMemo=function(a){return y(a)===n};\nexports.isPortal=function(a){return y(a)===c};exports.isProfiler=function(a){return y(a)===f};exports.isStrictMode=function(a){return y(a)===e};exports.isSuspense=function(a){return y(a)===l};exports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===d||a===f||a===v||a===e||a===l||a===m||a===w||\"object\"===typeof a&&null!==a&&(a.$$typeof===p||a.$$typeof===n||a.$$typeof===g||a.$$typeof===h||a.$$typeof===k||a.$$typeof===u||a.$$typeof===q||a[0]===r)?!0:!1};\nexports.typeOf=y;\n","function t(t){return\"object\"==typeof t&&null!=t&&1===t.nodeType}function e(t,e){return(!e||\"hidden\"!==t)&&\"visible\"!==t&&\"clip\"!==t}function n(t,n){if(t.clientHeight<t.scrollHeight||t.clientWidth<t.scrollWidth){var r=getComputedStyle(t,null);return e(r.overflowY,n)||e(r.overflowX,n)||function(t){var e=function(t){if(!t.ownerDocument||!t.ownerDocument.defaultView)return null;try{return t.ownerDocument.defaultView.frameElement}catch(t){return null}}(t);return!!e&&(e.clientHeight<t.scrollHeight||e.clientWidth<t.scrollWidth)}(t)}return!1}function r(t,e,n,r,i,o,l,d){return o<t&&l>e||o>t&&l<e?0:o<=t&&d<=n||l>=e&&d>=n?o-t-r:l>e&&d<n||o<t&&d>n?l-e+i:0}var i=function(e,i){var o=window,l=i.scrollMode,d=i.block,f=i.inline,h=i.boundary,u=i.skipOverflowHiddenElements,s=\"function\"==typeof h?h:function(t){return t!==h};if(!t(e))throw new TypeError(\"Invalid target\");for(var a,c,g=document.scrollingElement||document.documentElement,p=[],m=e;t(m)&&s(m);){if((m=null==(c=(a=m).parentElement)?a.getRootNode().host||null:c)===g){p.push(m);break}null!=m&&m===document.body&&n(m)&&!n(document.documentElement)||null!=m&&n(m,u)&&p.push(m)}for(var w=o.visualViewport?o.visualViewport.width:innerWidth,v=o.visualViewport?o.visualViewport.height:innerHeight,W=window.scrollX||pageXOffset,H=window.scrollY||pageYOffset,b=e.getBoundingClientRect(),y=b.height,E=b.width,M=b.top,V=b.right,x=b.bottom,I=b.left,C=\"start\"===d||\"nearest\"===d?M:\"end\"===d?x:M+y/2,R=\"center\"===f?I+E/2:\"end\"===f?V:I,T=[],k=0;k<p.length;k++){var B=p[k],D=B.getBoundingClientRect(),O=D.height,X=D.width,Y=D.top,L=D.right,S=D.bottom,j=D.left;if(\"if-needed\"===l&&M>=0&&I>=0&&x<=v&&V<=w&&M>=Y&&x<=S&&I>=j&&V<=L)return T;var N=getComputedStyle(B),q=parseInt(N.borderLeftWidth,10),z=parseInt(N.borderTopWidth,10),A=parseInt(N.borderRightWidth,10),F=parseInt(N.borderBottomWidth,10),G=0,J=0,K=\"offsetWidth\"in B?B.offsetWidth-B.clientWidth-q-A:0,P=\"offsetHeight\"in B?B.offsetHeight-B.clientHeight-z-F:0,Q=\"offsetWidth\"in B?0===B.offsetWidth?0:X/B.offsetWidth:0,U=\"offsetHeight\"in B?0===B.offsetHeight?0:O/B.offsetHeight:0;if(g===B)G=\"start\"===d?C:\"end\"===d?C-v:\"nearest\"===d?r(H,H+v,v,z,F,H+C,H+C+y,y):C-v/2,J=\"start\"===f?R:\"center\"===f?R-w/2:\"end\"===f?R-w:r(W,W+w,w,q,A,W+R,W+R+E,E),G=Math.max(0,G+H),J=Math.max(0,J+W);else{G=\"start\"===d?C-Y-z:\"end\"===d?C-S+F+P:\"nearest\"===d?r(Y,S,O,z,F+P,C,C+y,y):C-(Y+O/2)+P/2,J=\"start\"===f?R-j-q:\"center\"===f?R-(j+X/2)+K/2:\"end\"===f?R-L+A+K:r(j,L,X,q,A+K,R,R+E,E);var Z=B.scrollLeft,$=B.scrollTop;C+=$-(G=Math.max(0,Math.min($+G/U,B.scrollHeight-O/U+P))),R+=Z-(J=Math.max(0,Math.min(Z+J/Q,B.scrollWidth-X/Q+K)))}T.push({el:B,top:G,left:J})}return T};export{i as default};\n//# sourceMappingURL=index.mjs.map\n","import _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport _assertThisInitialized from '@babel/runtime/helpers/esm/assertThisInitialized';\nimport _inheritsLoose from '@babel/runtime/helpers/esm/inheritsLoose';\nimport PropTypes from 'prop-types';\nimport { cloneElement, Component, useRef, useEffect, useCallback, useLayoutEffect, useReducer, useMemo } from 'react';\nimport { isForwardRef } from 'react-is';\nimport computeScrollIntoView from 'compute-scroll-into-view';\nimport { __assign } from 'tslib';\n\nvar idCounter = 0;\n/**\n * Accepts a parameter and returns it if it's a function\n * or a noop function if it's not. This allows us to\n * accept a callback, but not worry about it if it's not\n * passed.\n * @param {Function} cb the callback\n * @return {Function} a function\n */\n\nfunction cbToCb(cb) {\n  return typeof cb === 'function' ? cb : noop;\n}\n\nfunction noop() {}\n/**\n * Scroll node into view if necessary\n * @param {HTMLElement} node the element that should scroll into view\n * @param {HTMLElement} menuNode the menu element of the component\n */\n\n\nfunction scrollIntoView(node, menuNode) {\n  if (!node) {\n    return;\n  }\n\n  var actions = computeScrollIntoView(node, {\n    boundary: menuNode,\n    block: 'nearest',\n    scrollMode: 'if-needed'\n  });\n  actions.forEach(function (_ref) {\n    var el = _ref.el,\n        top = _ref.top,\n        left = _ref.left;\n    el.scrollTop = top;\n    el.scrollLeft = left;\n  });\n}\n/**\n * @param {HTMLElement} parent the parent node\n * @param {HTMLElement} child the child node\n * @param {Window} environment The window context where downshift renders.\n * @return {Boolean} whether the parent is the child or the child is in the parent\n */\n\n\nfunction isOrContainsNode(parent, child, environment) {\n  var result = parent === child || child instanceof environment.Node && parent.contains && parent.contains(child);\n  return result;\n}\n/**\n * Simple debounce implementation. Will call the given\n * function once after the time given has passed since\n * it was last called.\n * @param {Function} fn the function to call after the time\n * @param {Number} time the time to wait\n * @return {Function} the debounced function\n */\n\n\nfunction debounce(fn, time) {\n  var timeoutId;\n\n  function cancel() {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n  }\n\n  function wrapper() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    cancel();\n    timeoutId = setTimeout(function () {\n      timeoutId = null;\n      fn.apply(void 0, args);\n    }, time);\n  }\n\n  wrapper.cancel = cancel;\n  return wrapper;\n}\n/**\n * This is intended to be used to compose event handlers.\n * They are executed in order until one of them sets\n * `event.preventDownshiftDefault = true`.\n * @param {...Function} fns the event handler functions\n * @return {Function} the event handler to add to an element\n */\n\n\nfunction callAllEventHandlers() {\n  for (var _len2 = arguments.length, fns = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    fns[_key2] = arguments[_key2];\n  }\n\n  return function (event) {\n    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n\n    return fns.some(function (fn) {\n      if (fn) {\n        fn.apply(void 0, [event].concat(args));\n      }\n\n      return event.preventDownshiftDefault || event.hasOwnProperty('nativeEvent') && event.nativeEvent.preventDownshiftDefault;\n    });\n  };\n}\n\nfunction handleRefs() {\n  for (var _len4 = arguments.length, refs = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    refs[_key4] = arguments[_key4];\n  }\n\n  return function (node) {\n    refs.forEach(function (ref) {\n      if (typeof ref === 'function') {\n        ref(node);\n      } else if (ref) {\n        ref.current = node;\n      }\n    });\n  };\n}\n/**\n * This generates a unique ID for an instance of Downshift\n * @return {String} the unique ID\n */\n\n\nfunction generateId() {\n  return String(idCounter++);\n}\n/**\n * Resets idCounter to 0. Used for SSR.\n */\n\n\nfunction resetIdCounter() {\n  idCounter = 0;\n}\n/**\n * Default implementation for status message. Only added when menu is open.\n * Will specify if there are results in the list, and if so, how many,\n * and what keys are relevant.\n *\n * @param {Object} param the downshift state and other relevant properties\n * @return {String} the a11y status message\n */\n\n\nfunction getA11yStatusMessage$1(_ref2) {\n  var isOpen = _ref2.isOpen,\n      resultCount = _ref2.resultCount,\n      previousResultCount = _ref2.previousResultCount;\n\n  if (!isOpen) {\n    return '';\n  }\n\n  if (!resultCount) {\n    return 'No results are available.';\n  }\n\n  if (resultCount !== previousResultCount) {\n    return resultCount + \" result\" + (resultCount === 1 ? ' is' : 's are') + \" available, use up and down arrow keys to navigate. Press Enter key to select.\";\n  }\n\n  return '';\n}\n/**\n * Takes an argument and if it's an array, returns the first item in the array\n * otherwise returns the argument\n * @param {*} arg the maybe-array\n * @param {*} defaultValue the value if arg is falsey not defined\n * @return {*} the arg or it's first item\n */\n\n\nfunction unwrapArray(arg, defaultValue) {\n  arg = Array.isArray(arg) ?\n  /* istanbul ignore next (preact) */\n  arg[0] : arg;\n\n  if (!arg && defaultValue) {\n    return defaultValue;\n  } else {\n    return arg;\n  }\n}\n/**\n * @param {Object} element (P)react element\n * @return {Boolean} whether it's a DOM element\n */\n\n\nfunction isDOMElement(element) {\n\n\n  return typeof element.type === 'string';\n}\n/**\n * @param {Object} element (P)react element\n * @return {Object} the props\n */\n\n\nfunction getElementProps(element) {\n\n  return element.props;\n}\n/**\n * Throws a helpful error message for required properties. Useful\n * to be used as a default in destructuring or object params.\n * @param {String} fnName the function name\n * @param {String} propName the prop name\n */\n\n\nfunction requiredProp(fnName, propName) {\n  // eslint-disable-next-line no-console\n  console.error(\"The property \\\"\" + propName + \"\\\" is required in \\\"\" + fnName + \"\\\"\");\n}\n\nvar stateKeys = ['highlightedIndex', 'inputValue', 'isOpen', 'selectedItem', 'type'];\n/**\n * @param {Object} state the state object\n * @return {Object} state that is relevant to downshift\n */\n\nfunction pickState(state) {\n  if (state === void 0) {\n    state = {};\n  }\n\n  var result = {};\n  stateKeys.forEach(function (k) {\n    if (state.hasOwnProperty(k)) {\n      result[k] = state[k];\n    }\n  });\n  return result;\n}\n/**\n * This will perform a shallow merge of the given state object\n * with the state coming from props\n * (for the controlled component scenario)\n * This is used in state updater functions so they're referencing\n * the right state regardless of where it comes from.\n *\n * @param {Object} state The state of the component/hook.\n * @param {Object} props The props that may contain controlled values.\n * @returns {Object} The merged controlled state.\n */\n\n\nfunction getState(state, props) {\n  return Object.keys(state).reduce(function (prevState, key) {\n    prevState[key] = isControlledProp(props, key) ? props[key] : state[key];\n    return prevState;\n  }, {});\n}\n/**\n * This determines whether a prop is a \"controlled prop\" meaning it is\n * state which is controlled by the outside of this component rather\n * than within this component.\n *\n * @param {Object} props The props that may contain controlled values.\n * @param {String} key the key to check\n * @return {Boolean} whether it is a controlled controlled prop\n */\n\n\nfunction isControlledProp(props, key) {\n  return props[key] !== undefined;\n}\n/**\n * Normalizes the 'key' property of a KeyboardEvent in IE/Edge\n * @param {Object} event a keyboardEvent object\n * @return {String} keyboard key\n */\n\n\nfunction normalizeArrowKey(event) {\n  var key = event.key,\n      keyCode = event.keyCode;\n  /* istanbul ignore next (ie) */\n\n  if (keyCode >= 37 && keyCode <= 40 && key.indexOf('Arrow') !== 0) {\n    return \"Arrow\" + key;\n  }\n\n  return key;\n}\n/**\n * Simple check if the value passed is object literal\n * @param {*} obj any things\n * @return {Boolean} whether it's object literal\n */\n\n\nfunction isPlainObject(obj) {\n  return Object.prototype.toString.call(obj) === '[object Object]';\n}\n/**\n * Returns the new index in the list, in a circular way. If next value is out of bonds from the total,\n * it will wrap to either 0 or itemCount - 1.\n *\n * @param {number} moveAmount Number of positions to move. Negative to move backwards, positive forwards.\n * @param {number} baseIndex The initial position to move from.\n * @param {number} itemCount The total number of items.\n * @param {Function} getItemNodeFromIndex Used to check if item is disabled.\n * @param {boolean} circular Specify if navigation is circular. Default is true.\n * @returns {number} The new index after the move.\n */\n\n\nfunction getNextWrappingIndex(moveAmount, baseIndex, itemCount, getItemNodeFromIndex, circular) {\n  if (circular === void 0) {\n    circular = true;\n  }\n\n  if (itemCount === 0) {\n    return -1;\n  }\n\n  var itemsLastIndex = itemCount - 1;\n\n  if (typeof baseIndex !== 'number' || baseIndex < 0 || baseIndex >= itemCount) {\n    baseIndex = moveAmount > 0 ? -1 : itemsLastIndex + 1;\n  }\n\n  var newIndex = baseIndex + moveAmount;\n\n  if (newIndex < 0) {\n    newIndex = circular ? itemsLastIndex : 0;\n  } else if (newIndex > itemsLastIndex) {\n    newIndex = circular ? 0 : itemsLastIndex;\n  }\n\n  var nonDisabledNewIndex = getNextNonDisabledIndex(moveAmount, newIndex, itemCount, getItemNodeFromIndex, circular);\n\n  if (nonDisabledNewIndex === -1) {\n    return baseIndex >= itemCount ? -1 : baseIndex;\n  }\n\n  return nonDisabledNewIndex;\n}\n/**\n * Returns the next index in the list of an item that is not disabled.\n *\n * @param {number} moveAmount Number of positions to move. Negative to move backwards, positive forwards.\n * @param {number} baseIndex The initial position to move from.\n * @param {number} itemCount The total number of items.\n * @param {Function} getItemNodeFromIndex Used to check if item is disabled.\n * @param {boolean} circular Specify if navigation is circular. Default is true.\n * @returns {number} The new index. Returns baseIndex if item is not disabled. Returns next non-disabled item otherwise. If no non-disabled found it will return -1.\n */\n\n\nfunction getNextNonDisabledIndex(moveAmount, baseIndex, itemCount, getItemNodeFromIndex, circular) {\n  var currentElementNode = getItemNodeFromIndex(baseIndex);\n\n  if (!currentElementNode || !currentElementNode.hasAttribute('disabled')) {\n    return baseIndex;\n  }\n\n  if (moveAmount > 0) {\n    for (var index = baseIndex + 1; index < itemCount; index++) {\n      if (!getItemNodeFromIndex(index).hasAttribute('disabled')) {\n        return index;\n      }\n    }\n  } else {\n    for (var _index = baseIndex - 1; _index >= 0; _index--) {\n      if (!getItemNodeFromIndex(_index).hasAttribute('disabled')) {\n        return _index;\n      }\n    }\n  }\n\n  if (circular) {\n    return moveAmount > 0 ? getNextNonDisabledIndex(1, 0, itemCount, getItemNodeFromIndex, false) : getNextNonDisabledIndex(-1, itemCount - 1, itemCount, getItemNodeFromIndex, false);\n  }\n\n  return -1;\n}\n/**\n * Checks if event target is within the downshift elements.\n *\n * @param {EventTarget} target Target to check.\n * @param {HTMLElement[]} downshiftElements The elements that form downshift (list, toggle button etc).\n * @param {Window} environment The window context where downshift renders.\n * @param {boolean} checkActiveElement Whether to also check activeElement.\n *\n * @returns {boolean} Whether or not the target is within downshift elements.\n */\n\n\nfunction targetWithinDownshift(target, downshiftElements, environment, checkActiveElement) {\n  if (checkActiveElement === void 0) {\n    checkActiveElement = true;\n  }\n\n  return downshiftElements.some(function (contextNode) {\n    return contextNode && (isOrContainsNode(contextNode, target, environment) || checkActiveElement && isOrContainsNode(contextNode, environment.document.activeElement, environment));\n  });\n} // eslint-disable-next-line import/no-mutable-exports\n\n\nvar validateControlledUnchanged = noop;\n/* istanbul ignore next */\n\nif (process.env.NODE_ENV !== 'production') {\n  validateControlledUnchanged = function validateControlledUnchanged(state, prevProps, nextProps) {\n    var warningDescription = \"This prop should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled Downshift element for the lifetime of the component. More info: https://github.com/downshift-js/downshift#control-props\";\n    Object.keys(state).forEach(function (propKey) {\n      if (prevProps[propKey] !== undefined && nextProps[propKey] === undefined) {\n        // eslint-disable-next-line no-console\n        console.error(\"downshift: A component has changed the controlled prop \\\"\" + propKey + \"\\\" to be uncontrolled. \" + warningDescription);\n      } else if (prevProps[propKey] === undefined && nextProps[propKey] !== undefined) {\n        // eslint-disable-next-line no-console\n        console.error(\"downshift: A component has changed the uncontrolled prop \\\"\" + propKey + \"\\\" to be controlled. \" + warningDescription);\n      }\n    });\n  };\n}\n\nvar cleanupStatus = debounce(function (documentProp) {\n  getStatusDiv(documentProp).textContent = '';\n}, 500);\n/**\n * @param {String} status the status message\n * @param {Object} documentProp document passed by the user.\n */\n\nfunction setStatus(status, documentProp) {\n  var div = getStatusDiv(documentProp);\n\n  if (!status) {\n    return;\n  }\n\n  div.textContent = status;\n  cleanupStatus(documentProp);\n}\n/**\n * Get the status node or create it if it does not already exist.\n * @param {Object} documentProp document passed by the user.\n * @return {HTMLElement} the status node.\n */\n\n\nfunction getStatusDiv(documentProp) {\n  if (documentProp === void 0) {\n    documentProp = document;\n  }\n\n  var statusDiv = documentProp.getElementById('a11y-status-message');\n\n  if (statusDiv) {\n    return statusDiv;\n  }\n\n  statusDiv = documentProp.createElement('div');\n  statusDiv.setAttribute('id', 'a11y-status-message');\n  statusDiv.setAttribute('role', 'status');\n  statusDiv.setAttribute('aria-live', 'polite');\n  statusDiv.setAttribute('aria-relevant', 'additions text');\n  Object.assign(statusDiv.style, {\n    border: '0',\n    clip: 'rect(0 0 0 0)',\n    height: '1px',\n    margin: '-1px',\n    overflow: 'hidden',\n    padding: '0',\n    position: 'absolute',\n    width: '1px'\n  });\n  documentProp.body.appendChild(statusDiv);\n  return statusDiv;\n}\n\nvar unknown = process.env.NODE_ENV !== \"production\" ? '__autocomplete_unknown__' : 0;\nvar mouseUp = process.env.NODE_ENV !== \"production\" ? '__autocomplete_mouseup__' : 1;\nvar itemMouseEnter = process.env.NODE_ENV !== \"production\" ? '__autocomplete_item_mouseenter__' : 2;\nvar keyDownArrowUp = process.env.NODE_ENV !== \"production\" ? '__autocomplete_keydown_arrow_up__' : 3;\nvar keyDownArrowDown = process.env.NODE_ENV !== \"production\" ? '__autocomplete_keydown_arrow_down__' : 4;\nvar keyDownEscape = process.env.NODE_ENV !== \"production\" ? '__autocomplete_keydown_escape__' : 5;\nvar keyDownEnter = process.env.NODE_ENV !== \"production\" ? '__autocomplete_keydown_enter__' : 6;\nvar keyDownHome = process.env.NODE_ENV !== \"production\" ? '__autocomplete_keydown_home__' : 7;\nvar keyDownEnd = process.env.NODE_ENV !== \"production\" ? '__autocomplete_keydown_end__' : 8;\nvar clickItem = process.env.NODE_ENV !== \"production\" ? '__autocomplete_click_item__' : 9;\nvar blurInput = process.env.NODE_ENV !== \"production\" ? '__autocomplete_blur_input__' : 10;\nvar changeInput = process.env.NODE_ENV !== \"production\" ? '__autocomplete_change_input__' : 11;\nvar keyDownSpaceButton = process.env.NODE_ENV !== \"production\" ? '__autocomplete_keydown_space_button__' : 12;\nvar clickButton = process.env.NODE_ENV !== \"production\" ? '__autocomplete_click_button__' : 13;\nvar blurButton = process.env.NODE_ENV !== \"production\" ? '__autocomplete_blur_button__' : 14;\nvar controlledPropUpdatedSelectedItem = process.env.NODE_ENV !== \"production\" ? '__autocomplete_controlled_prop_updated_selected_item__' : 15;\nvar touchEnd = process.env.NODE_ENV !== \"production\" ? '__autocomplete_touchend__' : 16;\n\nvar stateChangeTypes$3 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  unknown: unknown,\n  mouseUp: mouseUp,\n  itemMouseEnter: itemMouseEnter,\n  keyDownArrowUp: keyDownArrowUp,\n  keyDownArrowDown: keyDownArrowDown,\n  keyDownEscape: keyDownEscape,\n  keyDownEnter: keyDownEnter,\n  keyDownHome: keyDownHome,\n  keyDownEnd: keyDownEnd,\n  clickItem: clickItem,\n  blurInput: blurInput,\n  changeInput: changeInput,\n  keyDownSpaceButton: keyDownSpaceButton,\n  clickButton: clickButton,\n  blurButton: blurButton,\n  controlledPropUpdatedSelectedItem: controlledPropUpdatedSelectedItem,\n  touchEnd: touchEnd\n});\n\nvar _excluded$4 = [\"refKey\", \"ref\"],\n    _excluded2$3 = [\"onClick\", \"onPress\", \"onKeyDown\", \"onKeyUp\", \"onBlur\"],\n    _excluded3$2 = [\"onKeyDown\", \"onBlur\", \"onChange\", \"onInput\", \"onChangeText\"],\n    _excluded4$1 = [\"refKey\", \"ref\"],\n    _excluded5$1 = [\"onMouseMove\", \"onMouseDown\", \"onClick\", \"onPress\", \"index\", \"item\"];\n\nvar Downshift = /*#__PURE__*/function () {\n  var Downshift = /*#__PURE__*/function (_Component) {\n    _inheritsLoose(Downshift, _Component);\n\n    function Downshift(_props) {\n      var _this;\n\n      _this = _Component.call(this, _props) || this; // fancy destructuring + defaults + aliases\n      // this basically says each value of state should either be set to\n      // the initial value or the default value if the initial value is not provided\n\n      _this.id = _this.props.id || \"downshift-\" + generateId();\n      _this.menuId = _this.props.menuId || _this.id + \"-menu\";\n      _this.labelId = _this.props.labelId || _this.id + \"-label\";\n      _this.inputId = _this.props.inputId || _this.id + \"-input\";\n\n      _this.getItemId = _this.props.getItemId || function (index) {\n        return _this.id + \"-item-\" + index;\n      };\n\n      _this.input = null;\n      _this.items = [];\n      _this.itemCount = null;\n      _this.previousResultCount = 0;\n      _this.timeoutIds = [];\n\n      _this.internalSetTimeout = function (fn, time) {\n        var id = setTimeout(function () {\n          _this.timeoutIds = _this.timeoutIds.filter(function (i) {\n            return i !== id;\n          });\n          fn();\n        }, time);\n\n        _this.timeoutIds.push(id);\n      };\n\n      _this.setItemCount = function (count) {\n        _this.itemCount = count;\n      };\n\n      _this.unsetItemCount = function () {\n        _this.itemCount = null;\n      };\n\n      _this.setHighlightedIndex = function (highlightedIndex, otherStateToSet) {\n        if (highlightedIndex === void 0) {\n          highlightedIndex = _this.props.defaultHighlightedIndex;\n        }\n\n        if (otherStateToSet === void 0) {\n          otherStateToSet = {};\n        }\n\n        otherStateToSet = pickState(otherStateToSet);\n\n        _this.internalSetState(_extends({\n          highlightedIndex: highlightedIndex\n        }, otherStateToSet));\n      };\n\n      _this.clearSelection = function (cb) {\n        _this.internalSetState({\n          selectedItem: null,\n          inputValue: '',\n          highlightedIndex: _this.props.defaultHighlightedIndex,\n          isOpen: _this.props.defaultIsOpen\n        }, cb);\n      };\n\n      _this.selectItem = function (item, otherStateToSet, cb) {\n        otherStateToSet = pickState(otherStateToSet);\n\n        _this.internalSetState(_extends({\n          isOpen: _this.props.defaultIsOpen,\n          highlightedIndex: _this.props.defaultHighlightedIndex,\n          selectedItem: item,\n          inputValue: _this.props.itemToString(item)\n        }, otherStateToSet), cb);\n      };\n\n      _this.selectItemAtIndex = function (itemIndex, otherStateToSet, cb) {\n        var item = _this.items[itemIndex];\n\n        if (item == null) {\n          return;\n        }\n\n        _this.selectItem(item, otherStateToSet, cb);\n      };\n\n      _this.selectHighlightedItem = function (otherStateToSet, cb) {\n        return _this.selectItemAtIndex(_this.getState().highlightedIndex, otherStateToSet, cb);\n      };\n\n      _this.internalSetState = function (stateToSet, cb) {\n        var isItemSelected, onChangeArg;\n        var onStateChangeArg = {};\n        var isStateToSetFunction = typeof stateToSet === 'function'; // we want to call `onInputValueChange` before the `setState` call\n        // so someone controlling the `inputValue` state gets notified of\n        // the input change as soon as possible. This avoids issues with\n        // preserving the cursor position.\n        // See https://github.com/downshift-js/downshift/issues/217 for more info.\n\n        if (!isStateToSetFunction && stateToSet.hasOwnProperty('inputValue')) {\n          _this.props.onInputValueChange(stateToSet.inputValue, _extends({}, _this.getStateAndHelpers(), stateToSet));\n        }\n\n        return _this.setState(function (state) {\n          state = _this.getState(state);\n          var newStateToSet = isStateToSetFunction ? stateToSet(state) : stateToSet; // Your own function that could modify the state that will be set.\n\n          newStateToSet = _this.props.stateReducer(state, newStateToSet); // checks if an item is selected, regardless of if it's different from\n          // what was selected before\n          // used to determine if onSelect and onChange callbacks should be called\n\n          isItemSelected = newStateToSet.hasOwnProperty('selectedItem'); // this keeps track of the object we want to call with setState\n\n          var nextState = {}; // this is just used to tell whether the state changed\n\n          var nextFullState = {}; // we need to call on change if the outside world is controlling any of our state\n          // and we're trying to update that state. OR if the selection has changed and we're\n          // trying to update the selection\n\n          if (isItemSelected && newStateToSet.selectedItem !== state.selectedItem) {\n            onChangeArg = newStateToSet.selectedItem;\n          }\n\n          newStateToSet.type = newStateToSet.type || unknown;\n          Object.keys(newStateToSet).forEach(function (key) {\n            // onStateChangeArg should only have the state that is\n            // actually changing\n            if (state[key] !== newStateToSet[key]) {\n              onStateChangeArg[key] = newStateToSet[key];\n            } // the type is useful for the onStateChangeArg\n            // but we don't actually want to set it in internal state.\n            // this is an undocumented feature for now... Not all internalSetState\n            // calls support it and I'm not certain we want them to yet.\n            // But it enables users controlling the isOpen state to know when\n            // the isOpen state changes due to mouseup events which is quite handy.\n\n\n            if (key === 'type') {\n              return;\n            }\n\n            nextFullState[key] = newStateToSet[key]; // if it's coming from props, then we don't care to set it internally\n\n            if (!isControlledProp(_this.props, key)) {\n              nextState[key] = newStateToSet[key];\n            }\n          }); // if stateToSet is a function, then we weren't able to call onInputValueChange\n          // earlier, so we'll call it now that we know what the inputValue state will be.\n\n          if (isStateToSetFunction && newStateToSet.hasOwnProperty('inputValue')) {\n            _this.props.onInputValueChange(newStateToSet.inputValue, _extends({}, _this.getStateAndHelpers(), newStateToSet));\n          }\n\n          return nextState;\n        }, function () {\n          // call the provided callback if it's a function\n          cbToCb(cb)(); // only call the onStateChange and onChange callbacks if\n          // we have relevant information to pass them.\n\n          var hasMoreStateThanType = Object.keys(onStateChangeArg).length > 1;\n\n          if (hasMoreStateThanType) {\n            _this.props.onStateChange(onStateChangeArg, _this.getStateAndHelpers());\n          }\n\n          if (isItemSelected) {\n            _this.props.onSelect(stateToSet.selectedItem, _this.getStateAndHelpers());\n          }\n\n          if (onChangeArg !== undefined) {\n            _this.props.onChange(onChangeArg, _this.getStateAndHelpers());\n          } // this is currently undocumented and therefore subject to change\n          // We'll try to not break it, but just be warned.\n\n\n          _this.props.onUserAction(onStateChangeArg, _this.getStateAndHelpers());\n        });\n      };\n\n      _this.rootRef = function (node) {\n        return _this._rootNode = node;\n      };\n\n      _this.getRootProps = function (_temp, _temp2) {\n        var _extends2;\n\n        var _ref = _temp === void 0 ? {} : _temp,\n            _ref$refKey = _ref.refKey,\n            refKey = _ref$refKey === void 0 ? 'ref' : _ref$refKey,\n            ref = _ref.ref,\n            rest = _objectWithoutPropertiesLoose(_ref, _excluded$4);\n\n        var _ref2 = _temp2 === void 0 ? {} : _temp2,\n            _ref2$suppressRefErro = _ref2.suppressRefError,\n            suppressRefError = _ref2$suppressRefErro === void 0 ? false : _ref2$suppressRefErro;\n\n        // this is used in the render to know whether the user has called getRootProps.\n        // It uses that to know whether to apply the props automatically\n        _this.getRootProps.called = true;\n        _this.getRootProps.refKey = refKey;\n        _this.getRootProps.suppressRefError = suppressRefError;\n\n        var _this$getState = _this.getState(),\n            isOpen = _this$getState.isOpen;\n\n        return _extends((_extends2 = {}, _extends2[refKey] = handleRefs(ref, _this.rootRef), _extends2.role = 'combobox', _extends2['aria-expanded'] = isOpen, _extends2['aria-haspopup'] = 'listbox', _extends2['aria-owns'] = isOpen ? _this.menuId : null, _extends2['aria-labelledby'] = _this.labelId, _extends2), rest);\n      };\n\n      _this.keyDownHandlers = {\n        ArrowDown: function ArrowDown(event) {\n          var _this2 = this;\n\n          event.preventDefault();\n\n          if (this.getState().isOpen) {\n            var amount = event.shiftKey ? 5 : 1;\n            this.moveHighlightedIndex(amount, {\n              type: keyDownArrowDown\n            });\n          } else {\n            this.internalSetState({\n              isOpen: true,\n              type: keyDownArrowDown\n            }, function () {\n              var itemCount = _this2.getItemCount();\n\n              if (itemCount > 0) {\n                var _this2$getState = _this2.getState(),\n                    highlightedIndex = _this2$getState.highlightedIndex;\n\n                var nextHighlightedIndex = getNextWrappingIndex(1, highlightedIndex, itemCount, function (index) {\n                  return _this2.getItemNodeFromIndex(index);\n                });\n\n                _this2.setHighlightedIndex(nextHighlightedIndex, {\n                  type: keyDownArrowDown\n                });\n              }\n            });\n          }\n        },\n        ArrowUp: function ArrowUp(event) {\n          var _this3 = this;\n\n          event.preventDefault();\n\n          if (this.getState().isOpen) {\n            var amount = event.shiftKey ? -5 : -1;\n            this.moveHighlightedIndex(amount, {\n              type: keyDownArrowUp\n            });\n          } else {\n            this.internalSetState({\n              isOpen: true,\n              type: keyDownArrowUp\n            }, function () {\n              var itemCount = _this3.getItemCount();\n\n              if (itemCount > 0) {\n                var _this3$getState = _this3.getState(),\n                    highlightedIndex = _this3$getState.highlightedIndex;\n\n                var nextHighlightedIndex = getNextWrappingIndex(-1, highlightedIndex, itemCount, function (index) {\n                  return _this3.getItemNodeFromIndex(index);\n                });\n\n                _this3.setHighlightedIndex(nextHighlightedIndex, {\n                  type: keyDownArrowUp\n                });\n              }\n            });\n          }\n        },\n        Enter: function Enter(event) {\n          if (event.which === 229) {\n            return;\n          }\n\n          var _this$getState2 = this.getState(),\n              isOpen = _this$getState2.isOpen,\n              highlightedIndex = _this$getState2.highlightedIndex;\n\n          if (isOpen && highlightedIndex != null) {\n            event.preventDefault();\n            var item = this.items[highlightedIndex];\n            var itemNode = this.getItemNodeFromIndex(highlightedIndex);\n\n            if (item == null || itemNode && itemNode.hasAttribute('disabled')) {\n              return;\n            }\n\n            this.selectHighlightedItem({\n              type: keyDownEnter\n            });\n          }\n        },\n        Escape: function Escape(event) {\n          event.preventDefault();\n          this.reset(_extends({\n            type: keyDownEscape\n          }, !this.state.isOpen && {\n            selectedItem: null,\n            inputValue: ''\n          }));\n        }\n      };\n      _this.buttonKeyDownHandlers = _extends({}, _this.keyDownHandlers, {\n        ' ': function _(event) {\n          event.preventDefault();\n          this.toggleMenu({\n            type: keyDownSpaceButton\n          });\n        }\n      });\n      _this.inputKeyDownHandlers = _extends({}, _this.keyDownHandlers, {\n        Home: function Home(event) {\n          var _this4 = this;\n\n          var _this$getState3 = this.getState(),\n              isOpen = _this$getState3.isOpen;\n\n          if (!isOpen) {\n            return;\n          }\n\n          event.preventDefault();\n          var itemCount = this.getItemCount();\n\n          if (itemCount <= 0 || !isOpen) {\n            return;\n          } // get next non-disabled starting downwards from 0 if that's disabled.\n\n\n          var newHighlightedIndex = getNextNonDisabledIndex(1, 0, itemCount, function (index) {\n            return _this4.getItemNodeFromIndex(index);\n          }, false);\n          this.setHighlightedIndex(newHighlightedIndex, {\n            type: keyDownHome\n          });\n        },\n        End: function End(event) {\n          var _this5 = this;\n\n          var _this$getState4 = this.getState(),\n              isOpen = _this$getState4.isOpen;\n\n          if (!isOpen) {\n            return;\n          }\n\n          event.preventDefault();\n          var itemCount = this.getItemCount();\n\n          if (itemCount <= 0 || !isOpen) {\n            return;\n          } // get next non-disabled starting upwards from last index if that's disabled.\n\n\n          var newHighlightedIndex = getNextNonDisabledIndex(-1, itemCount - 1, itemCount, function (index) {\n            return _this5.getItemNodeFromIndex(index);\n          }, false);\n          this.setHighlightedIndex(newHighlightedIndex, {\n            type: keyDownEnd\n          });\n        }\n      });\n\n      _this.getToggleButtonProps = function (_temp3) {\n        var _ref3 = _temp3 === void 0 ? {} : _temp3,\n            onClick = _ref3.onClick;\n            _ref3.onPress;\n            var onKeyDown = _ref3.onKeyDown,\n            onKeyUp = _ref3.onKeyUp,\n            onBlur = _ref3.onBlur,\n            rest = _objectWithoutPropertiesLoose(_ref3, _excluded2$3);\n\n        var _this$getState5 = _this.getState(),\n            isOpen = _this$getState5.isOpen;\n\n        var enabledEventHandlers = {\n          onClick: callAllEventHandlers(onClick, _this.buttonHandleClick),\n          onKeyDown: callAllEventHandlers(onKeyDown, _this.buttonHandleKeyDown),\n          onKeyUp: callAllEventHandlers(onKeyUp, _this.buttonHandleKeyUp),\n          onBlur: callAllEventHandlers(onBlur, _this.buttonHandleBlur)\n        };\n        var eventHandlers = rest.disabled ? {} : enabledEventHandlers;\n        return _extends({\n          type: 'button',\n          role: 'button',\n          'aria-label': isOpen ? 'close menu' : 'open menu',\n          'aria-haspopup': true,\n          'data-toggle': true\n        }, eventHandlers, rest);\n      };\n\n      _this.buttonHandleKeyUp = function (event) {\n        // Prevent click event from emitting in Firefox\n        event.preventDefault();\n      };\n\n      _this.buttonHandleKeyDown = function (event) {\n        var key = normalizeArrowKey(event);\n\n        if (_this.buttonKeyDownHandlers[key]) {\n          _this.buttonKeyDownHandlers[key].call(_assertThisInitialized(_this), event);\n        }\n      };\n\n      _this.buttonHandleClick = function (event) {\n        event.preventDefault(); // handle odd case for Safari and Firefox which\n        // don't give the button the focus properly.\n\n        /* istanbul ignore if (can't reasonably test this) */\n\n        if (_this.props.environment.document.activeElement === _this.props.environment.document.body) {\n          event.target.focus();\n        } // to simplify testing components that use downshift, we'll not wrap this in a setTimeout\n        // if the NODE_ENV is test. With the proper build system, this should be dead code eliminated\n        // when building for production and should therefore have no impact on production code.\n\n\n        if (process.env.NODE_ENV === 'test') {\n          _this.toggleMenu({\n            type: clickButton\n          });\n        } else {\n          // Ensure that toggle of menu occurs after the potential blur event in iOS\n          _this.internalSetTimeout(function () {\n            return _this.toggleMenu({\n              type: clickButton\n            });\n          });\n        }\n      };\n\n      _this.buttonHandleBlur = function (event) {\n        var blurTarget = event.target; // Save blur target for comparison with activeElement later\n        // Need setTimeout, so that when the user presses Tab, the activeElement is the next focused element, not body element\n\n        _this.internalSetTimeout(function () {\n          if (!_this.isMouseDown && (_this.props.environment.document.activeElement == null || _this.props.environment.document.activeElement.id !== _this.inputId) && _this.props.environment.document.activeElement !== blurTarget // Do nothing if we refocus the same element again (to solve issue in Safari on iOS)\n          ) {\n            _this.reset({\n              type: blurButton\n            });\n          }\n        });\n      };\n\n      _this.getLabelProps = function (props) {\n        return _extends({\n          htmlFor: _this.inputId,\n          id: _this.labelId\n        }, props);\n      };\n\n      _this.getInputProps = function (_temp4) {\n        var _ref4 = _temp4 === void 0 ? {} : _temp4,\n            onKeyDown = _ref4.onKeyDown,\n            onBlur = _ref4.onBlur,\n            onChange = _ref4.onChange,\n            onInput = _ref4.onInput;\n            _ref4.onChangeText;\n            var rest = _objectWithoutPropertiesLoose(_ref4, _excluded3$2);\n\n        var onChangeKey;\n        var eventHandlers = {};\n        /* istanbul ignore next (preact) */\n\n        {\n          onChangeKey = 'onChange';\n        }\n\n        var _this$getState6 = _this.getState(),\n            inputValue = _this$getState6.inputValue,\n            isOpen = _this$getState6.isOpen,\n            highlightedIndex = _this$getState6.highlightedIndex;\n\n        if (!rest.disabled) {\n          var _eventHandlers;\n\n          eventHandlers = (_eventHandlers = {}, _eventHandlers[onChangeKey] = callAllEventHandlers(onChange, onInput, _this.inputHandleChange), _eventHandlers.onKeyDown = callAllEventHandlers(onKeyDown, _this.inputHandleKeyDown), _eventHandlers.onBlur = callAllEventHandlers(onBlur, _this.inputHandleBlur), _eventHandlers);\n        }\n\n        return _extends({\n          'aria-autocomplete': 'list',\n          'aria-activedescendant': isOpen && typeof highlightedIndex === 'number' && highlightedIndex >= 0 ? _this.getItemId(highlightedIndex) : null,\n          'aria-controls': isOpen ? _this.menuId : null,\n          'aria-labelledby': _this.labelId,\n          // https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion\n          // revert back since autocomplete=\"nope\" is ignored on latest Chrome and Opera\n          autoComplete: 'off',\n          value: inputValue,\n          id: _this.inputId\n        }, eventHandlers, rest);\n      };\n\n      _this.inputHandleKeyDown = function (event) {\n        var key = normalizeArrowKey(event);\n\n        if (key && _this.inputKeyDownHandlers[key]) {\n          _this.inputKeyDownHandlers[key].call(_assertThisInitialized(_this), event);\n        }\n      };\n\n      _this.inputHandleChange = function (event) {\n        _this.internalSetState({\n          type: changeInput,\n          isOpen: true,\n          inputValue: event.target.value,\n          highlightedIndex: _this.props.defaultHighlightedIndex\n        });\n      };\n\n      _this.inputHandleBlur = function () {\n        // Need setTimeout, so that when the user presses Tab, the activeElement is the next focused element, not the body element\n        _this.internalSetTimeout(function () {\n          var downshiftButtonIsActive = _this.props.environment.document && !!_this.props.environment.document.activeElement && !!_this.props.environment.document.activeElement.dataset && _this.props.environment.document.activeElement.dataset.toggle && _this._rootNode && _this._rootNode.contains(_this.props.environment.document.activeElement);\n\n          if (!_this.isMouseDown && !downshiftButtonIsActive) {\n            _this.reset({\n              type: blurInput\n            });\n          }\n        });\n      };\n\n      _this.menuRef = function (node) {\n        _this._menuNode = node;\n      };\n\n      _this.getMenuProps = function (_temp5, _temp6) {\n        var _extends3;\n\n        var _ref5 = _temp5 === void 0 ? {} : _temp5,\n            _ref5$refKey = _ref5.refKey,\n            refKey = _ref5$refKey === void 0 ? 'ref' : _ref5$refKey,\n            ref = _ref5.ref,\n            props = _objectWithoutPropertiesLoose(_ref5, _excluded4$1);\n\n        var _ref6 = _temp6 === void 0 ? {} : _temp6,\n            _ref6$suppressRefErro = _ref6.suppressRefError,\n            suppressRefError = _ref6$suppressRefErro === void 0 ? false : _ref6$suppressRefErro;\n\n        _this.getMenuProps.called = true;\n        _this.getMenuProps.refKey = refKey;\n        _this.getMenuProps.suppressRefError = suppressRefError;\n        return _extends((_extends3 = {}, _extends3[refKey] = handleRefs(ref, _this.menuRef), _extends3.role = 'listbox', _extends3['aria-labelledby'] = props && props['aria-label'] ? null : _this.labelId, _extends3.id = _this.menuId, _extends3), props);\n      };\n\n      _this.getItemProps = function (_temp7) {\n        var _enabledEventHandlers;\n\n        var _ref7 = _temp7 === void 0 ? {} : _temp7,\n            onMouseMove = _ref7.onMouseMove,\n            onMouseDown = _ref7.onMouseDown,\n            onClick = _ref7.onClick;\n            _ref7.onPress;\n            var index = _ref7.index,\n            _ref7$item = _ref7.item,\n            item = _ref7$item === void 0 ? process.env.NODE_ENV === 'production' ?\n        /* istanbul ignore next */\n        undefined : requiredProp('getItemProps', 'item') : _ref7$item,\n            rest = _objectWithoutPropertiesLoose(_ref7, _excluded5$1);\n\n        if (index === undefined) {\n          _this.items.push(item);\n\n          index = _this.items.indexOf(item);\n        } else {\n          _this.items[index] = item;\n        }\n\n        var onSelectKey = 'onClick';\n        var customClickHandler = onClick;\n        var enabledEventHandlers = (_enabledEventHandlers = {\n          // onMouseMove is used over onMouseEnter here. onMouseMove\n          // is only triggered on actual mouse movement while onMouseEnter\n          // can fire on DOM changes, interrupting keyboard navigation\n          onMouseMove: callAllEventHandlers(onMouseMove, function () {\n            if (index === _this.getState().highlightedIndex) {\n              return;\n            }\n\n            _this.setHighlightedIndex(index, {\n              type: itemMouseEnter\n            }); // We never want to manually scroll when changing state based\n            // on `onMouseMove` because we will be moving the element out\n            // from under the user which is currently scrolling/moving the\n            // cursor\n\n\n            _this.avoidScrolling = true;\n\n            _this.internalSetTimeout(function () {\n              return _this.avoidScrolling = false;\n            }, 250);\n          }),\n          onMouseDown: callAllEventHandlers(onMouseDown, function (event) {\n            // This prevents the activeElement from being changed\n            // to the item so it can remain with the current activeElement\n            // which is a more common use case.\n            event.preventDefault();\n          })\n        }, _enabledEventHandlers[onSelectKey] = callAllEventHandlers(customClickHandler, function () {\n          _this.selectItemAtIndex(index, {\n            type: clickItem\n          });\n        }), _enabledEventHandlers); // Passing down the onMouseDown handler to prevent redirect\n        // of the activeElement if clicking on disabled items\n\n        var eventHandlers = rest.disabled ? {\n          onMouseDown: enabledEventHandlers.onMouseDown\n        } : enabledEventHandlers;\n        return _extends({\n          id: _this.getItemId(index),\n          role: 'option',\n          'aria-selected': _this.getState().highlightedIndex === index\n        }, eventHandlers, rest);\n      };\n\n      _this.clearItems = function () {\n        _this.items = [];\n      };\n\n      _this.reset = function (otherStateToSet, cb) {\n        if (otherStateToSet === void 0) {\n          otherStateToSet = {};\n        }\n\n        otherStateToSet = pickState(otherStateToSet);\n\n        _this.internalSetState(function (_ref8) {\n          var selectedItem = _ref8.selectedItem;\n          return _extends({\n            isOpen: _this.props.defaultIsOpen,\n            highlightedIndex: _this.props.defaultHighlightedIndex,\n            inputValue: _this.props.itemToString(selectedItem)\n          }, otherStateToSet);\n        }, cb);\n      };\n\n      _this.toggleMenu = function (otherStateToSet, cb) {\n        if (otherStateToSet === void 0) {\n          otherStateToSet = {};\n        }\n\n        otherStateToSet = pickState(otherStateToSet);\n\n        _this.internalSetState(function (_ref9) {\n          var isOpen = _ref9.isOpen;\n          return _extends({\n            isOpen: !isOpen\n          }, isOpen && {\n            highlightedIndex: _this.props.defaultHighlightedIndex\n          }, otherStateToSet);\n        }, function () {\n          var _this$getState7 = _this.getState(),\n              isOpen = _this$getState7.isOpen,\n              highlightedIndex = _this$getState7.highlightedIndex;\n\n          if (isOpen) {\n            if (_this.getItemCount() > 0 && typeof highlightedIndex === 'number') {\n              _this.setHighlightedIndex(highlightedIndex, otherStateToSet);\n            }\n          }\n\n          cbToCb(cb)();\n        });\n      };\n\n      _this.openMenu = function (cb) {\n        _this.internalSetState({\n          isOpen: true\n        }, cb);\n      };\n\n      _this.closeMenu = function (cb) {\n        _this.internalSetState({\n          isOpen: false\n        }, cb);\n      };\n\n      _this.updateStatus = debounce(function () {\n        var state = _this.getState();\n\n        var item = _this.items[state.highlightedIndex];\n\n        var resultCount = _this.getItemCount();\n\n        var status = _this.props.getA11yStatusMessage(_extends({\n          itemToString: _this.props.itemToString,\n          previousResultCount: _this.previousResultCount,\n          resultCount: resultCount,\n          highlightedItem: item\n        }, state));\n\n        _this.previousResultCount = resultCount;\n        setStatus(status, _this.props.environment.document);\n      }, 200);\n\n      var _this$props = _this.props,\n          defaultHighlightedIndex = _this$props.defaultHighlightedIndex,\n          _this$props$initialHi = _this$props.initialHighlightedIndex,\n          _highlightedIndex = _this$props$initialHi === void 0 ? defaultHighlightedIndex : _this$props$initialHi,\n          defaultIsOpen = _this$props.defaultIsOpen,\n          _this$props$initialIs = _this$props.initialIsOpen,\n          _isOpen = _this$props$initialIs === void 0 ? defaultIsOpen : _this$props$initialIs,\n          _this$props$initialIn = _this$props.initialInputValue,\n          _inputValue = _this$props$initialIn === void 0 ? '' : _this$props$initialIn,\n          _this$props$initialSe = _this$props.initialSelectedItem,\n          _selectedItem = _this$props$initialSe === void 0 ? null : _this$props$initialSe;\n\n      var _state = _this.getState({\n        highlightedIndex: _highlightedIndex,\n        isOpen: _isOpen,\n        inputValue: _inputValue,\n        selectedItem: _selectedItem\n      });\n\n      if (_state.selectedItem != null && _this.props.initialInputValue === undefined) {\n        _state.inputValue = _this.props.itemToString(_state.selectedItem);\n      }\n\n      _this.state = _state;\n      return _this;\n    }\n\n    var _proto = Downshift.prototype;\n\n    /**\n     * Clear all running timeouts\n     */\n    _proto.internalClearTimeouts = function internalClearTimeouts() {\n      this.timeoutIds.forEach(function (id) {\n        clearTimeout(id);\n      });\n      this.timeoutIds = [];\n    }\n    /**\n     * Gets the state based on internal state or props\n     * If a state value is passed via props, then that\n     * is the value given, otherwise it's retrieved from\n     * stateToMerge\n     *\n     * @param {Object} stateToMerge defaults to this.state\n     * @return {Object} the state\n     */\n    ;\n\n    _proto.getState = function getState$1(stateToMerge) {\n      if (stateToMerge === void 0) {\n        stateToMerge = this.state;\n      }\n\n      return getState(stateToMerge, this.props);\n    };\n\n    _proto.getItemCount = function getItemCount() {\n      // things read better this way. They're in priority order:\n      // 1. `this.itemCount`\n      // 2. `this.props.itemCount`\n      // 3. `this.items.length`\n      var itemCount = this.items.length;\n\n      if (this.itemCount != null) {\n        itemCount = this.itemCount;\n      } else if (this.props.itemCount !== undefined) {\n        itemCount = this.props.itemCount;\n      }\n\n      return itemCount;\n    };\n\n    _proto.getItemNodeFromIndex = function getItemNodeFromIndex(index) {\n      return this.props.environment.document.getElementById(this.getItemId(index));\n    };\n\n    _proto.scrollHighlightedItemIntoView = function scrollHighlightedItemIntoView() {\n      /* istanbul ignore else (react-native) */\n      {\n        var node = this.getItemNodeFromIndex(this.getState().highlightedIndex);\n        this.props.scrollIntoView(node, this._menuNode);\n      }\n    };\n\n    _proto.moveHighlightedIndex = function moveHighlightedIndex(amount, otherStateToSet) {\n      var _this6 = this;\n\n      var itemCount = this.getItemCount();\n\n      var _this$getState8 = this.getState(),\n          highlightedIndex = _this$getState8.highlightedIndex;\n\n      if (itemCount > 0) {\n        var nextHighlightedIndex = getNextWrappingIndex(amount, highlightedIndex, itemCount, function (index) {\n          return _this6.getItemNodeFromIndex(index);\n        });\n        this.setHighlightedIndex(nextHighlightedIndex, otherStateToSet);\n      }\n    };\n\n    _proto.getStateAndHelpers = function getStateAndHelpers() {\n      var _this$getState9 = this.getState(),\n          highlightedIndex = _this$getState9.highlightedIndex,\n          inputValue = _this$getState9.inputValue,\n          selectedItem = _this$getState9.selectedItem,\n          isOpen = _this$getState9.isOpen;\n\n      var itemToString = this.props.itemToString;\n      var id = this.id;\n      var getRootProps = this.getRootProps,\n          getToggleButtonProps = this.getToggleButtonProps,\n          getLabelProps = this.getLabelProps,\n          getMenuProps = this.getMenuProps,\n          getInputProps = this.getInputProps,\n          getItemProps = this.getItemProps,\n          openMenu = this.openMenu,\n          closeMenu = this.closeMenu,\n          toggleMenu = this.toggleMenu,\n          selectItem = this.selectItem,\n          selectItemAtIndex = this.selectItemAtIndex,\n          selectHighlightedItem = this.selectHighlightedItem,\n          setHighlightedIndex = this.setHighlightedIndex,\n          clearSelection = this.clearSelection,\n          clearItems = this.clearItems,\n          reset = this.reset,\n          setItemCount = this.setItemCount,\n          unsetItemCount = this.unsetItemCount,\n          setState = this.internalSetState;\n      return {\n        // prop getters\n        getRootProps: getRootProps,\n        getToggleButtonProps: getToggleButtonProps,\n        getLabelProps: getLabelProps,\n        getMenuProps: getMenuProps,\n        getInputProps: getInputProps,\n        getItemProps: getItemProps,\n        // actions\n        reset: reset,\n        openMenu: openMenu,\n        closeMenu: closeMenu,\n        toggleMenu: toggleMenu,\n        selectItem: selectItem,\n        selectItemAtIndex: selectItemAtIndex,\n        selectHighlightedItem: selectHighlightedItem,\n        setHighlightedIndex: setHighlightedIndex,\n        clearSelection: clearSelection,\n        clearItems: clearItems,\n        setItemCount: setItemCount,\n        unsetItemCount: unsetItemCount,\n        setState: setState,\n        // props\n        itemToString: itemToString,\n        // derived\n        id: id,\n        // state\n        highlightedIndex: highlightedIndex,\n        inputValue: inputValue,\n        isOpen: isOpen,\n        selectedItem: selectedItem\n      };\n    } //////////////////////////// ROOT\n    ;\n\n    _proto.componentDidMount = function componentDidMount() {\n      var _this7 = this;\n\n      /* istanbul ignore if (react-native) */\n      if (process.env.NODE_ENV !== 'production' && !false && this.getMenuProps.called && !this.getMenuProps.suppressRefError) {\n        validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps);\n      }\n      /* istanbul ignore if (react-native) */\n\n\n      {\n        // this.isMouseDown helps us track whether the mouse is currently held down.\n        // This is useful when the user clicks on an item in the list, but holds the mouse\n        // down long enough for the list to disappear (because the blur event fires on the input)\n        // this.isMouseDown is used in the blur handler on the input to determine whether the blur event should\n        // trigger hiding the menu.\n        var onMouseDown = function onMouseDown() {\n          _this7.isMouseDown = true;\n        };\n\n        var onMouseUp = function onMouseUp(event) {\n          _this7.isMouseDown = false; // if the target element or the activeElement is within a downshift node\n          // then we don't want to reset downshift\n\n          var contextWithinDownshift = targetWithinDownshift(event.target, [_this7._rootNode, _this7._menuNode], _this7.props.environment);\n\n          if (!contextWithinDownshift && _this7.getState().isOpen) {\n            _this7.reset({\n              type: mouseUp\n            }, function () {\n              return _this7.props.onOuterClick(_this7.getStateAndHelpers());\n            });\n          }\n        }; // Touching an element in iOS gives focus and hover states, but touching out of\n        // the element will remove hover, and persist the focus state, resulting in the\n        // blur event not being triggered.\n        // this.isTouchMove helps us track whether the user is tapping or swiping on a touch screen.\n        // If the user taps outside of Downshift, the component should be reset,\n        // but not if the user is swiping\n\n\n        var onTouchStart = function onTouchStart() {\n          _this7.isTouchMove = false;\n        };\n\n        var onTouchMove = function onTouchMove() {\n          _this7.isTouchMove = true;\n        };\n\n        var onTouchEnd = function onTouchEnd(event) {\n          var contextWithinDownshift = targetWithinDownshift(event.target, [_this7._rootNode, _this7._menuNode], _this7.props.environment, false);\n\n          if (!_this7.isTouchMove && !contextWithinDownshift && _this7.getState().isOpen) {\n            _this7.reset({\n              type: touchEnd\n            }, function () {\n              return _this7.props.onOuterClick(_this7.getStateAndHelpers());\n            });\n          }\n        };\n\n        var environment = this.props.environment;\n        environment.addEventListener('mousedown', onMouseDown);\n        environment.addEventListener('mouseup', onMouseUp);\n        environment.addEventListener('touchstart', onTouchStart);\n        environment.addEventListener('touchmove', onTouchMove);\n        environment.addEventListener('touchend', onTouchEnd);\n\n        this.cleanup = function () {\n          _this7.internalClearTimeouts();\n\n          _this7.updateStatus.cancel();\n\n          environment.removeEventListener('mousedown', onMouseDown);\n          environment.removeEventListener('mouseup', onMouseUp);\n          environment.removeEventListener('touchstart', onTouchStart);\n          environment.removeEventListener('touchmove', onTouchMove);\n          environment.removeEventListener('touchend', onTouchEnd);\n        };\n      }\n    };\n\n    _proto.shouldScroll = function shouldScroll(prevState, prevProps) {\n      var _ref10 = this.props.highlightedIndex === undefined ? this.getState() : this.props,\n          currentHighlightedIndex = _ref10.highlightedIndex;\n\n      var _ref11 = prevProps.highlightedIndex === undefined ? prevState : prevProps,\n          prevHighlightedIndex = _ref11.highlightedIndex;\n\n      var scrollWhenOpen = currentHighlightedIndex && this.getState().isOpen && !prevState.isOpen;\n      var scrollWhenNavigating = currentHighlightedIndex !== prevHighlightedIndex;\n      return scrollWhenOpen || scrollWhenNavigating;\n    };\n\n    _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateControlledUnchanged(this.state, prevProps, this.props);\n        /* istanbul ignore if (react-native) */\n\n        if (this.getMenuProps.called && !this.getMenuProps.suppressRefError) {\n          validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps);\n        }\n      }\n\n      if (isControlledProp(this.props, 'selectedItem') && this.props.selectedItemChanged(prevProps.selectedItem, this.props.selectedItem)) {\n        this.internalSetState({\n          type: controlledPropUpdatedSelectedItem,\n          inputValue: this.props.itemToString(this.props.selectedItem)\n        });\n      }\n\n      if (!this.avoidScrolling && this.shouldScroll(prevState, prevProps)) {\n        this.scrollHighlightedItemIntoView();\n      }\n      /* istanbul ignore else (react-native) */\n\n\n      {\n        this.updateStatus();\n      }\n    };\n\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      this.cleanup(); // avoids memory leak\n    };\n\n    _proto.render = function render() {\n      var children = unwrapArray(this.props.children, noop); // because the items are rerendered every time we call the children\n      // we clear this out each render and it will be populated again as\n      // getItemProps is called.\n\n      this.clearItems(); // we reset this so we know whether the user calls getRootProps during\n      // this render. If they do then we don't need to do anything,\n      // if they don't then we need to clone the element they return and\n      // apply the props for them.\n\n      this.getRootProps.called = false;\n      this.getRootProps.refKey = undefined;\n      this.getRootProps.suppressRefError = undefined; // we do something similar for getMenuProps\n\n      this.getMenuProps.called = false;\n      this.getMenuProps.refKey = undefined;\n      this.getMenuProps.suppressRefError = undefined; // we do something similar for getLabelProps\n\n      this.getLabelProps.called = false; // and something similar for getInputProps\n\n      this.getInputProps.called = false;\n      var element = unwrapArray(children(this.getStateAndHelpers()));\n\n      if (!element) {\n        return null;\n      }\n\n      if (this.getRootProps.called || this.props.suppressRefError) {\n        if (process.env.NODE_ENV !== 'production' && !this.getRootProps.suppressRefError && !this.props.suppressRefError) {\n          validateGetRootPropsCalledCorrectly(element, this.getRootProps);\n        }\n\n        return element;\n      } else if (isDOMElement(element)) {\n        // they didn't apply the root props, but we can clone\n        // this and apply the props ourselves\n        return /*#__PURE__*/cloneElement(element, this.getRootProps(getElementProps(element)));\n      }\n      /* istanbul ignore else */\n\n\n      if (process.env.NODE_ENV !== 'production') {\n        // they didn't apply the root props, but they need to\n        // otherwise we can't query around the autocomplete\n        throw new Error('downshift: If you return a non-DOM element, you must apply the getRootProps function');\n      }\n      /* istanbul ignore next */\n\n\n      return undefined;\n    };\n\n    return Downshift;\n  }(Component);\n\n  Downshift.defaultProps = {\n    defaultHighlightedIndex: null,\n    defaultIsOpen: false,\n    getA11yStatusMessage: getA11yStatusMessage$1,\n    itemToString: function itemToString(i) {\n      if (i == null) {\n        return '';\n      }\n\n      if (process.env.NODE_ENV !== 'production' && isPlainObject(i) && !i.hasOwnProperty('toString')) {\n        // eslint-disable-next-line no-console\n        console.warn('downshift: An object was passed to the default implementation of `itemToString`. You should probably provide your own `itemToString` implementation. Please refer to the `itemToString` API documentation.', 'The object that was passed:', i);\n      }\n\n      return String(i);\n    },\n    onStateChange: noop,\n    onInputValueChange: noop,\n    onUserAction: noop,\n    onChange: noop,\n    onSelect: noop,\n    onOuterClick: noop,\n    selectedItemChanged: function selectedItemChanged(prevItem, item) {\n      return prevItem !== item;\n    },\n    environment:\n    /* istanbul ignore next (ssr) */\n    typeof window === 'undefined' ? {} : window,\n    stateReducer: function stateReducer(state, stateToSet) {\n      return stateToSet;\n    },\n    suppressRefError: false,\n    scrollIntoView: scrollIntoView\n  };\n  Downshift.stateChangeTypes = stateChangeTypes$3;\n  return Downshift;\n}();\n\nprocess.env.NODE_ENV !== \"production\" ? Downshift.propTypes = {\n  children: PropTypes.func,\n  defaultHighlightedIndex: PropTypes.number,\n  defaultIsOpen: PropTypes.bool,\n  initialHighlightedIndex: PropTypes.number,\n  initialSelectedItem: PropTypes.any,\n  initialInputValue: PropTypes.string,\n  initialIsOpen: PropTypes.bool,\n  getA11yStatusMessage: PropTypes.func,\n  itemToString: PropTypes.func,\n  onChange: PropTypes.func,\n  onSelect: PropTypes.func,\n  onStateChange: PropTypes.func,\n  onInputValueChange: PropTypes.func,\n  onUserAction: PropTypes.func,\n  onOuterClick: PropTypes.func,\n  selectedItemChanged: PropTypes.func,\n  stateReducer: PropTypes.func,\n  itemCount: PropTypes.number,\n  id: PropTypes.string,\n  environment: PropTypes.shape({\n    addEventListener: PropTypes.func,\n    removeEventListener: PropTypes.func,\n    document: PropTypes.shape({\n      getElementById: PropTypes.func,\n      activeElement: PropTypes.any,\n      body: PropTypes.any\n    })\n  }),\n  suppressRefError: PropTypes.bool,\n  scrollIntoView: PropTypes.func,\n  // things we keep in state for uncontrolled components\n  // but can accept as props for controlled components\n\n  /* eslint-disable react/no-unused-prop-types */\n  selectedItem: PropTypes.any,\n  isOpen: PropTypes.bool,\n  inputValue: PropTypes.string,\n  highlightedIndex: PropTypes.number,\n  labelId: PropTypes.string,\n  inputId: PropTypes.string,\n  menuId: PropTypes.string,\n  getItemId: PropTypes.func\n  /* eslint-enable react/no-unused-prop-types */\n\n} : void 0;\nvar Downshift$1 = Downshift;\n\nfunction validateGetMenuPropsCalledCorrectly(node, _ref12) {\n  var refKey = _ref12.refKey;\n\n  if (!node) {\n    // eslint-disable-next-line no-console\n    console.error(\"downshift: The ref prop \\\"\" + refKey + \"\\\" from getMenuProps was not applied correctly on your menu element.\");\n  }\n}\n\nfunction validateGetRootPropsCalledCorrectly(element, _ref13) {\n  var refKey = _ref13.refKey;\n  var refKeySpecified = refKey !== 'ref';\n  var isComposite = !isDOMElement(element);\n\n  if (isComposite && !refKeySpecified && !isForwardRef(element)) {\n    // eslint-disable-next-line no-console\n    console.error('downshift: You returned a non-DOM element. You must specify a refKey in getRootProps');\n  } else if (!isComposite && refKeySpecified) {\n    // eslint-disable-next-line no-console\n    console.error(\"downshift: You returned a DOM element. You should not specify a refKey in getRootProps. You specified \\\"\" + refKey + \"\\\"\");\n  }\n\n  if (!isForwardRef(element) && !getElementProps(element)[refKey]) {\n    // eslint-disable-next-line no-console\n    console.error(\"downshift: You must apply the ref prop \\\"\" + refKey + \"\\\" from getRootProps onto your root element.\");\n  }\n}\n\nvar _excluded$3 = [\"isInitialMount\", \"highlightedIndex\", \"items\", \"environment\"];\nvar dropdownDefaultStateValues = {\n  highlightedIndex: -1,\n  isOpen: false,\n  selectedItem: null,\n  inputValue: ''\n};\n\nfunction callOnChangeProps(action, state, newState) {\n  var props = action.props,\n      type = action.type;\n  var changes = {};\n  Object.keys(state).forEach(function (key) {\n    invokeOnChangeHandler(key, action, state, newState);\n\n    if (newState[key] !== state[key]) {\n      changes[key] = newState[key];\n    }\n  });\n\n  if (props.onStateChange && Object.keys(changes).length) {\n    props.onStateChange(_extends({\n      type: type\n    }, changes));\n  }\n}\n\nfunction invokeOnChangeHandler(key, action, state, newState) {\n  var props = action.props,\n      type = action.type;\n  var handler = \"on\" + capitalizeString(key) + \"Change\";\n\n  if (props[handler] && newState[key] !== undefined && newState[key] !== state[key]) {\n    props[handler](_extends({\n      type: type\n    }, newState));\n  }\n}\n/**\n * Default state reducer that returns the changes.\n *\n * @param {Object} s state.\n * @param {Object} a action with changes.\n * @returns {Object} changes.\n */\n\n\nfunction stateReducer(s, a) {\n  return a.changes;\n}\n/**\n * Returns a message to be added to aria-live region when item is selected.\n *\n * @param {Object} selectionParameters Parameters required to build the message.\n * @returns {string} The a11y message.\n */\n\n\nfunction getA11ySelectionMessage(selectionParameters) {\n  var selectedItem = selectionParameters.selectedItem,\n      itemToStringLocal = selectionParameters.itemToString;\n  return selectedItem ? itemToStringLocal(selectedItem) + \" has been selected.\" : '';\n}\n/**\n * Debounced call for updating the a11y message.\n */\n\n\nvar updateA11yStatus = debounce(function (getA11yMessage, document) {\n  setStatus(getA11yMessage(), document);\n}, 200); // istanbul ignore next\n\nvar useIsomorphicLayoutEffect = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined' ? useLayoutEffect : useEffect;\n\nfunction useElementIds(_ref) {\n  var _ref$id = _ref.id,\n      id = _ref$id === void 0 ? \"downshift-\" + generateId() : _ref$id,\n      labelId = _ref.labelId,\n      menuId = _ref.menuId,\n      getItemId = _ref.getItemId,\n      toggleButtonId = _ref.toggleButtonId,\n      inputId = _ref.inputId;\n  var elementIdsRef = useRef({\n    labelId: labelId || id + \"-label\",\n    menuId: menuId || id + \"-menu\",\n    getItemId: getItemId || function (index) {\n      return id + \"-item-\" + index;\n    },\n    toggleButtonId: toggleButtonId || id + \"-toggle-button\",\n    inputId: inputId || id + \"-input\"\n  });\n  return elementIdsRef.current;\n}\n\nfunction getItemIndex(index, item, items) {\n  if (index !== undefined) {\n    return index;\n  }\n\n  if (items.length === 0) {\n    return -1;\n  }\n\n  return items.indexOf(item);\n}\n\nfunction itemToString(item) {\n  return item ? String(item) : '';\n}\n\nfunction isAcceptedCharacterKey(key) {\n  return /^\\S{1}$/.test(key);\n}\n\nfunction capitalizeString(string) {\n  return \"\" + string.slice(0, 1).toUpperCase() + string.slice(1);\n}\n\nfunction useLatestRef(val) {\n  var ref = useRef(val); // technically this is not \"concurrent mode safe\" because we're manipulating\n  // the value during render (so it's not idempotent). However, the places this\n  // hook is used is to support memoizing callbacks which will be called\n  // *during* render, so we need the latest values *during* render.\n  // If not for this, then we'd probably want to use useLayoutEffect instead.\n\n  ref.current = val;\n  return ref;\n}\n/**\n * Computes the controlled state using a the previous state, props,\n * two reducers, one from downshift and an optional one from the user.\n * Also calls the onChange handlers for state values that have changed.\n *\n * @param {Function} reducer Reducer function from downshift.\n * @param {Object} initialState Initial state of the hook.\n * @param {Object} props The hook props.\n * @returns {Array} An array with the state and an action dispatcher.\n */\n\n\nfunction useEnhancedReducer(reducer, initialState, props) {\n  var prevStateRef = useRef();\n  var actionRef = useRef();\n  var enhancedReducer = useCallback(function (state, action) {\n    actionRef.current = action;\n    state = getState(state, action.props);\n    var changes = reducer(state, action);\n    var newState = action.props.stateReducer(state, _extends({}, action, {\n      changes: changes\n    }));\n    return newState;\n  }, [reducer]);\n\n  var _useReducer = useReducer(enhancedReducer, initialState),\n      state = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  var propsRef = useLatestRef(props);\n  var dispatchWithProps = useCallback(function (action) {\n    return dispatch(_extends({\n      props: propsRef.current\n    }, action));\n  }, [propsRef]);\n  var action = actionRef.current;\n  useEffect(function () {\n    if (action && prevStateRef.current && prevStateRef.current !== state) {\n      callOnChangeProps(action, getState(prevStateRef.current, action.props), state);\n    }\n\n    prevStateRef.current = state;\n  }, [state, props, action]);\n  return [state, dispatchWithProps];\n}\n/**\n * Wraps the useEnhancedReducer and applies the controlled prop values before\n * returning the new state.\n *\n * @param {Function} reducer Reducer function from downshift.\n * @param {Object} initialState Initial state of the hook.\n * @param {Object} props The hook props.\n * @returns {Array} An array with the state and an action dispatcher.\n */\n\n\nfunction useControlledReducer$1(reducer, initialState, props) {\n  var _useEnhancedReducer = useEnhancedReducer(reducer, initialState, props),\n      state = _useEnhancedReducer[0],\n      dispatch = _useEnhancedReducer[1];\n\n  return [getState(state, props), dispatch];\n}\n\nvar defaultProps$3 = {\n  itemToString: itemToString,\n  stateReducer: stateReducer,\n  getA11ySelectionMessage: getA11ySelectionMessage,\n  scrollIntoView: scrollIntoView,\n  circularNavigation: false,\n  environment:\n  /* istanbul ignore next (ssr) */\n  typeof window === 'undefined' ? {} : window\n};\n\nfunction getDefaultValue$1(props, propKey, defaultStateValues) {\n  if (defaultStateValues === void 0) {\n    defaultStateValues = dropdownDefaultStateValues;\n  }\n\n  var defaultPropKey = \"default\" + capitalizeString(propKey);\n\n  if (defaultPropKey in props) {\n    return props[defaultPropKey];\n  }\n\n  return defaultStateValues[propKey];\n}\n\nfunction getInitialValue$1(props, propKey, defaultStateValues) {\n  if (defaultStateValues === void 0) {\n    defaultStateValues = dropdownDefaultStateValues;\n  }\n\n  if (propKey in props) {\n    return props[propKey];\n  }\n\n  var initialPropKey = \"initial\" + capitalizeString(propKey);\n\n  if (initialPropKey in props) {\n    return props[initialPropKey];\n  }\n\n  return getDefaultValue$1(props, propKey, defaultStateValues);\n}\n\nfunction getInitialState$2(props) {\n  var selectedItem = getInitialValue$1(props, 'selectedItem');\n  var isOpen = getInitialValue$1(props, 'isOpen');\n  var highlightedIndex = getInitialValue$1(props, 'highlightedIndex');\n  var inputValue = getInitialValue$1(props, 'inputValue');\n  return {\n    highlightedIndex: highlightedIndex < 0 && selectedItem && isOpen ? props.items.indexOf(selectedItem) : highlightedIndex,\n    isOpen: isOpen,\n    selectedItem: selectedItem,\n    inputValue: inputValue\n  };\n}\n\nfunction getHighlightedIndexOnOpen(props, state, offset, getItemNodeFromIndex) {\n  var items = props.items,\n      initialHighlightedIndex = props.initialHighlightedIndex,\n      defaultHighlightedIndex = props.defaultHighlightedIndex;\n  var selectedItem = state.selectedItem,\n      highlightedIndex = state.highlightedIndex;\n\n  if (items.length === 0) {\n    return -1;\n  } // initialHighlightedIndex will give value to highlightedIndex on initial state only.\n\n\n  if (initialHighlightedIndex !== undefined && highlightedIndex === initialHighlightedIndex) {\n    return initialHighlightedIndex;\n  }\n\n  if (defaultHighlightedIndex !== undefined) {\n    return defaultHighlightedIndex;\n  }\n\n  if (selectedItem) {\n    if (offset === 0) {\n      return items.indexOf(selectedItem);\n    }\n\n    return getNextWrappingIndex(offset, items.indexOf(selectedItem), items.length, getItemNodeFromIndex, false);\n  }\n\n  if (offset === 0) {\n    return -1;\n  }\n\n  return offset < 0 ? items.length - 1 : 0;\n}\n/**\n * Reuse the movement tracking of mouse and touch events.\n *\n * @param {boolean} isOpen Whether the dropdown is open or not.\n * @param {Array<Object>} downshiftElementRefs Downshift element refs to track movement (toggleButton, menu etc.)\n * @param {Object} environment Environment where component/hook exists.\n * @param {Function} handleBlur Handler on blur from mouse or touch.\n * @returns {Object} Ref containing whether mouseDown or touchMove event is happening\n */\n\n\nfunction useMouseAndTouchTracker(isOpen, downshiftElementRefs, environment, handleBlur) {\n  var mouseAndTouchTrackersRef = useRef({\n    isMouseDown: false,\n    isTouchMove: false\n  });\n  useEffect(function () {\n    // The same strategy for checking if a click occurred inside or outside downsift\n    // as in downshift.js.\n    var onMouseDown = function onMouseDown() {\n      mouseAndTouchTrackersRef.current.isMouseDown = true;\n    };\n\n    var onMouseUp = function onMouseUp(event) {\n      mouseAndTouchTrackersRef.current.isMouseDown = false;\n\n      if (isOpen && !targetWithinDownshift(event.target, downshiftElementRefs.map(function (ref) {\n        return ref.current;\n      }), environment)) {\n        handleBlur();\n      }\n    };\n\n    var onTouchStart = function onTouchStart() {\n      mouseAndTouchTrackersRef.current.isTouchMove = false;\n    };\n\n    var onTouchMove = function onTouchMove() {\n      mouseAndTouchTrackersRef.current.isTouchMove = true;\n    };\n\n    var onTouchEnd = function onTouchEnd(event) {\n      if (isOpen && !mouseAndTouchTrackersRef.current.isTouchMove && !targetWithinDownshift(event.target, downshiftElementRefs.map(function (ref) {\n        return ref.current;\n      }), environment, false)) {\n        handleBlur();\n      }\n    };\n\n    environment.addEventListener('mousedown', onMouseDown);\n    environment.addEventListener('mouseup', onMouseUp);\n    environment.addEventListener('touchstart', onTouchStart);\n    environment.addEventListener('touchmove', onTouchMove);\n    environment.addEventListener('touchend', onTouchEnd);\n    return function cleanup() {\n      environment.removeEventListener('mousedown', onMouseDown);\n      environment.removeEventListener('mouseup', onMouseUp);\n      environment.removeEventListener('touchstart', onTouchStart);\n      environment.removeEventListener('touchmove', onTouchMove);\n      environment.removeEventListener('touchend', onTouchEnd);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen, environment]);\n  return mouseAndTouchTrackersRef;\n}\n/* istanbul ignore next */\n// eslint-disable-next-line import/no-mutable-exports\n\n\nvar useGetterPropsCalledChecker = function useGetterPropsCalledChecker() {\n  return noop;\n};\n/**\n * Custom hook that checks if getter props are called correctly.\n *\n * @param  {...any} propKeys Getter prop names to be handled.\n * @returns {Function} Setter function called inside getter props to set call information.\n */\n\n/* istanbul ignore next */\n\n\nif (process.env.NODE_ENV !== 'production') {\n  useGetterPropsCalledChecker = function useGetterPropsCalledChecker() {\n    var isInitialMountRef = useRef(true);\n\n    for (var _len = arguments.length, propKeys = new Array(_len), _key = 0; _key < _len; _key++) {\n      propKeys[_key] = arguments[_key];\n    }\n\n    var getterPropsCalledRef = useRef(propKeys.reduce(function (acc, propKey) {\n      acc[propKey] = {};\n      return acc;\n    }, {}));\n    useEffect(function () {\n      Object.keys(getterPropsCalledRef.current).forEach(function (propKey) {\n        var propCallInfo = getterPropsCalledRef.current[propKey];\n\n        if (isInitialMountRef.current) {\n          if (!Object.keys(propCallInfo).length) {\n            // eslint-disable-next-line no-console\n            console.error(\"downshift: You forgot to call the \" + propKey + \" getter function on your component / element.\");\n            return;\n          }\n        }\n\n        var suppressRefError = propCallInfo.suppressRefError,\n            refKey = propCallInfo.refKey,\n            elementRef = propCallInfo.elementRef;\n\n        if ((!elementRef || !elementRef.current) && !suppressRefError) {\n          // eslint-disable-next-line no-console\n          console.error(\"downshift: The ref prop \\\"\" + refKey + \"\\\" from \" + propKey + \" was not applied correctly on your element.\");\n        }\n      });\n      isInitialMountRef.current = false;\n    });\n    var setGetterPropCallInfo = useCallback(function (propKey, suppressRefError, refKey, elementRef) {\n      getterPropsCalledRef.current[propKey] = {\n        suppressRefError: suppressRefError,\n        refKey: refKey,\n        elementRef: elementRef\n      };\n    }, []);\n    return setGetterPropCallInfo;\n  };\n}\n\nfunction useA11yMessageSetter(getA11yMessage, dependencyArray, _ref2) {\n  var isInitialMount = _ref2.isInitialMount,\n      highlightedIndex = _ref2.highlightedIndex,\n      items = _ref2.items,\n      environment = _ref2.environment,\n      rest = _objectWithoutPropertiesLoose(_ref2, _excluded$3);\n\n  // Sets a11y status message on changes in state.\n  useEffect(function () {\n    if (isInitialMount || false) {\n      return;\n    }\n\n    updateA11yStatus(function () {\n      return getA11yMessage(_extends({\n        highlightedIndex: highlightedIndex,\n        highlightedItem: items[highlightedIndex],\n        resultCount: items.length\n      }, rest));\n    }, environment.document); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, dependencyArray);\n}\n\nfunction useScrollIntoView(_ref3) {\n  var highlightedIndex = _ref3.highlightedIndex,\n      isOpen = _ref3.isOpen,\n      itemRefs = _ref3.itemRefs,\n      getItemNodeFromIndex = _ref3.getItemNodeFromIndex,\n      menuElement = _ref3.menuElement,\n      scrollIntoViewProp = _ref3.scrollIntoView;\n  // used not to scroll on highlight by mouse.\n  var shouldScrollRef = useRef(true); // Scroll on highlighted item if change comes from keyboard.\n\n  useIsomorphicLayoutEffect(function () {\n    if (highlightedIndex < 0 || !isOpen || !Object.keys(itemRefs.current).length) {\n      return;\n    }\n\n    if (shouldScrollRef.current === false) {\n      shouldScrollRef.current = true;\n    } else {\n      scrollIntoViewProp(getItemNodeFromIndex(highlightedIndex), menuElement);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [highlightedIndex]);\n  return shouldScrollRef;\n} // eslint-disable-next-line import/no-mutable-exports\n\n\nvar useControlPropsValidator = noop;\n/* istanbul ignore next */\n\nif (process.env.NODE_ENV !== 'production') {\n  useControlPropsValidator = function useControlPropsValidator(_ref4) {\n    var isInitialMount = _ref4.isInitialMount,\n        props = _ref4.props,\n        state = _ref4.state;\n    // used for checking when props are moving from controlled to uncontrolled.\n    var prevPropsRef = useRef(props);\n    useEffect(function () {\n      if (isInitialMount) {\n        return;\n      }\n\n      validateControlledUnchanged(state, prevPropsRef.current, props);\n      prevPropsRef.current = props;\n    }, [state, props, isInitialMount]);\n  };\n}\n\n/* eslint-disable complexity */\n\nfunction downshiftCommonReducer(state, action, stateChangeTypes) {\n  var type = action.type,\n      props = action.props;\n  var changes;\n\n  switch (type) {\n    case stateChangeTypes.ItemMouseMove:\n      changes = {\n        highlightedIndex: action.index\n      };\n      break;\n\n    case stateChangeTypes.MenuMouseLeave:\n      changes = {\n        highlightedIndex: -1\n      };\n      break;\n\n    case stateChangeTypes.ToggleButtonClick:\n    case stateChangeTypes.FunctionToggleMenu:\n      changes = {\n        isOpen: !state.isOpen,\n        highlightedIndex: state.isOpen ? -1 : getHighlightedIndexOnOpen(props, state, 0)\n      };\n      break;\n\n    case stateChangeTypes.FunctionOpenMenu:\n      changes = {\n        isOpen: true,\n        highlightedIndex: getHighlightedIndexOnOpen(props, state, 0)\n      };\n      break;\n\n    case stateChangeTypes.FunctionCloseMenu:\n      changes = {\n        isOpen: false\n      };\n      break;\n\n    case stateChangeTypes.FunctionSetHighlightedIndex:\n      changes = {\n        highlightedIndex: action.highlightedIndex\n      };\n      break;\n\n    case stateChangeTypes.FunctionSetInputValue:\n      changes = {\n        inputValue: action.inputValue\n      };\n      break;\n\n    case stateChangeTypes.FunctionReset:\n      changes = {\n        highlightedIndex: getDefaultValue$1(props, 'highlightedIndex'),\n        isOpen: getDefaultValue$1(props, 'isOpen'),\n        selectedItem: getDefaultValue$1(props, 'selectedItem'),\n        inputValue: getDefaultValue$1(props, 'inputValue')\n      };\n      break;\n\n    default:\n      throw new Error('Reducer called without proper action type.');\n  }\n\n  return _extends({}, state, changes);\n}\n/* eslint-enable complexity */\n\nfunction getItemIndexByCharacterKey(_a) {\n    var keysSoFar = _a.keysSoFar, highlightedIndex = _a.highlightedIndex, items = _a.items, itemToString = _a.itemToString, getItemNodeFromIndex = _a.getItemNodeFromIndex;\n    var lowerCasedKeysSoFar = keysSoFar.toLowerCase();\n    for (var index = 0; index < items.length; index++) {\n        var offsetIndex = (index + highlightedIndex + 1) % items.length;\n        var item = items[offsetIndex];\n        if (item !== undefined &&\n            itemToString(item)\n                .toLowerCase()\n                .startsWith(lowerCasedKeysSoFar)) {\n            var element = getItemNodeFromIndex(offsetIndex);\n            if (!(element === null || element === void 0 ? void 0 : element.hasAttribute('disabled'))) {\n                return offsetIndex;\n            }\n        }\n    }\n    return highlightedIndex;\n}\nvar propTypes$2 = {\n    items: PropTypes.array.isRequired,\n    itemToString: PropTypes.func,\n    getA11yStatusMessage: PropTypes.func,\n    getA11ySelectionMessage: PropTypes.func,\n    circularNavigation: PropTypes.bool,\n    highlightedIndex: PropTypes.number,\n    defaultHighlightedIndex: PropTypes.number,\n    initialHighlightedIndex: PropTypes.number,\n    isOpen: PropTypes.bool,\n    defaultIsOpen: PropTypes.bool,\n    initialIsOpen: PropTypes.bool,\n    selectedItem: PropTypes.any,\n    initialSelectedItem: PropTypes.any,\n    defaultSelectedItem: PropTypes.any,\n    id: PropTypes.string,\n    labelId: PropTypes.string,\n    menuId: PropTypes.string,\n    getItemId: PropTypes.func,\n    toggleButtonId: PropTypes.string,\n    stateReducer: PropTypes.func,\n    onSelectedItemChange: PropTypes.func,\n    onHighlightedIndexChange: PropTypes.func,\n    onStateChange: PropTypes.func,\n    onIsOpenChange: PropTypes.func,\n    environment: PropTypes.shape({\n        addEventListener: PropTypes.func,\n        removeEventListener: PropTypes.func,\n        document: PropTypes.shape({\n            getElementById: PropTypes.func,\n            activeElement: PropTypes.any,\n            body: PropTypes.any\n        })\n    })\n};\n/**\n * Default implementation for status message. Only added when menu is open.\n * Will specift if there are results in the list, and if so, how many,\n * and what keys are relevant.\n *\n * @param {Object} param the downshift state and other relevant properties\n * @return {String} the a11y status message\n */\nfunction getA11yStatusMessage(_a) {\n    var isOpen = _a.isOpen, resultCount = _a.resultCount, previousResultCount = _a.previousResultCount;\n    if (!isOpen) {\n        return '';\n    }\n    if (!resultCount) {\n        return 'No results are available.';\n    }\n    if (resultCount !== previousResultCount) {\n        return resultCount + \" result\" + (resultCount === 1 ? ' is' : 's are') + \" available, use up and down arrow keys to navigate. Press Enter or Space Bar keys to select.\";\n    }\n    return '';\n}\nvar defaultProps$2 = __assign(__assign({}, defaultProps$3), { getA11yStatusMessage: getA11yStatusMessage });\n// eslint-disable-next-line import/no-mutable-exports\nvar validatePropTypes$2 = noop;\n/* istanbul ignore next */\nif (process.env.NODE_ENV !== 'production') {\n    validatePropTypes$2 = function (options, caller) {\n        PropTypes.checkPropTypes(propTypes$2, options, 'prop', caller.name);\n    };\n}\n\nvar MenuKeyDownArrowDown = process.env.NODE_ENV !== \"production\" ? '__menu_keydown_arrow_down__' : 0;\nvar MenuKeyDownArrowUp = process.env.NODE_ENV !== \"production\" ? '__menu_keydown_arrow_up__' : 1;\nvar MenuKeyDownEscape = process.env.NODE_ENV !== \"production\" ? '__menu_keydown_escape__' : 2;\nvar MenuKeyDownHome = process.env.NODE_ENV !== \"production\" ? '__menu_keydown_home__' : 3;\nvar MenuKeyDownEnd = process.env.NODE_ENV !== \"production\" ? '__menu_keydown_end__' : 4;\nvar MenuKeyDownEnter = process.env.NODE_ENV !== \"production\" ? '__menu_keydown_enter__' : 5;\nvar MenuKeyDownSpaceButton = process.env.NODE_ENV !== \"production\" ? '__menu_keydown_space_button__' : 6;\nvar MenuKeyDownCharacter = process.env.NODE_ENV !== \"production\" ? '__menu_keydown_character__' : 7;\nvar MenuBlur = process.env.NODE_ENV !== \"production\" ? '__menu_blur__' : 8;\nvar MenuMouseLeave$1 = process.env.NODE_ENV !== \"production\" ? '__menu_mouse_leave__' : 9;\nvar ItemMouseMove$1 = process.env.NODE_ENV !== \"production\" ? '__item_mouse_move__' : 10;\nvar ItemClick$1 = process.env.NODE_ENV !== \"production\" ? '__item_click__' : 11;\nvar ToggleButtonClick$1 = process.env.NODE_ENV !== \"production\" ? '__togglebutton_click__' : 12;\nvar ToggleButtonKeyDownArrowDown = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_arrow_down__' : 13;\nvar ToggleButtonKeyDownArrowUp = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_arrow_up__' : 14;\nvar ToggleButtonKeyDownCharacter = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_character__' : 15;\nvar FunctionToggleMenu$1 = process.env.NODE_ENV !== \"production\" ? '__function_toggle_menu__' : 16;\nvar FunctionOpenMenu$1 = process.env.NODE_ENV !== \"production\" ? '__function_open_menu__' : 17;\nvar FunctionCloseMenu$1 = process.env.NODE_ENV !== \"production\" ? '__function_close_menu__' : 18;\nvar FunctionSetHighlightedIndex$1 = process.env.NODE_ENV !== \"production\" ? '__function_set_highlighted_index__' : 19;\nvar FunctionSelectItem$1 = process.env.NODE_ENV !== \"production\" ? '__function_select_item__' : 20;\nvar FunctionSetInputValue$1 = process.env.NODE_ENV !== \"production\" ? '__function_set_input_value__' : 21;\nvar FunctionReset$2 = process.env.NODE_ENV !== \"production\" ? '__function_reset__' : 22;\n\nvar stateChangeTypes$2 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  MenuKeyDownArrowDown: MenuKeyDownArrowDown,\n  MenuKeyDownArrowUp: MenuKeyDownArrowUp,\n  MenuKeyDownEscape: MenuKeyDownEscape,\n  MenuKeyDownHome: MenuKeyDownHome,\n  MenuKeyDownEnd: MenuKeyDownEnd,\n  MenuKeyDownEnter: MenuKeyDownEnter,\n  MenuKeyDownSpaceButton: MenuKeyDownSpaceButton,\n  MenuKeyDownCharacter: MenuKeyDownCharacter,\n  MenuBlur: MenuBlur,\n  MenuMouseLeave: MenuMouseLeave$1,\n  ItemMouseMove: ItemMouseMove$1,\n  ItemClick: ItemClick$1,\n  ToggleButtonClick: ToggleButtonClick$1,\n  ToggleButtonKeyDownArrowDown: ToggleButtonKeyDownArrowDown,\n  ToggleButtonKeyDownArrowUp: ToggleButtonKeyDownArrowUp,\n  ToggleButtonKeyDownCharacter: ToggleButtonKeyDownCharacter,\n  FunctionToggleMenu: FunctionToggleMenu$1,\n  FunctionOpenMenu: FunctionOpenMenu$1,\n  FunctionCloseMenu: FunctionCloseMenu$1,\n  FunctionSetHighlightedIndex: FunctionSetHighlightedIndex$1,\n  FunctionSelectItem: FunctionSelectItem$1,\n  FunctionSetInputValue: FunctionSetInputValue$1,\n  FunctionReset: FunctionReset$2\n});\n\n/* eslint-disable complexity */\n\nfunction downshiftSelectReducer(state, action) {\n  var type = action.type,\n      props = action.props,\n      shiftKey = action.shiftKey;\n  var changes;\n\n  switch (type) {\n    case ItemClick$1:\n      changes = {\n        isOpen: getDefaultValue$1(props, 'isOpen'),\n        highlightedIndex: getDefaultValue$1(props, 'highlightedIndex'),\n        selectedItem: props.items[action.index]\n      };\n      break;\n\n    case ToggleButtonKeyDownCharacter:\n      {\n        var lowercasedKey = action.key;\n        var inputValue = \"\" + state.inputValue + lowercasedKey;\n        var itemIndex = getItemIndexByCharacterKey({\n          keysSoFar: inputValue,\n          highlightedIndex: state.selectedItem ? props.items.indexOf(state.selectedItem) : -1,\n          items: props.items,\n          itemToString: props.itemToString,\n          getItemNodeFromIndex: action.getItemNodeFromIndex\n        });\n        changes = _extends({\n          inputValue: inputValue\n        }, itemIndex >= 0 && {\n          selectedItem: props.items[itemIndex]\n        });\n      }\n      break;\n\n    case ToggleButtonKeyDownArrowDown:\n      changes = {\n        highlightedIndex: getHighlightedIndexOnOpen(props, state, 1, action.getItemNodeFromIndex),\n        isOpen: true\n      };\n      break;\n\n    case ToggleButtonKeyDownArrowUp:\n      changes = {\n        highlightedIndex: getHighlightedIndexOnOpen(props, state, -1, action.getItemNodeFromIndex),\n        isOpen: true\n      };\n      break;\n\n    case MenuKeyDownEnter:\n    case MenuKeyDownSpaceButton:\n      changes = _extends({\n        isOpen: getDefaultValue$1(props, 'isOpen'),\n        highlightedIndex: getDefaultValue$1(props, 'highlightedIndex')\n      }, state.highlightedIndex >= 0 && {\n        selectedItem: props.items[state.highlightedIndex]\n      });\n      break;\n\n    case MenuKeyDownHome:\n      changes = {\n        highlightedIndex: getNextNonDisabledIndex(1, 0, props.items.length, action.getItemNodeFromIndex, false)\n      };\n      break;\n\n    case MenuKeyDownEnd:\n      changes = {\n        highlightedIndex: getNextNonDisabledIndex(-1, props.items.length - 1, props.items.length, action.getItemNodeFromIndex, false)\n      };\n      break;\n\n    case MenuKeyDownEscape:\n      changes = {\n        isOpen: false,\n        highlightedIndex: -1\n      };\n      break;\n\n    case MenuBlur:\n      changes = {\n        isOpen: false,\n        highlightedIndex: -1\n      };\n      break;\n\n    case MenuKeyDownCharacter:\n      {\n        var _lowercasedKey = action.key;\n\n        var _inputValue = \"\" + state.inputValue + _lowercasedKey;\n\n        var highlightedIndex = getItemIndexByCharacterKey({\n          keysSoFar: _inputValue,\n          highlightedIndex: state.highlightedIndex,\n          items: props.items,\n          itemToString: props.itemToString,\n          getItemNodeFromIndex: action.getItemNodeFromIndex\n        });\n        changes = _extends({\n          inputValue: _inputValue\n        }, highlightedIndex >= 0 && {\n          highlightedIndex: highlightedIndex\n        });\n      }\n      break;\n\n    case MenuKeyDownArrowDown:\n      changes = {\n        highlightedIndex: getNextWrappingIndex(shiftKey ? 5 : 1, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, props.circularNavigation)\n      };\n      break;\n\n    case MenuKeyDownArrowUp:\n      changes = {\n        highlightedIndex: getNextWrappingIndex(shiftKey ? -5 : -1, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, props.circularNavigation)\n      };\n      break;\n\n    case FunctionSelectItem$1:\n      changes = {\n        selectedItem: action.selectedItem\n      };\n      break;\n\n    default:\n      return downshiftCommonReducer(state, action, stateChangeTypes$2);\n  }\n\n  return _extends({}, state, changes);\n}\n/* eslint-enable complexity */\n\nvar _excluded$2 = [\"onMouseLeave\", \"refKey\", \"onKeyDown\", \"onBlur\", \"ref\"],\n    _excluded2$2 = [\"onClick\", \"onKeyDown\", \"refKey\", \"ref\"],\n    _excluded3$1 = [\"item\", \"index\", \"onMouseMove\", \"onClick\", \"refKey\", \"ref\"];\nuseSelect.stateChangeTypes = stateChangeTypes$2;\n\nfunction useSelect(userProps) {\n  if (userProps === void 0) {\n    userProps = {};\n  }\n\n  validatePropTypes$2(userProps, useSelect); // Props defaults and destructuring.\n\n  var props = _extends({}, defaultProps$2, userProps);\n\n  var items = props.items,\n      scrollIntoView = props.scrollIntoView,\n      environment = props.environment,\n      initialIsOpen = props.initialIsOpen,\n      defaultIsOpen = props.defaultIsOpen,\n      itemToString = props.itemToString,\n      getA11ySelectionMessage = props.getA11ySelectionMessage,\n      getA11yStatusMessage = props.getA11yStatusMessage; // Initial state depending on controlled props.\n\n  var initialState = getInitialState$2(props);\n\n  var _useControlledReducer = useControlledReducer$1(downshiftSelectReducer, initialState, props),\n      state = _useControlledReducer[0],\n      dispatch = _useControlledReducer[1];\n\n  var isOpen = state.isOpen,\n      highlightedIndex = state.highlightedIndex,\n      selectedItem = state.selectedItem,\n      inputValue = state.inputValue; // Element efs.\n\n  var toggleButtonRef = useRef(null);\n  var menuRef = useRef(null);\n  var itemRefs = useRef({}); // used not to trigger menu blur action in some scenarios.\n\n  var shouldBlurRef = useRef(true); // used to keep the inputValue clearTimeout object between renders.\n\n  var clearTimeoutRef = useRef(null); // prevent id re-generation between renders.\n\n  var elementIds = useElementIds(props); // used to keep track of how many items we had on previous cycle.\n\n  var previousResultCountRef = useRef();\n  var isInitialMountRef = useRef(true); // utility callback to get item element.\n\n  var latest = useLatestRef({\n    state: state,\n    props: props\n  }); // Some utils.\n\n  var getItemNodeFromIndex = useCallback(function (index) {\n    return itemRefs.current[elementIds.getItemId(index)];\n  }, [elementIds]); // Effects.\n  // Sets a11y status message on changes in state.\n\n  useA11yMessageSetter(getA11yStatusMessage, [isOpen, highlightedIndex, inputValue, items], _extends({\n    isInitialMount: isInitialMountRef.current,\n    previousResultCount: previousResultCountRef.current,\n    items: items,\n    environment: environment,\n    itemToString: itemToString\n  }, state)); // Sets a11y status message on changes in selectedItem.\n\n  useA11yMessageSetter(getA11ySelectionMessage, [selectedItem], _extends({\n    isInitialMount: isInitialMountRef.current,\n    previousResultCount: previousResultCountRef.current,\n    items: items,\n    environment: environment,\n    itemToString: itemToString\n  }, state)); // Scroll on highlighted item if change comes from keyboard.\n\n  var shouldScrollRef = useScrollIntoView({\n    menuElement: menuRef.current,\n    highlightedIndex: highlightedIndex,\n    isOpen: isOpen,\n    itemRefs: itemRefs,\n    scrollIntoView: scrollIntoView,\n    getItemNodeFromIndex: getItemNodeFromIndex\n  }); // Sets cleanup for the keysSoFar callback, debounded after 500ms.\n\n  useEffect(function () {\n    // init the clean function here as we need access to dispatch.\n    clearTimeoutRef.current = debounce(function (outerDispatch) {\n      outerDispatch({\n        type: FunctionSetInputValue$1,\n        inputValue: ''\n      });\n    }, 500); // Cancel any pending debounced calls on mount\n\n    return function () {\n      clearTimeoutRef.current.cancel();\n    };\n  }, []); // Invokes the keysSoFar callback set up above.\n\n  useEffect(function () {\n    if (!inputValue) {\n      return;\n    }\n\n    clearTimeoutRef.current(dispatch);\n  }, [dispatch, inputValue]);\n  useControlPropsValidator({\n    isInitialMount: isInitialMountRef.current,\n    props: props,\n    state: state\n  });\n  /* Controls the focus on the menu or the toggle button. */\n\n  useEffect(function () {\n    // Don't focus menu on first render.\n    if (isInitialMountRef.current) {\n      // Unless it was initialised as open.\n      if ((initialIsOpen || defaultIsOpen || isOpen) && menuRef.current) {\n        menuRef.current.focus();\n      }\n\n      return;\n    } // Focus menu on open.\n\n\n    if (isOpen) {\n      // istanbul ignore else\n      if (menuRef.current) {\n        menuRef.current.focus();\n      }\n\n      return;\n    } // Focus toggleButton on close, but not if it was closed with (Shift+)Tab.\n\n\n    if (environment.document.activeElement === menuRef.current) {\n      // istanbul ignore else\n      if (toggleButtonRef.current) {\n        shouldBlurRef.current = false;\n        toggleButtonRef.current.focus();\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [isOpen]);\n  useEffect(function () {\n    if (isInitialMountRef.current) {\n      return;\n    }\n\n    previousResultCountRef.current = items.length;\n  }); // Add mouse/touch events to document.\n\n  var mouseAndTouchTrackersRef = useMouseAndTouchTracker(isOpen, [menuRef, toggleButtonRef], environment, function () {\n    dispatch({\n      type: MenuBlur\n    });\n  });\n  var setGetterPropCallInfo = useGetterPropsCalledChecker('getMenuProps', 'getToggleButtonProps'); // Make initial ref false.\n\n  useEffect(function () {\n    isInitialMountRef.current = false;\n  }, []); // Reset itemRefs on close.\n\n  useEffect(function () {\n    if (!isOpen) {\n      itemRefs.current = {};\n    }\n  }, [isOpen]); // Event handler functions.\n\n  var toggleButtonKeyDownHandlers = useMemo(function () {\n    return {\n      ArrowDown: function ArrowDown(event) {\n        event.preventDefault();\n        dispatch({\n          type: ToggleButtonKeyDownArrowDown,\n          getItemNodeFromIndex: getItemNodeFromIndex,\n          shiftKey: event.shiftKey\n        });\n      },\n      ArrowUp: function ArrowUp(event) {\n        event.preventDefault();\n        dispatch({\n          type: ToggleButtonKeyDownArrowUp,\n          getItemNodeFromIndex: getItemNodeFromIndex,\n          shiftKey: event.shiftKey\n        });\n      }\n    };\n  }, [dispatch, getItemNodeFromIndex]);\n  var menuKeyDownHandlers = useMemo(function () {\n    return {\n      ArrowDown: function ArrowDown(event) {\n        event.preventDefault();\n        dispatch({\n          type: MenuKeyDownArrowDown,\n          getItemNodeFromIndex: getItemNodeFromIndex,\n          shiftKey: event.shiftKey\n        });\n      },\n      ArrowUp: function ArrowUp(event) {\n        event.preventDefault();\n        dispatch({\n          type: MenuKeyDownArrowUp,\n          getItemNodeFromIndex: getItemNodeFromIndex,\n          shiftKey: event.shiftKey\n        });\n      },\n      Home: function Home(event) {\n        event.preventDefault();\n        dispatch({\n          type: MenuKeyDownHome,\n          getItemNodeFromIndex: getItemNodeFromIndex\n        });\n      },\n      End: function End(event) {\n        event.preventDefault();\n        dispatch({\n          type: MenuKeyDownEnd,\n          getItemNodeFromIndex: getItemNodeFromIndex\n        });\n      },\n      Escape: function Escape() {\n        dispatch({\n          type: MenuKeyDownEscape\n        });\n      },\n      Enter: function Enter(event) {\n        event.preventDefault();\n        dispatch({\n          type: MenuKeyDownEnter\n        });\n      },\n      ' ': function _(event) {\n        event.preventDefault();\n        dispatch({\n          type: MenuKeyDownSpaceButton\n        });\n      }\n    };\n  }, [dispatch, getItemNodeFromIndex]); // Action functions.\n\n  var toggleMenu = useCallback(function () {\n    dispatch({\n      type: FunctionToggleMenu$1\n    });\n  }, [dispatch]);\n  var closeMenu = useCallback(function () {\n    dispatch({\n      type: FunctionCloseMenu$1\n    });\n  }, [dispatch]);\n  var openMenu = useCallback(function () {\n    dispatch({\n      type: FunctionOpenMenu$1\n    });\n  }, [dispatch]);\n  var setHighlightedIndex = useCallback(function (newHighlightedIndex) {\n    dispatch({\n      type: FunctionSetHighlightedIndex$1,\n      highlightedIndex: newHighlightedIndex\n    });\n  }, [dispatch]);\n  var selectItem = useCallback(function (newSelectedItem) {\n    dispatch({\n      type: FunctionSelectItem$1,\n      selectedItem: newSelectedItem\n    });\n  }, [dispatch]);\n  var reset = useCallback(function () {\n    dispatch({\n      type: FunctionReset$2\n    });\n  }, [dispatch]);\n  var setInputValue = useCallback(function (newInputValue) {\n    dispatch({\n      type: FunctionSetInputValue$1,\n      inputValue: newInputValue\n    });\n  }, [dispatch]); // Getter functions.\n\n  var getLabelProps = useCallback(function (labelProps) {\n    return _extends({\n      id: elementIds.labelId,\n      htmlFor: elementIds.toggleButtonId\n    }, labelProps);\n  }, [elementIds]);\n  var getMenuProps = useCallback(function (_temp, _temp2) {\n    var _extends2;\n\n    var _ref = _temp === void 0 ? {} : _temp,\n        onMouseLeave = _ref.onMouseLeave,\n        _ref$refKey = _ref.refKey,\n        refKey = _ref$refKey === void 0 ? 'ref' : _ref$refKey,\n        onKeyDown = _ref.onKeyDown,\n        onBlur = _ref.onBlur,\n        ref = _ref.ref,\n        rest = _objectWithoutPropertiesLoose(_ref, _excluded$2);\n\n    var _ref2 = _temp2 === void 0 ? {} : _temp2,\n        _ref2$suppressRefErro = _ref2.suppressRefError,\n        suppressRefError = _ref2$suppressRefErro === void 0 ? false : _ref2$suppressRefErro;\n\n    var latestState = latest.current.state;\n\n    var menuHandleKeyDown = function menuHandleKeyDown(event) {\n      var key = normalizeArrowKey(event);\n\n      if (key && menuKeyDownHandlers[key]) {\n        menuKeyDownHandlers[key](event);\n      } else if (isAcceptedCharacterKey(key)) {\n        dispatch({\n          type: MenuKeyDownCharacter,\n          key: key,\n          getItemNodeFromIndex: getItemNodeFromIndex\n        });\n      }\n    };\n\n    var menuHandleBlur = function menuHandleBlur() {\n      // if the blur was a result of selection, we don't trigger this action.\n      if (shouldBlurRef.current === false) {\n        shouldBlurRef.current = true;\n        return;\n      }\n\n      var shouldBlur = !mouseAndTouchTrackersRef.current.isMouseDown;\n      /* istanbul ignore else */\n\n      if (shouldBlur) {\n        dispatch({\n          type: MenuBlur\n        });\n      }\n    };\n\n    var menuHandleMouseLeave = function menuHandleMouseLeave() {\n      dispatch({\n        type: MenuMouseLeave$1\n      });\n    };\n\n    setGetterPropCallInfo('getMenuProps', suppressRefError, refKey, menuRef);\n    return _extends((_extends2 = {}, _extends2[refKey] = handleRefs(ref, function (menuNode) {\n      menuRef.current = menuNode;\n    }), _extends2.id = elementIds.menuId, _extends2.role = 'listbox', _extends2['aria-labelledby'] = elementIds.labelId, _extends2.tabIndex = -1, _extends2), latestState.isOpen && latestState.highlightedIndex > -1 && {\n      'aria-activedescendant': elementIds.getItemId(latestState.highlightedIndex)\n    }, {\n      onMouseLeave: callAllEventHandlers(onMouseLeave, menuHandleMouseLeave),\n      onKeyDown: callAllEventHandlers(onKeyDown, menuHandleKeyDown),\n      onBlur: callAllEventHandlers(onBlur, menuHandleBlur)\n    }, rest);\n  }, [dispatch, latest, menuKeyDownHandlers, mouseAndTouchTrackersRef, setGetterPropCallInfo, elementIds, getItemNodeFromIndex]);\n  var getToggleButtonProps = useCallback(function (_temp3, _temp4) {\n    var _extends3;\n\n    var _ref3 = _temp3 === void 0 ? {} : _temp3,\n        onClick = _ref3.onClick,\n        onKeyDown = _ref3.onKeyDown,\n        _ref3$refKey = _ref3.refKey,\n        refKey = _ref3$refKey === void 0 ? 'ref' : _ref3$refKey,\n        ref = _ref3.ref,\n        rest = _objectWithoutPropertiesLoose(_ref3, _excluded2$2);\n\n    var _ref4 = _temp4 === void 0 ? {} : _temp4,\n        _ref4$suppressRefErro = _ref4.suppressRefError,\n        suppressRefError = _ref4$suppressRefErro === void 0 ? false : _ref4$suppressRefErro;\n\n    var toggleButtonHandleClick = function toggleButtonHandleClick() {\n      dispatch({\n        type: ToggleButtonClick$1\n      });\n    };\n\n    var toggleButtonHandleKeyDown = function toggleButtonHandleKeyDown(event) {\n      var key = normalizeArrowKey(event);\n\n      if (key && toggleButtonKeyDownHandlers[key]) {\n        toggleButtonKeyDownHandlers[key](event);\n      } else if (isAcceptedCharacterKey(key)) {\n        dispatch({\n          type: ToggleButtonKeyDownCharacter,\n          key: key,\n          getItemNodeFromIndex: getItemNodeFromIndex\n        });\n      }\n    };\n\n    var toggleProps = _extends((_extends3 = {}, _extends3[refKey] = handleRefs(ref, function (toggleButtonNode) {\n      toggleButtonRef.current = toggleButtonNode;\n    }), _extends3.id = elementIds.toggleButtonId, _extends3['aria-haspopup'] = 'listbox', _extends3['aria-expanded'] = latest.current.state.isOpen, _extends3['aria-labelledby'] = elementIds.labelId + \" \" + elementIds.toggleButtonId, _extends3), rest);\n\n    if (!rest.disabled) {\n      toggleProps.onClick = callAllEventHandlers(onClick, toggleButtonHandleClick);\n      toggleProps.onKeyDown = callAllEventHandlers(onKeyDown, toggleButtonHandleKeyDown);\n    }\n\n    setGetterPropCallInfo('getToggleButtonProps', suppressRefError, refKey, toggleButtonRef);\n    return toggleProps;\n  }, [dispatch, latest, toggleButtonKeyDownHandlers, setGetterPropCallInfo, elementIds, getItemNodeFromIndex]);\n  var getItemProps = useCallback(function (_temp5) {\n    var _extends4;\n\n    var _ref5 = _temp5 === void 0 ? {} : _temp5,\n        item = _ref5.item,\n        index = _ref5.index,\n        onMouseMove = _ref5.onMouseMove,\n        onClick = _ref5.onClick,\n        _ref5$refKey = _ref5.refKey,\n        refKey = _ref5$refKey === void 0 ? 'ref' : _ref5$refKey,\n        ref = _ref5.ref,\n        rest = _objectWithoutPropertiesLoose(_ref5, _excluded3$1);\n\n    var _latest$current = latest.current,\n        latestState = _latest$current.state,\n        latestProps = _latest$current.props;\n\n    var itemHandleMouseMove = function itemHandleMouseMove() {\n      if (index === latestState.highlightedIndex) {\n        return;\n      }\n\n      shouldScrollRef.current = false;\n      dispatch({\n        type: ItemMouseMove$1,\n        index: index\n      });\n    };\n\n    var itemHandleClick = function itemHandleClick() {\n      dispatch({\n        type: ItemClick$1,\n        index: index\n      });\n    };\n\n    var itemIndex = getItemIndex(index, item, latestProps.items);\n\n    if (itemIndex < 0) {\n      throw new Error('Pass either item or item index in getItemProps!');\n    }\n\n    var itemProps = _extends((_extends4 = {\n      role: 'option',\n      'aria-selected': \"\" + (itemIndex === latestState.highlightedIndex),\n      id: elementIds.getItemId(itemIndex)\n    }, _extends4[refKey] = handleRefs(ref, function (itemNode) {\n      if (itemNode) {\n        itemRefs.current[elementIds.getItemId(itemIndex)] = itemNode;\n      }\n    }), _extends4), rest);\n\n    if (!rest.disabled) {\n      itemProps.onMouseMove = callAllEventHandlers(onMouseMove, itemHandleMouseMove);\n      itemProps.onClick = callAllEventHandlers(onClick, itemHandleClick);\n    }\n\n    return itemProps;\n  }, [dispatch, latest, shouldScrollRef, elementIds]);\n  return {\n    // prop getters.\n    getToggleButtonProps: getToggleButtonProps,\n    getLabelProps: getLabelProps,\n    getMenuProps: getMenuProps,\n    getItemProps: getItemProps,\n    // actions.\n    toggleMenu: toggleMenu,\n    openMenu: openMenu,\n    closeMenu: closeMenu,\n    setHighlightedIndex: setHighlightedIndex,\n    selectItem: selectItem,\n    reset: reset,\n    setInputValue: setInputValue,\n    // state.\n    highlightedIndex: highlightedIndex,\n    isOpen: isOpen,\n    selectedItem: selectedItem,\n    inputValue: inputValue\n  };\n}\n\nvar InputKeyDownArrowDown = process.env.NODE_ENV !== \"production\" ? '__input_keydown_arrow_down__' : 0;\nvar InputKeyDownArrowUp = process.env.NODE_ENV !== \"production\" ? '__input_keydown_arrow_up__' : 1;\nvar InputKeyDownEscape = process.env.NODE_ENV !== \"production\" ? '__input_keydown_escape__' : 2;\nvar InputKeyDownHome = process.env.NODE_ENV !== \"production\" ? '__input_keydown_home__' : 3;\nvar InputKeyDownEnd = process.env.NODE_ENV !== \"production\" ? '__input_keydown_end__' : 4;\nvar InputKeyDownEnter = process.env.NODE_ENV !== \"production\" ? '__input_keydown_enter__' : 5;\nvar InputChange = process.env.NODE_ENV !== \"production\" ? '__input_change__' : 6;\nvar InputBlur = process.env.NODE_ENV !== \"production\" ? '__input_blur__' : 7;\nvar MenuMouseLeave = process.env.NODE_ENV !== \"production\" ? '__menu_mouse_leave__' : 8;\nvar ItemMouseMove = process.env.NODE_ENV !== \"production\" ? '__item_mouse_move__' : 9;\nvar ItemClick = process.env.NODE_ENV !== \"production\" ? '__item_click__' : 10;\nvar ToggleButtonClick = process.env.NODE_ENV !== \"production\" ? '__togglebutton_click__' : 11;\nvar FunctionToggleMenu = process.env.NODE_ENV !== \"production\" ? '__function_toggle_menu__' : 12;\nvar FunctionOpenMenu = process.env.NODE_ENV !== \"production\" ? '__function_open_menu__' : 13;\nvar FunctionCloseMenu = process.env.NODE_ENV !== \"production\" ? '__function_close_menu__' : 14;\nvar FunctionSetHighlightedIndex = process.env.NODE_ENV !== \"production\" ? '__function_set_highlighted_index__' : 15;\nvar FunctionSelectItem = process.env.NODE_ENV !== \"production\" ? '__function_select_item__' : 16;\nvar FunctionSetInputValue = process.env.NODE_ENV !== \"production\" ? '__function_set_input_value__' : 17;\nvar FunctionReset$1 = process.env.NODE_ENV !== \"production\" ? '__function_reset__' : 18;\nvar ControlledPropUpdatedSelectedItem = process.env.NODE_ENV !== \"production\" ? '__controlled_prop_updated_selected_item__' : 19;\n\nvar stateChangeTypes$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  InputKeyDownArrowDown: InputKeyDownArrowDown,\n  InputKeyDownArrowUp: InputKeyDownArrowUp,\n  InputKeyDownEscape: InputKeyDownEscape,\n  InputKeyDownHome: InputKeyDownHome,\n  InputKeyDownEnd: InputKeyDownEnd,\n  InputKeyDownEnter: InputKeyDownEnter,\n  InputChange: InputChange,\n  InputBlur: InputBlur,\n  MenuMouseLeave: MenuMouseLeave,\n  ItemMouseMove: ItemMouseMove,\n  ItemClick: ItemClick,\n  ToggleButtonClick: ToggleButtonClick,\n  FunctionToggleMenu: FunctionToggleMenu,\n  FunctionOpenMenu: FunctionOpenMenu,\n  FunctionCloseMenu: FunctionCloseMenu,\n  FunctionSetHighlightedIndex: FunctionSetHighlightedIndex,\n  FunctionSelectItem: FunctionSelectItem,\n  FunctionSetInputValue: FunctionSetInputValue,\n  FunctionReset: FunctionReset$1,\n  ControlledPropUpdatedSelectedItem: ControlledPropUpdatedSelectedItem\n});\n\nfunction getInitialState$1(props) {\n  var initialState = getInitialState$2(props);\n  var selectedItem = initialState.selectedItem;\n  var inputValue = initialState.inputValue;\n\n  if (inputValue === '' && selectedItem && props.defaultInputValue === undefined && props.initialInputValue === undefined && props.inputValue === undefined) {\n    inputValue = props.itemToString(selectedItem);\n  }\n\n  return _extends({}, initialState, {\n    inputValue: inputValue\n  });\n}\n\nvar propTypes$1 = {\n  items: PropTypes.array.isRequired,\n  itemToString: PropTypes.func,\n  getA11yStatusMessage: PropTypes.func,\n  getA11ySelectionMessage: PropTypes.func,\n  circularNavigation: PropTypes.bool,\n  highlightedIndex: PropTypes.number,\n  defaultHighlightedIndex: PropTypes.number,\n  initialHighlightedIndex: PropTypes.number,\n  isOpen: PropTypes.bool,\n  defaultIsOpen: PropTypes.bool,\n  initialIsOpen: PropTypes.bool,\n  selectedItem: PropTypes.any,\n  initialSelectedItem: PropTypes.any,\n  defaultSelectedItem: PropTypes.any,\n  inputValue: PropTypes.string,\n  defaultInputValue: PropTypes.string,\n  initialInputValue: PropTypes.string,\n  id: PropTypes.string,\n  labelId: PropTypes.string,\n  menuId: PropTypes.string,\n  getItemId: PropTypes.func,\n  inputId: PropTypes.string,\n  toggleButtonId: PropTypes.string,\n  stateReducer: PropTypes.func,\n  onSelectedItemChange: PropTypes.func,\n  onHighlightedIndexChange: PropTypes.func,\n  onStateChange: PropTypes.func,\n  onIsOpenChange: PropTypes.func,\n  onInputValueChange: PropTypes.func,\n  environment: PropTypes.shape({\n    addEventListener: PropTypes.func,\n    removeEventListener: PropTypes.func,\n    document: PropTypes.shape({\n      getElementById: PropTypes.func,\n      activeElement: PropTypes.any,\n      body: PropTypes.any\n    })\n  })\n};\n/**\n * The useCombobox version of useControlledReducer, which also\n * checks if the controlled prop selectedItem changed between\n * renders. If so, it will also update inputValue with its\n * string equivalent. It uses the common useEnhancedReducer to\n * compute the rest of the state.\n *\n * @param {Function} reducer Reducer function from downshift.\n * @param {Object} initialState Initial state of the hook.\n * @param {Object} props The hook props.\n * @returns {Array} An array with the state and an action dispatcher.\n */\n\nfunction useControlledReducer(reducer, initialState, props) {\n  var previousSelectedItemRef = useRef();\n\n  var _useEnhancedReducer = useEnhancedReducer(reducer, initialState, props),\n      state = _useEnhancedReducer[0],\n      dispatch = _useEnhancedReducer[1]; // ToDo: if needed, make same approach as selectedItemChanged from Downshift.\n\n\n  useEffect(function () {\n    if (isControlledProp(props, 'selectedItem')) {\n      if (previousSelectedItemRef.current !== props.selectedItem) {\n        dispatch({\n          type: ControlledPropUpdatedSelectedItem,\n          inputValue: props.itemToString(props.selectedItem)\n        });\n      }\n\n      previousSelectedItemRef.current = state.selectedItem === previousSelectedItemRef.current ? props.selectedItem : state.selectedItem;\n    }\n  });\n  return [getState(state, props), dispatch];\n} // eslint-disable-next-line import/no-mutable-exports\n\n\nvar validatePropTypes$1 = noop;\n/* istanbul ignore next */\n\nif (process.env.NODE_ENV !== 'production') {\n  validatePropTypes$1 = function validatePropTypes(options, caller) {\n    PropTypes.checkPropTypes(propTypes$1, options, 'prop', caller.name);\n  };\n}\n\nvar defaultProps$1 = _extends({}, defaultProps$3, {\n  getA11yStatusMessage: getA11yStatusMessage$1,\n  circularNavigation: true\n});\n\n/* eslint-disable complexity */\n\nfunction downshiftUseComboboxReducer(state, action) {\n  var type = action.type,\n      props = action.props,\n      shiftKey = action.shiftKey;\n  var changes;\n\n  switch (type) {\n    case ItemClick:\n      changes = {\n        isOpen: getDefaultValue$1(props, 'isOpen'),\n        highlightedIndex: getDefaultValue$1(props, 'highlightedIndex'),\n        selectedItem: props.items[action.index],\n        inputValue: props.itemToString(props.items[action.index])\n      };\n      break;\n\n    case InputKeyDownArrowDown:\n      if (state.isOpen) {\n        changes = {\n          highlightedIndex: getNextWrappingIndex(shiftKey ? 5 : 1, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, props.circularNavigation)\n        };\n      } else {\n        changes = {\n          highlightedIndex: getHighlightedIndexOnOpen(props, state, 1, action.getItemNodeFromIndex),\n          isOpen: props.items.length >= 0\n        };\n      }\n\n      break;\n\n    case InputKeyDownArrowUp:\n      if (state.isOpen) {\n        changes = {\n          highlightedIndex: getNextWrappingIndex(shiftKey ? -5 : -1, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, props.circularNavigation)\n        };\n      } else {\n        changes = {\n          highlightedIndex: getHighlightedIndexOnOpen(props, state, -1, action.getItemNodeFromIndex),\n          isOpen: props.items.length >= 0\n        };\n      }\n\n      break;\n\n    case InputKeyDownEnter:\n      changes = _extends({}, state.isOpen && state.highlightedIndex >= 0 && {\n        selectedItem: props.items[state.highlightedIndex],\n        isOpen: getDefaultValue$1(props, 'isOpen'),\n        highlightedIndex: getDefaultValue$1(props, 'highlightedIndex'),\n        inputValue: props.itemToString(props.items[state.highlightedIndex])\n      });\n      break;\n\n    case InputKeyDownEscape:\n      changes = _extends({\n        isOpen: false,\n        highlightedIndex: -1\n      }, !state.isOpen && {\n        selectedItem: null,\n        inputValue: ''\n      });\n      break;\n\n    case InputKeyDownHome:\n      changes = {\n        highlightedIndex: getNextNonDisabledIndex(1, 0, props.items.length, action.getItemNodeFromIndex, false)\n      };\n      break;\n\n    case InputKeyDownEnd:\n      changes = {\n        highlightedIndex: getNextNonDisabledIndex(-1, props.items.length - 1, props.items.length, action.getItemNodeFromIndex, false)\n      };\n      break;\n\n    case InputBlur:\n      changes = _extends({\n        isOpen: false,\n        highlightedIndex: -1\n      }, state.highlightedIndex >= 0 && action.selectItem && {\n        selectedItem: props.items[state.highlightedIndex],\n        inputValue: props.itemToString(props.items[state.highlightedIndex])\n      });\n      break;\n\n    case InputChange:\n      changes = {\n        isOpen: true,\n        highlightedIndex: getDefaultValue$1(props, 'highlightedIndex'),\n        inputValue: action.inputValue\n      };\n      break;\n\n    case FunctionSelectItem:\n      changes = {\n        selectedItem: action.selectedItem,\n        inputValue: props.itemToString(action.selectedItem)\n      };\n      break;\n\n    case ControlledPropUpdatedSelectedItem:\n      changes = {\n        inputValue: action.inputValue\n      };\n      break;\n\n    default:\n      return downshiftCommonReducer(state, action, stateChangeTypes$1);\n  }\n\n  return _extends({}, state, changes);\n}\n/* eslint-enable complexity */\n\nvar _excluded$1 = [\"onMouseLeave\", \"refKey\", \"ref\"],\n    _excluded2$1 = [\"item\", \"index\", \"refKey\", \"ref\", \"onMouseMove\", \"onClick\", \"onPress\"],\n    _excluded3 = [\"onClick\", \"onPress\", \"refKey\", \"ref\"],\n    _excluded4 = [\"onKeyDown\", \"onChange\", \"onInput\", \"onBlur\", \"onChangeText\", \"refKey\", \"ref\"],\n    _excluded5 = [\"refKey\", \"ref\"];\nuseCombobox.stateChangeTypes = stateChangeTypes$1;\n\nfunction useCombobox(userProps) {\n  if (userProps === void 0) {\n    userProps = {};\n  }\n\n  validatePropTypes$1(userProps, useCombobox); // Props defaults and destructuring.\n\n  var props = _extends({}, defaultProps$1, userProps);\n\n  var initialIsOpen = props.initialIsOpen,\n      defaultIsOpen = props.defaultIsOpen,\n      items = props.items,\n      scrollIntoView = props.scrollIntoView,\n      environment = props.environment,\n      getA11yStatusMessage = props.getA11yStatusMessage,\n      getA11ySelectionMessage = props.getA11ySelectionMessage,\n      itemToString = props.itemToString; // Initial state depending on controlled props.\n\n  var initialState = getInitialState$1(props);\n\n  var _useControlledReducer = useControlledReducer(downshiftUseComboboxReducer, initialState, props),\n      state = _useControlledReducer[0],\n      dispatch = _useControlledReducer[1];\n\n  var isOpen = state.isOpen,\n      highlightedIndex = state.highlightedIndex,\n      selectedItem = state.selectedItem,\n      inputValue = state.inputValue; // Element refs.\n\n  var menuRef = useRef(null);\n  var itemRefs = useRef({});\n  var inputRef = useRef(null);\n  var toggleButtonRef = useRef(null);\n  var comboboxRef = useRef(null);\n  var isInitialMountRef = useRef(true); // prevent id re-generation between renders.\n\n  var elementIds = useElementIds(props); // used to keep track of how many items we had on previous cycle.\n\n  var previousResultCountRef = useRef(); // utility callback to get item element.\n\n  var latest = useLatestRef({\n    state: state,\n    props: props\n  });\n  var getItemNodeFromIndex = useCallback(function (index) {\n    return itemRefs.current[elementIds.getItemId(index)];\n  }, [elementIds]); // Effects.\n  // Sets a11y status message on changes in state.\n\n  useA11yMessageSetter(getA11yStatusMessage, [isOpen, highlightedIndex, inputValue, items], _extends({\n    isInitialMount: isInitialMountRef.current,\n    previousResultCount: previousResultCountRef.current,\n    items: items,\n    environment: environment,\n    itemToString: itemToString\n  }, state)); // Sets a11y status message on changes in selectedItem.\n\n  useA11yMessageSetter(getA11ySelectionMessage, [selectedItem], _extends({\n    isInitialMount: isInitialMountRef.current,\n    previousResultCount: previousResultCountRef.current,\n    items: items,\n    environment: environment,\n    itemToString: itemToString\n  }, state)); // Scroll on highlighted item if change comes from keyboard.\n\n  var shouldScrollRef = useScrollIntoView({\n    menuElement: menuRef.current,\n    highlightedIndex: highlightedIndex,\n    isOpen: isOpen,\n    itemRefs: itemRefs,\n    scrollIntoView: scrollIntoView,\n    getItemNodeFromIndex: getItemNodeFromIndex\n  });\n  useControlPropsValidator({\n    isInitialMount: isInitialMountRef.current,\n    props: props,\n    state: state\n  }); // Focus the input on first render if required.\n\n  useEffect(function () {\n    var focusOnOpen = initialIsOpen || defaultIsOpen || isOpen;\n\n    if (focusOnOpen && inputRef.current) {\n      inputRef.current.focus();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  useEffect(function () {\n    if (isInitialMountRef.current) {\n      return;\n    }\n\n    previousResultCountRef.current = items.length;\n  }); // Add mouse/touch events to document.\n\n  var mouseAndTouchTrackersRef = useMouseAndTouchTracker(isOpen, [comboboxRef, menuRef, toggleButtonRef], environment, function () {\n    dispatch({\n      type: InputBlur,\n      selectItem: false\n    });\n  });\n  var setGetterPropCallInfo = useGetterPropsCalledChecker('getInputProps', 'getComboboxProps', 'getMenuProps'); // Make initial ref false.\n\n  useEffect(function () {\n    isInitialMountRef.current = false;\n  }, []); // Reset itemRefs on close.\n\n  useEffect(function () {\n    if (!isOpen) {\n      itemRefs.current = {};\n    }\n  }, [isOpen]);\n  /* Event handler functions */\n\n  var inputKeyDownHandlers = useMemo(function () {\n    return {\n      ArrowDown: function ArrowDown(event) {\n        event.preventDefault();\n        dispatch({\n          type: InputKeyDownArrowDown,\n          shiftKey: event.shiftKey,\n          getItemNodeFromIndex: getItemNodeFromIndex\n        });\n      },\n      ArrowUp: function ArrowUp(event) {\n        event.preventDefault();\n        dispatch({\n          type: InputKeyDownArrowUp,\n          shiftKey: event.shiftKey,\n          getItemNodeFromIndex: getItemNodeFromIndex\n        });\n      },\n      Home: function Home(event) {\n        if (!latest.current.state.isOpen) {\n          return;\n        }\n\n        event.preventDefault();\n        dispatch({\n          type: InputKeyDownHome,\n          getItemNodeFromIndex: getItemNodeFromIndex\n        });\n      },\n      End: function End(event) {\n        if (!latest.current.state.isOpen) {\n          return;\n        }\n\n        event.preventDefault();\n        dispatch({\n          type: InputKeyDownEnd,\n          getItemNodeFromIndex: getItemNodeFromIndex\n        });\n      },\n      Escape: function Escape() {\n        var latestState = latest.current.state;\n\n        if (latestState.isOpen || latestState.inputValue || latestState.selectedItem || latestState.highlightedIndex > -1) {\n          dispatch({\n            type: InputKeyDownEscape\n          });\n        }\n      },\n      Enter: function Enter(event) {\n        var latestState = latest.current.state; // if closed or no highlighted index, do nothing.\n\n        if (!latestState.isOpen || latestState.highlightedIndex < 0 || event.which === 229 // if IME composing, wait for next Enter keydown event.\n        ) {\n          return;\n        }\n\n        event.preventDefault();\n        dispatch({\n          type: InputKeyDownEnter,\n          getItemNodeFromIndex: getItemNodeFromIndex\n        });\n      }\n    };\n  }, [dispatch, latest, getItemNodeFromIndex]); // Getter props.\n\n  var getLabelProps = useCallback(function (labelProps) {\n    return _extends({\n      id: elementIds.labelId,\n      htmlFor: elementIds.inputId\n    }, labelProps);\n  }, [elementIds]);\n  var getMenuProps = useCallback(function (_temp, _temp2) {\n    var _extends2;\n\n    var _ref = _temp === void 0 ? {} : _temp,\n        onMouseLeave = _ref.onMouseLeave,\n        _ref$refKey = _ref.refKey,\n        refKey = _ref$refKey === void 0 ? 'ref' : _ref$refKey,\n        ref = _ref.ref,\n        rest = _objectWithoutPropertiesLoose(_ref, _excluded$1);\n\n    var _ref2 = _temp2 === void 0 ? {} : _temp2,\n        _ref2$suppressRefErro = _ref2.suppressRefError,\n        suppressRefError = _ref2$suppressRefErro === void 0 ? false : _ref2$suppressRefErro;\n\n    setGetterPropCallInfo('getMenuProps', suppressRefError, refKey, menuRef);\n    return _extends((_extends2 = {}, _extends2[refKey] = handleRefs(ref, function (menuNode) {\n      menuRef.current = menuNode;\n    }), _extends2.id = elementIds.menuId, _extends2.role = 'listbox', _extends2['aria-labelledby'] = elementIds.labelId, _extends2.onMouseLeave = callAllEventHandlers(onMouseLeave, function () {\n      dispatch({\n        type: MenuMouseLeave\n      });\n    }), _extends2), rest);\n  }, [dispatch, setGetterPropCallInfo, elementIds]);\n  var getItemProps = useCallback(function (_temp3) {\n    var _extends3, _ref4;\n\n    var _ref3 = _temp3 === void 0 ? {} : _temp3,\n        item = _ref3.item,\n        index = _ref3.index,\n        _ref3$refKey = _ref3.refKey,\n        refKey = _ref3$refKey === void 0 ? 'ref' : _ref3$refKey,\n        ref = _ref3.ref,\n        onMouseMove = _ref3.onMouseMove,\n        onClick = _ref3.onClick;\n        _ref3.onPress;\n        var rest = _objectWithoutPropertiesLoose(_ref3, _excluded2$1);\n\n    var _latest$current = latest.current,\n        latestProps = _latest$current.props,\n        latestState = _latest$current.state;\n    var itemIndex = getItemIndex(index, item, latestProps.items);\n\n    if (itemIndex < 0) {\n      throw new Error('Pass either item or item index in getItemProps!');\n    }\n\n    var onSelectKey = 'onClick';\n    var customClickHandler = onClick;\n\n    var itemHandleMouseMove = function itemHandleMouseMove() {\n      if (index === latestState.highlightedIndex) {\n        return;\n      }\n\n      shouldScrollRef.current = false;\n      dispatch({\n        type: ItemMouseMove,\n        index: index\n      });\n    };\n\n    var itemHandleClick = function itemHandleClick() {\n      dispatch({\n        type: ItemClick,\n        index: index\n      });\n\n      if (inputRef.current) {\n        inputRef.current.focus();\n      }\n    };\n\n    return _extends((_extends3 = {}, _extends3[refKey] = handleRefs(ref, function (itemNode) {\n      if (itemNode) {\n        itemRefs.current[elementIds.getItemId(itemIndex)] = itemNode;\n      }\n    }), _extends3.role = 'option', _extends3['aria-selected'] = \"\" + (itemIndex === latestState.highlightedIndex), _extends3.id = elementIds.getItemId(itemIndex), _extends3), !rest.disabled && (_ref4 = {\n      onMouseMove: callAllEventHandlers(onMouseMove, itemHandleMouseMove)\n    }, _ref4[onSelectKey] = callAllEventHandlers(customClickHandler, itemHandleClick), _ref4), rest);\n  }, [dispatch, latest, shouldScrollRef, elementIds]);\n  var getToggleButtonProps = useCallback(function (_temp4) {\n    var _extends4;\n\n    var _ref5 = _temp4 === void 0 ? {} : _temp4,\n        onClick = _ref5.onClick;\n        _ref5.onPress;\n        var _ref5$refKey = _ref5.refKey,\n        refKey = _ref5$refKey === void 0 ? 'ref' : _ref5$refKey,\n        ref = _ref5.ref,\n        rest = _objectWithoutPropertiesLoose(_ref5, _excluded3);\n\n    var toggleButtonHandleClick = function toggleButtonHandleClick() {\n      dispatch({\n        type: ToggleButtonClick\n      });\n\n      if (!latest.current.state.isOpen && inputRef.current) {\n        inputRef.current.focus();\n      }\n    };\n\n    return _extends((_extends4 = {}, _extends4[refKey] = handleRefs(ref, function (toggleButtonNode) {\n      toggleButtonRef.current = toggleButtonNode;\n    }), _extends4.id = elementIds.toggleButtonId, _extends4.tabIndex = -1, _extends4), !rest.disabled && _extends({}, {\n      onClick: callAllEventHandlers(onClick, toggleButtonHandleClick)\n    }), rest);\n  }, [dispatch, latest, elementIds]);\n  var getInputProps = useCallback(function (_temp5, _temp6) {\n    var _extends5;\n\n    var _ref6 = _temp5 === void 0 ? {} : _temp5,\n        onKeyDown = _ref6.onKeyDown,\n        onChange = _ref6.onChange,\n        onInput = _ref6.onInput,\n        onBlur = _ref6.onBlur;\n        _ref6.onChangeText;\n        var _ref6$refKey = _ref6.refKey,\n        refKey = _ref6$refKey === void 0 ? 'ref' : _ref6$refKey,\n        ref = _ref6.ref,\n        rest = _objectWithoutPropertiesLoose(_ref6, _excluded4);\n\n    var _ref7 = _temp6 === void 0 ? {} : _temp6,\n        _ref7$suppressRefErro = _ref7.suppressRefError,\n        suppressRefError = _ref7$suppressRefErro === void 0 ? false : _ref7$suppressRefErro;\n\n    setGetterPropCallInfo('getInputProps', suppressRefError, refKey, inputRef);\n    var latestState = latest.current.state;\n\n    var inputHandleKeyDown = function inputHandleKeyDown(event) {\n      var key = normalizeArrowKey(event);\n\n      if (key && inputKeyDownHandlers[key]) {\n        inputKeyDownHandlers[key](event);\n      }\n    };\n\n    var inputHandleChange = function inputHandleChange(event) {\n      dispatch({\n        type: InputChange,\n        inputValue: event.target.value\n      });\n    };\n\n    var inputHandleBlur = function inputHandleBlur() {\n      /* istanbul ignore else */\n      if (latestState.isOpen && !mouseAndTouchTrackersRef.current.isMouseDown) {\n        dispatch({\n          type: InputBlur,\n          selectItem: true\n        });\n      }\n    };\n    /* istanbul ignore next (preact) */\n\n\n    var onChangeKey = 'onChange';\n    var eventHandlers = {};\n\n    if (!rest.disabled) {\n      var _eventHandlers;\n\n      eventHandlers = (_eventHandlers = {}, _eventHandlers[onChangeKey] = callAllEventHandlers(onChange, onInput, inputHandleChange), _eventHandlers.onKeyDown = callAllEventHandlers(onKeyDown, inputHandleKeyDown), _eventHandlers.onBlur = callAllEventHandlers(onBlur, inputHandleBlur), _eventHandlers);\n    }\n\n    return _extends((_extends5 = {}, _extends5[refKey] = handleRefs(ref, function (inputNode) {\n      inputRef.current = inputNode;\n    }), _extends5.id = elementIds.inputId, _extends5['aria-autocomplete'] = 'list', _extends5['aria-controls'] = elementIds.menuId, _extends5), latestState.isOpen && latestState.highlightedIndex > -1 && {\n      'aria-activedescendant': elementIds.getItemId(latestState.highlightedIndex)\n    }, {\n      'aria-labelledby': elementIds.labelId,\n      // https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion\n      // revert back since autocomplete=\"nope\" is ignored on latest Chrome and Opera\n      autoComplete: 'off',\n      value: latestState.inputValue\n    }, eventHandlers, rest);\n  }, [dispatch, inputKeyDownHandlers, latest, mouseAndTouchTrackersRef, setGetterPropCallInfo, elementIds]);\n  var getComboboxProps = useCallback(function (_temp7, _temp8) {\n    var _extends6;\n\n    var _ref8 = _temp7 === void 0 ? {} : _temp7,\n        _ref8$refKey = _ref8.refKey,\n        refKey = _ref8$refKey === void 0 ? 'ref' : _ref8$refKey,\n        ref = _ref8.ref,\n        rest = _objectWithoutPropertiesLoose(_ref8, _excluded5);\n\n    var _ref9 = _temp8 === void 0 ? {} : _temp8,\n        _ref9$suppressRefErro = _ref9.suppressRefError,\n        suppressRefError = _ref9$suppressRefErro === void 0 ? false : _ref9$suppressRefErro;\n\n    setGetterPropCallInfo('getComboboxProps', suppressRefError, refKey, comboboxRef);\n    return _extends((_extends6 = {}, _extends6[refKey] = handleRefs(ref, function (comboboxNode) {\n      comboboxRef.current = comboboxNode;\n    }), _extends6.role = 'combobox', _extends6['aria-haspopup'] = 'listbox', _extends6['aria-owns'] = elementIds.menuId, _extends6['aria-expanded'] = latest.current.state.isOpen, _extends6), rest);\n  }, [latest, setGetterPropCallInfo, elementIds]); // returns\n\n  var toggleMenu = useCallback(function () {\n    dispatch({\n      type: FunctionToggleMenu\n    });\n  }, [dispatch]);\n  var closeMenu = useCallback(function () {\n    dispatch({\n      type: FunctionCloseMenu\n    });\n  }, [dispatch]);\n  var openMenu = useCallback(function () {\n    dispatch({\n      type: FunctionOpenMenu\n    });\n  }, [dispatch]);\n  var setHighlightedIndex = useCallback(function (newHighlightedIndex) {\n    dispatch({\n      type: FunctionSetHighlightedIndex,\n      highlightedIndex: newHighlightedIndex\n    });\n  }, [dispatch]);\n  var selectItem = useCallback(function (newSelectedItem) {\n    dispatch({\n      type: FunctionSelectItem,\n      selectedItem: newSelectedItem\n    });\n  }, [dispatch]);\n  var setInputValue = useCallback(function (newInputValue) {\n    dispatch({\n      type: FunctionSetInputValue,\n      inputValue: newInputValue\n    });\n  }, [dispatch]);\n  var reset = useCallback(function () {\n    dispatch({\n      type: FunctionReset$1\n    });\n  }, [dispatch]);\n  return {\n    // prop getters.\n    getItemProps: getItemProps,\n    getLabelProps: getLabelProps,\n    getMenuProps: getMenuProps,\n    getInputProps: getInputProps,\n    getComboboxProps: getComboboxProps,\n    getToggleButtonProps: getToggleButtonProps,\n    // actions.\n    toggleMenu: toggleMenu,\n    openMenu: openMenu,\n    closeMenu: closeMenu,\n    setHighlightedIndex: setHighlightedIndex,\n    setInputValue: setInputValue,\n    selectItem: selectItem,\n    reset: reset,\n    // state.\n    highlightedIndex: highlightedIndex,\n    isOpen: isOpen,\n    selectedItem: selectedItem,\n    inputValue: inputValue\n  };\n}\n\nvar defaultStateValues = {\n  activeIndex: -1,\n  selectedItems: []\n};\n/**\n * Returns the initial value for a state key in the following order:\n * 1. controlled prop, 2. initial prop, 3. default prop, 4. default\n * value from Downshift.\n *\n * @param {Object} props Props passed to the hook.\n * @param {string} propKey Props key to generate the value for.\n * @returns {any} The initial value for that prop.\n */\n\nfunction getInitialValue(props, propKey) {\n  return getInitialValue$1(props, propKey, defaultStateValues);\n}\n/**\n * Returns the default value for a state key in the following order:\n * 1. controlled prop, 2. default prop, 3. default value from Downshift.\n *\n * @param {Object} props Props passed to the hook.\n * @param {string} propKey Props key to generate the value for.\n * @returns {any} The initial value for that prop.\n */\n\n\nfunction getDefaultValue(props, propKey) {\n  return getDefaultValue$1(props, propKey, defaultStateValues);\n}\n/**\n * Gets the initial state based on the provided props. It uses initial, default\n * and controlled props related to state in order to compute the initial value.\n *\n * @param {Object} props Props passed to the hook.\n * @returns {Object} The initial state.\n */\n\n\nfunction getInitialState(props) {\n  var activeIndex = getInitialValue(props, 'activeIndex');\n  var selectedItems = getInitialValue(props, 'selectedItems');\n  return {\n    activeIndex: activeIndex,\n    selectedItems: selectedItems\n  };\n}\n/**\n * Returns true if dropdown keydown operation is permitted. Should not be\n * allowed on keydown with modifier keys (ctrl, alt, shift, meta), on\n * input element with text content that is either highlighted or selection\n * cursor is not at the starting position.\n *\n * @param {KeyboardEvent} event The event from keydown.\n * @returns {boolean} Whether the operation is allowed.\n */\n\n\nfunction isKeyDownOperationPermitted(event) {\n  if (event.shiftKey || event.metaKey || event.ctrlKey || event.altKey) {\n    return false;\n  }\n\n  var element = event.target;\n\n  if (element instanceof HTMLInputElement && // if element is a text input\n  element.value !== '' && (element.selectionStart !== 0 || element.selectionEnd !== 0)) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Returns a message to be added to aria-live region when item is removed.\n *\n * @param {Object} selectionParameters Parameters required to build the message.\n * @returns {string} The a11y message.\n */\n\n\nfunction getA11yRemovalMessage(selectionParameters) {\n  var removedSelectedItem = selectionParameters.removedSelectedItem,\n      itemToStringLocal = selectionParameters.itemToString;\n  return itemToStringLocal(removedSelectedItem) + \" has been removed.\";\n}\n\nvar propTypes = {\n  selectedItems: PropTypes.array,\n  initialSelectedItems: PropTypes.array,\n  defaultSelectedItems: PropTypes.array,\n  itemToString: PropTypes.func,\n  getA11yRemovalMessage: PropTypes.func,\n  stateReducer: PropTypes.func,\n  activeIndex: PropTypes.number,\n  initialActiveIndex: PropTypes.number,\n  defaultActiveIndex: PropTypes.number,\n  onActiveIndexChange: PropTypes.func,\n  onSelectedItemsChange: PropTypes.func,\n  keyNavigationNext: PropTypes.string,\n  keyNavigationPrevious: PropTypes.string,\n  environment: PropTypes.shape({\n    addEventListener: PropTypes.func,\n    removeEventListener: PropTypes.func,\n    document: PropTypes.shape({\n      getElementById: PropTypes.func,\n      activeElement: PropTypes.any,\n      body: PropTypes.any\n    })\n  })\n};\nvar defaultProps = {\n  itemToString: defaultProps$3.itemToString,\n  stateReducer: defaultProps$3.stateReducer,\n  environment: defaultProps$3.environment,\n  getA11yRemovalMessage: getA11yRemovalMessage,\n  keyNavigationNext: 'ArrowRight',\n  keyNavigationPrevious: 'ArrowLeft'\n}; // eslint-disable-next-line import/no-mutable-exports\n\nvar validatePropTypes = noop;\n/* istanbul ignore next */\n\nif (process.env.NODE_ENV !== 'production') {\n  validatePropTypes = function validatePropTypes(options, caller) {\n    PropTypes.checkPropTypes(propTypes, options, 'prop', caller.name);\n  };\n}\n\nvar SelectedItemClick = process.env.NODE_ENV !== \"production\" ? '__selected_item_click__' : 0;\nvar SelectedItemKeyDownDelete = process.env.NODE_ENV !== \"production\" ? '__selected_item_keydown_delete__' : 1;\nvar SelectedItemKeyDownBackspace = process.env.NODE_ENV !== \"production\" ? '__selected_item_keydown_backspace__' : 2;\nvar SelectedItemKeyDownNavigationNext = process.env.NODE_ENV !== \"production\" ? '__selected_item_keydown_navigation_next__' : 3;\nvar SelectedItemKeyDownNavigationPrevious = process.env.NODE_ENV !== \"production\" ? '__selected_item_keydown_navigation_previous__' : 4;\nvar DropdownKeyDownNavigationPrevious = process.env.NODE_ENV !== \"production\" ? '__dropdown_keydown_navigation_previous__' : 5;\nvar DropdownKeyDownBackspace = process.env.NODE_ENV !== \"production\" ? '__dropdown_keydown_backspace__' : 6;\nvar DropdownClick = process.env.NODE_ENV !== \"production\" ? '__dropdown_click__' : 7;\nvar FunctionAddSelectedItem = process.env.NODE_ENV !== \"production\" ? '__function_add_selected_item__' : 8;\nvar FunctionRemoveSelectedItem = process.env.NODE_ENV !== \"production\" ? '__function_remove_selected_item__' : 9;\nvar FunctionSetSelectedItems = process.env.NODE_ENV !== \"production\" ? '__function_set_selected_items__' : 10;\nvar FunctionSetActiveIndex = process.env.NODE_ENV !== \"production\" ? '__function_set_active_index__' : 11;\nvar FunctionReset = process.env.NODE_ENV !== \"production\" ? '__function_reset__' : 12;\n\nvar stateChangeTypes = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  SelectedItemClick: SelectedItemClick,\n  SelectedItemKeyDownDelete: SelectedItemKeyDownDelete,\n  SelectedItemKeyDownBackspace: SelectedItemKeyDownBackspace,\n  SelectedItemKeyDownNavigationNext: SelectedItemKeyDownNavigationNext,\n  SelectedItemKeyDownNavigationPrevious: SelectedItemKeyDownNavigationPrevious,\n  DropdownKeyDownNavigationPrevious: DropdownKeyDownNavigationPrevious,\n  DropdownKeyDownBackspace: DropdownKeyDownBackspace,\n  DropdownClick: DropdownClick,\n  FunctionAddSelectedItem: FunctionAddSelectedItem,\n  FunctionRemoveSelectedItem: FunctionRemoveSelectedItem,\n  FunctionSetSelectedItems: FunctionSetSelectedItems,\n  FunctionSetActiveIndex: FunctionSetActiveIndex,\n  FunctionReset: FunctionReset\n});\n\n/* eslint-disable complexity */\n\nfunction downshiftMultipleSelectionReducer(state, action) {\n  var type = action.type,\n      index = action.index,\n      props = action.props,\n      selectedItem = action.selectedItem;\n  var activeIndex = state.activeIndex,\n      selectedItems = state.selectedItems;\n  var changes;\n\n  switch (type) {\n    case SelectedItemClick:\n      changes = {\n        activeIndex: index\n      };\n      break;\n\n    case SelectedItemKeyDownNavigationPrevious:\n      changes = {\n        activeIndex: activeIndex - 1 < 0 ? 0 : activeIndex - 1\n      };\n      break;\n\n    case SelectedItemKeyDownNavigationNext:\n      changes = {\n        activeIndex: activeIndex + 1 >= selectedItems.length ? -1 : activeIndex + 1\n      };\n      break;\n\n    case SelectedItemKeyDownBackspace:\n    case SelectedItemKeyDownDelete:\n      {\n        var newActiveIndex = activeIndex;\n\n        if (selectedItems.length === 1) {\n          newActiveIndex = -1;\n        } else if (activeIndex === selectedItems.length - 1) {\n          newActiveIndex = selectedItems.length - 2;\n        }\n\n        changes = _extends({\n          selectedItems: [].concat(selectedItems.slice(0, activeIndex), selectedItems.slice(activeIndex + 1))\n        }, {\n          activeIndex: newActiveIndex\n        });\n        break;\n      }\n\n    case DropdownKeyDownNavigationPrevious:\n      changes = {\n        activeIndex: selectedItems.length - 1\n      };\n      break;\n\n    case DropdownKeyDownBackspace:\n      changes = {\n        selectedItems: selectedItems.slice(0, selectedItems.length - 1)\n      };\n      break;\n\n    case FunctionAddSelectedItem:\n      changes = {\n        selectedItems: [].concat(selectedItems, [selectedItem])\n      };\n      break;\n\n    case DropdownClick:\n      changes = {\n        activeIndex: -1\n      };\n      break;\n\n    case FunctionRemoveSelectedItem:\n      {\n        var _newActiveIndex = activeIndex;\n        var selectedItemIndex = selectedItems.indexOf(selectedItem);\n\n        if (selectedItems.length === 1) {\n          _newActiveIndex = -1;\n        } else if (selectedItemIndex === selectedItems.length - 1) {\n          _newActiveIndex = selectedItems.length - 2;\n        }\n\n        changes = _extends({\n          selectedItems: [].concat(selectedItems.slice(0, selectedItemIndex), selectedItems.slice(selectedItemIndex + 1))\n        }, {\n          activeIndex: _newActiveIndex\n        });\n        break;\n      }\n\n    case FunctionSetSelectedItems:\n      {\n        var newSelectedItems = action.selectedItems;\n        changes = {\n          selectedItems: newSelectedItems\n        };\n        break;\n      }\n\n    case FunctionSetActiveIndex:\n      {\n        var _newActiveIndex2 = action.activeIndex;\n        changes = {\n          activeIndex: _newActiveIndex2\n        };\n        break;\n      }\n\n    case FunctionReset:\n      changes = {\n        activeIndex: getDefaultValue(props, 'activeIndex'),\n        selectedItems: getDefaultValue(props, 'selectedItems')\n      };\n      break;\n\n    default:\n      throw new Error('Reducer called without proper action type.');\n  }\n\n  return _extends({}, state, changes);\n}\n\nvar _excluded = [\"refKey\", \"ref\", \"onClick\", \"onKeyDown\", \"selectedItem\", \"index\"],\n    _excluded2 = [\"refKey\", \"ref\", \"onKeyDown\", \"onClick\", \"preventKeyAction\"];\nuseMultipleSelection.stateChangeTypes = stateChangeTypes;\n\nfunction useMultipleSelection(userProps) {\n  if (userProps === void 0) {\n    userProps = {};\n  }\n\n  validatePropTypes(userProps, useMultipleSelection); // Props defaults and destructuring.\n\n  var props = _extends({}, defaultProps, userProps);\n\n  var getA11yRemovalMessage = props.getA11yRemovalMessage,\n      itemToString = props.itemToString,\n      environment = props.environment,\n      keyNavigationNext = props.keyNavigationNext,\n      keyNavigationPrevious = props.keyNavigationPrevious; // Reducer init.\n\n  var _useControlledReducer = useControlledReducer$1(downshiftMultipleSelectionReducer, getInitialState(props), props),\n      state = _useControlledReducer[0],\n      dispatch = _useControlledReducer[1];\n\n  var activeIndex = state.activeIndex,\n      selectedItems = state.selectedItems; // Refs.\n\n  var isInitialMountRef = useRef(true);\n  var dropdownRef = useRef(null);\n  var previousSelectedItemsRef = useRef(selectedItems);\n  var selectedItemRefs = useRef();\n  selectedItemRefs.current = [];\n  var latest = useLatestRef({\n    state: state,\n    props: props\n  }); // Effects.\n\n  /* Sets a11y status message on changes in selectedItem. */\n\n  useEffect(function () {\n    if (isInitialMountRef.current) {\n      return;\n    }\n\n    if (selectedItems.length < previousSelectedItemsRef.current.length) {\n      var removedSelectedItem = previousSelectedItemsRef.current.find(function (item) {\n        return selectedItems.indexOf(item) < 0;\n      });\n      setStatus(getA11yRemovalMessage({\n        itemToString: itemToString,\n        resultCount: selectedItems.length,\n        removedSelectedItem: removedSelectedItem,\n        activeIndex: activeIndex,\n        activeSelectedItem: selectedItems[activeIndex]\n      }), environment.document);\n    }\n\n    previousSelectedItemsRef.current = selectedItems; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedItems.length]); // Sets focus on active item.\n\n  useEffect(function () {\n    if (isInitialMountRef.current) {\n      return;\n    }\n\n    if (activeIndex === -1 && dropdownRef.current) {\n      dropdownRef.current.focus();\n    } else if (selectedItemRefs.current[activeIndex]) {\n      selectedItemRefs.current[activeIndex].focus();\n    }\n  }, [activeIndex]);\n  useControlPropsValidator({\n    isInitialMount: isInitialMountRef.current,\n    props: props,\n    state: state\n  });\n  var setGetterPropCallInfo = useGetterPropsCalledChecker('getDropdownProps'); // Make initial ref false.\n\n  useEffect(function () {\n    isInitialMountRef.current = false;\n  }, []); // Event handler functions.\n\n  var selectedItemKeyDownHandlers = useMemo(function () {\n    var _ref;\n\n    return _ref = {}, _ref[keyNavigationPrevious] = function () {\n      dispatch({\n        type: SelectedItemKeyDownNavigationPrevious\n      });\n    }, _ref[keyNavigationNext] = function () {\n      dispatch({\n        type: SelectedItemKeyDownNavigationNext\n      });\n    }, _ref.Delete = function Delete() {\n      dispatch({\n        type: SelectedItemKeyDownDelete\n      });\n    }, _ref.Backspace = function Backspace() {\n      dispatch({\n        type: SelectedItemKeyDownBackspace\n      });\n    }, _ref;\n  }, [dispatch, keyNavigationNext, keyNavigationPrevious]);\n  var dropdownKeyDownHandlers = useMemo(function () {\n    var _ref2;\n\n    return _ref2 = {}, _ref2[keyNavigationPrevious] = function (event) {\n      if (isKeyDownOperationPermitted(event)) {\n        dispatch({\n          type: DropdownKeyDownNavigationPrevious\n        });\n      }\n    }, _ref2.Backspace = function Backspace(event) {\n      if (isKeyDownOperationPermitted(event)) {\n        dispatch({\n          type: DropdownKeyDownBackspace\n        });\n      }\n    }, _ref2;\n  }, [dispatch, keyNavigationPrevious]); // Getter props.\n\n  var getSelectedItemProps = useCallback(function (_temp) {\n    var _extends2;\n\n    var _ref3 = _temp === void 0 ? {} : _temp,\n        _ref3$refKey = _ref3.refKey,\n        refKey = _ref3$refKey === void 0 ? 'ref' : _ref3$refKey,\n        ref = _ref3.ref,\n        onClick = _ref3.onClick,\n        onKeyDown = _ref3.onKeyDown,\n        selectedItem = _ref3.selectedItem,\n        index = _ref3.index,\n        rest = _objectWithoutPropertiesLoose(_ref3, _excluded);\n\n    var latestState = latest.current.state;\n    var itemIndex = getItemIndex(index, selectedItem, latestState.selectedItems);\n\n    if (itemIndex < 0) {\n      throw new Error('Pass either selectedItem or index in getSelectedItemProps!');\n    }\n\n    var selectedItemHandleClick = function selectedItemHandleClick() {\n      dispatch({\n        type: SelectedItemClick,\n        index: index\n      });\n    };\n\n    var selectedItemHandleKeyDown = function selectedItemHandleKeyDown(event) {\n      var key = normalizeArrowKey(event);\n\n      if (key && selectedItemKeyDownHandlers[key]) {\n        selectedItemKeyDownHandlers[key](event);\n      }\n    };\n\n    return _extends((_extends2 = {}, _extends2[refKey] = handleRefs(ref, function (selectedItemNode) {\n      if (selectedItemNode) {\n        selectedItemRefs.current.push(selectedItemNode);\n      }\n    }), _extends2.tabIndex = index === latestState.activeIndex ? 0 : -1, _extends2.onClick = callAllEventHandlers(onClick, selectedItemHandleClick), _extends2.onKeyDown = callAllEventHandlers(onKeyDown, selectedItemHandleKeyDown), _extends2), rest);\n  }, [dispatch, latest, selectedItemKeyDownHandlers]);\n  var getDropdownProps = useCallback(function (_temp2, _temp3) {\n    var _extends3;\n\n    var _ref4 = _temp2 === void 0 ? {} : _temp2,\n        _ref4$refKey = _ref4.refKey,\n        refKey = _ref4$refKey === void 0 ? 'ref' : _ref4$refKey,\n        ref = _ref4.ref,\n        onKeyDown = _ref4.onKeyDown,\n        onClick = _ref4.onClick,\n        _ref4$preventKeyActio = _ref4.preventKeyAction,\n        preventKeyAction = _ref4$preventKeyActio === void 0 ? false : _ref4$preventKeyActio,\n        rest = _objectWithoutPropertiesLoose(_ref4, _excluded2);\n\n    var _ref5 = _temp3 === void 0 ? {} : _temp3,\n        _ref5$suppressRefErro = _ref5.suppressRefError,\n        suppressRefError = _ref5$suppressRefErro === void 0 ? false : _ref5$suppressRefErro;\n\n    setGetterPropCallInfo('getDropdownProps', suppressRefError, refKey, dropdownRef);\n\n    var dropdownHandleKeyDown = function dropdownHandleKeyDown(event) {\n      var key = normalizeArrowKey(event);\n\n      if (key && dropdownKeyDownHandlers[key]) {\n        dropdownKeyDownHandlers[key](event);\n      }\n    };\n\n    var dropdownHandleClick = function dropdownHandleClick() {\n      dispatch({\n        type: DropdownClick\n      });\n    };\n\n    return _extends((_extends3 = {}, _extends3[refKey] = handleRefs(ref, function (dropdownNode) {\n      if (dropdownNode) {\n        dropdownRef.current = dropdownNode;\n      }\n    }), _extends3), !preventKeyAction && {\n      onKeyDown: callAllEventHandlers(onKeyDown, dropdownHandleKeyDown),\n      onClick: callAllEventHandlers(onClick, dropdownHandleClick)\n    }, rest);\n  }, [dispatch, dropdownKeyDownHandlers, setGetterPropCallInfo]); // returns\n\n  var addSelectedItem = useCallback(function (selectedItem) {\n    dispatch({\n      type: FunctionAddSelectedItem,\n      selectedItem: selectedItem\n    });\n  }, [dispatch]);\n  var removeSelectedItem = useCallback(function (selectedItem) {\n    dispatch({\n      type: FunctionRemoveSelectedItem,\n      selectedItem: selectedItem\n    });\n  }, [dispatch]);\n  var setSelectedItems = useCallback(function (newSelectedItems) {\n    dispatch({\n      type: FunctionSetSelectedItems,\n      selectedItems: newSelectedItems\n    });\n  }, [dispatch]);\n  var setActiveIndex = useCallback(function (newActiveIndex) {\n    dispatch({\n      type: FunctionSetActiveIndex,\n      activeIndex: newActiveIndex\n    });\n  }, [dispatch]);\n  var reset = useCallback(function () {\n    dispatch({\n      type: FunctionReset\n    });\n  }, [dispatch]);\n  return {\n    getSelectedItemProps: getSelectedItemProps,\n    getDropdownProps: getDropdownProps,\n    addSelectedItem: addSelectedItem,\n    removeSelectedItem: removeSelectedItem,\n    setSelectedItems: setSelectedItems,\n    setActiveIndex: setActiveIndex,\n    reset: reset,\n    selectedItems: selectedItems,\n    activeIndex: activeIndex\n  };\n}\n\nexport { Downshift$1 as default, resetIdCounter, useCombobox, useMultipleSelection, useSelect };\n","import React, { forwardRef } from \"react\";\nimport {\n  Box,\n  keyframes,\n  useMergeRefs,\n  useMultiStyleConfig,\n} from \"@chakra-ui/react\";\nimport Button from \"./../Button/Button\";\nimport Icon from \"./../Icons/Icon\";\nimport { SelectedItems } from \"./MultiSelect\";\n\nexport interface MultiSelectMenuButtonProps {\n  id: string;\n  /** The id of the MultiSelect using this button. */\n  multiSelectId: string;\n  /** The label text rendered within the MultiSelect using this button. */\n  multiSelectLabelText: string;\n  /** The open status of the MultiSelect menu. */\n  isOpen: boolean;\n  /** The selected items state (items that were checked by user). */\n  selectedItems: SelectedItems;\n  /** The callback function for the menu toggle. */\n  onMenuToggle?: () => void;\n  /** The action to perform for clear/reset button of MultiSelect. */\n  onClear?: () => void;\n  onKeyDown?: () => void;\n}\nconst grow = keyframes`\n  from {width: 22px; opacity: 0; }\n  to {width: 46px; opacity: 1;}\n`;\n\n/**\n * The toggle button component used to open and close the `MultiSelect` menu.\n * A second button is rendered above the main button that displays the current\n * number of selected items. Clicking on the second button will clear all\n * the selected items and the main button's close event will not be fired\n * (as expected).\n */\nconst MultiSelectMenuButton = forwardRef<\n  HTMLButtonElement,\n  MultiSelectMenuButtonProps\n>((props, ref?) => {\n  const {\n    id,\n    isOpen,\n    multiSelectId,\n    multiSelectLabelText,\n    onClear,\n    onKeyDown,\n    onMenuToggle,\n    selectedItems,\n    ...rest\n  } = props;\n  const iconType = isOpen ? \"minus\" : \"plus\";\n  const growAnimation = `${grow} 150ms ease-out`;\n\n  const [prevIsOpen, setPrevIsOpen] = React.useState(isOpen);\n\n  // Sets the selected items count on the menu button.\n  let getSelectedItemsCount;\n  let selectedItemsAriaLabel;\n  if (selectedItems[multiSelectId]?.items.length > 0) {\n    getSelectedItemsCount = `${selectedItems[multiSelectId].items.length}`;\n    const itemPlural = getSelectedItemsCount === \"1\" ? \"\" : \"s\";\n    selectedItemsAriaLabel = `remove ${getSelectedItemsCount} item${itemPlural} selected from ${multiSelectLabelText}`;\n  }\n  const styles = useMultiStyleConfig(\"MultiSelectMenuButton\", {\n    isOpen,\n    hasSelectedItems: getSelectedItemsCount,\n  });\n  // We need an internal Ref to manage the focus\n  const internalRef = React.useRef(null);\n  const mergedRefs = useMergeRefs(internalRef, ref);\n\n  // We need this for our \"fake\" button inside the main menu button.\n  function onKeyPress(e) {\n    const enterOrSpace =\n      e.key === \"Enter\" ||\n      e.key === \" \" ||\n      e.key === \"Spacebar\" ||\n      e.which === 13 ||\n      e.which === 32;\n\n    if (enterOrSpace) {\n      e.preventDefault();\n      onClear();\n      internalRef?.current.focus();\n    }\n  }\n  // Manage focus upon closing the MultiSelect\n  React.useEffect(() => {\n    setPrevIsOpen(isOpen);\n    // Catching the inital render of the page\n    if (isOpen !== prevIsOpen) {\n      if (!isOpen && internalRef) {\n        internalRef.current?.focus();\n      }\n    }\n  }, [isOpen, prevIsOpen]);\n\n  return (\n    <>\n      <Button\n        buttonType=\"secondary\"\n        id={id}\n        onClick={onMenuToggle}\n        ref={mergedRefs}\n        __css={styles.menuButton}\n        {...rest}\n      >\n        <Box as=\"span\" title={multiSelectLabelText} __css={styles.buttonLabel}>\n          {multiSelectLabelText}\n        </Box>\n        <Icon id={`ms-${multiSelectId}-icon`} name={iconType} size=\"small\" />\n      </Button>\n      {getSelectedItemsCount && (\n        <Box\n          animation={growAnimation}\n          aria-label={selectedItemsAriaLabel}\n          as=\"span\"\n          onClick={() => {\n            internalRef?.current.focus();\n            onClear();\n          }}\n          onKeyPress={onKeyPress}\n          role=\"button\"\n          tabIndex={0}\n          __css={styles.selectedItemsCountButton}\n        >\n          <Box as=\"span\" verticalAlign=\"text-bottom\">\n            {getSelectedItemsCount}\n          </Box>\n          <Icon\n            align=\"right\"\n            id={`ms-${multiSelectId}-selected-items-count-icon`}\n            marginLeft=\"xs\"\n            name=\"close\"\n            size=\"xsmall\"\n            title=\"Remove selected items\"\n          />\n        </Box>\n      )}\n    </>\n  );\n});\n\nexport default MultiSelectMenuButton;\n","import React, { forwardRef } from \"react\";\nimport {\n  Box,\n  chakra,\n  ListItem,\n  UnorderedList,\n  useMultiStyleConfig,\n} from \"@chakra-ui/react\";\nimport { useSelect } from \"downshift\";\n\nimport Checkbox from \"./../Checkbox/Checkbox\";\nimport { MultiSelectItem, MultiSelectProps } from \"./MultiSelect\";\nimport MultiSelectMenuButton from \"./MultiSelectMenuButton\";\n\ntype MultiSelectListboxProps = Omit<MultiSelectProps, \"onChange\"> & {\n  onChange: (selectedItem: MultiSelectItem, id: string) => void;\n};\n\n/** MultiSelectListbox renders a non-hierarchical list of checkbox options for the `type=\"listbox\". It leverager downshift-js for accessiblity. */\nexport const MultiSelectListbox = chakra(\n  forwardRef<HTMLElement, React.PropsWithChildren<MultiSelectListboxProps>>(\n    (props, ref?) => {\n      const {\n        id,\n        isBlockElement,\n        isDefaultOpen,\n        items,\n        labelText,\n        onChange,\n        onClear,\n        selectedItems,\n        width,\n        ...rest\n      } = props;\n\n      // Downshift.\n      const {\n        getItemProps,\n        getMenuProps,\n        getToggleButtonProps,\n        highlightedIndex,\n        isOpen,\n      } = useSelect({\n        items,\n        // Downshift's internal state for handling keyboard and mouse events.\n        stateReducer: (state, actionAndChanges) => {\n          const { changes, type } = actionAndChanges;\n          switch (type) {\n            case useSelect.stateChangeTypes.MenuKeyDownEnter:\n            case useSelect.stateChangeTypes.MenuKeyDownSpaceButton:\n            case useSelect.stateChangeTypes.ItemClick:\n              return {\n                ...changes,\n                isOpen: true, // Keep menu open after selection.\n                highlightedIndex: state.highlightedIndex,\n              };\n            default:\n              return changes;\n          }\n        },\n        //@ts-ignore\n        selectedItem: selectedItems,\n        onSelectedItemChange: ({ selectedItem }) => {\n          onChange(selectedItem, id);\n        },\n        initialIsOpen: isDefaultOpen,\n      });\n\n      const styles = useMultiStyleConfig(\"MultiSelect\", {\n        width,\n        isBlockElement,\n        isOpen,\n      });\n      // If a item passed to the listbox type has children,\n      if (items.some((item) => item.children)) {\n        console.warn(\n          \"NYPL Reservoir MultiSelect: Only the type 'dialog' can render nested select items.\"\n        );\n      }\n      return (\n        <Box id={id} __css={styles} {...rest}>\n          <MultiSelectMenuButton\n            multiSelectId={id}\n            multiSelectLabelText={labelText}\n            isOpen={isOpen}\n            selectedItems={selectedItems}\n            onClear={onClear}\n            ref={ref}\n            {...getToggleButtonProps({\n              id: `ms-${id}-menu-button`,\n              \"aria-labelledby\": `ms-${id}-menu ms-${id}-menu-button`,\n            })}\n          />\n          <Box __css={styles.menuContainer}>\n            <UnorderedList\n              styleType=\"none\"\n              marginInlineStart=\"0\"\n              {...getMenuProps({\n                id: `ms-${id}-menu`,\n                \"aria-labelledby\": `ms-${id}-menu-button`,\n              })}\n              // @FIX This prevents the menu from closing when checkbox or label is clicked.\n              onClick={(e) => e.preventDefault()}\n              __css={styles.menu}\n            >\n              {isOpen &&\n                items.map((item: MultiSelectItem, index: number) => (\n                  <ListItem\n                    py={1}\n                    // @TODO fix this, we want to pass the key prop as part of ...getItemProps but get\n                    // error  Missing \"key\" prop for element in iterator  react/jsx-key\n                    key={item.id}\n                    {...getItemProps({\n                      id: `ms-${id}-item-${index}`,\n                      key: item.id,\n                      item,\n                      index,\n                    })}\n                    sx={\n                      highlightedIndex === index\n                        ? { backgroundColor: \"ui.gray.x-light-cool\" }\n                        : {}\n                    }\n                  >\n                    <Checkbox\n                      id={item.id}\n                      labelText={item.name}\n                      name={item.name}\n                      isChecked={selectedItems[id]?.items.includes(item.id)}\n                      onChange={() => null}\n                    />\n                  </ListItem>\n                ))}\n            </UnorderedList>\n          </Box>\n        </Box>\n      );\n    }\n  ),\n  // Pass all custom props to Chakra and override, for width prop.\n  { shouldForwardProp: () => true }\n);\n\nexport default MultiSelectListbox;\n","import { useEffect } from \"react\";\nimport { useOutsideClick } from \"@chakra-ui/react\";\n\n/**\n * Close dropdowns when clicking outside of them or by pressing\n * the escape key. It expects an action callback that will set\n * the dropdown state to false (close).\n */\nconst useCloseDropDown = (\n  actionCb: (val: boolean) => void,\n  ref: React.RefObject<HTMLDivElement>\n) => {\n  // Listen for keydown events on the document for the escape key.\n  useEffect(() => {\n    const close = (e) => {\n      const key = e.key || e.keyCode;\n      if (key === \"Escape\" || key === \"Esc\" || key === 27) {\n        actionCb(false);\n      }\n    };\n    window.addEventListener(\"keydown\", close);\n    return () => window.removeEventListener(\"keydown\", close);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Listen for click events on the document outside of the\n  // element that the `ref` prop points to.\n  useOutsideClick({\n    ref,\n    handler: () => actionCb(false),\n  });\n};\n\nexport default useCloseDropDown;\n","import React, { useRef, useState, forwardRef } from \"react\";\nimport {\n  Box,\n  chakra,\n  ListItem,\n  UnorderedList,\n  useMultiStyleConfig,\n  useMergeRefs,\n} from \"@chakra-ui/react\";\nimport FocusLock from \"@chakra-ui/focus-lock\";\n\nimport Button from \"./../Button/Button\";\nimport ButtonGroup from \"./../ButtonGroup/ButtonGroup\";\nimport Checkbox from \"./../Checkbox/Checkbox\";\nimport { MultiSelectItem, MultiSelectProps } from \"./MultiSelect\";\nimport MultiSelectMenuButton from \"./MultiSelectMenuButton\";\nimport useNYPLBreakpoints from \"./../../hooks/useNYPLBreakpoints\";\nimport useCloseDropDown from \"../../hooks/useCloseDropDown\";\n\ntype MultiSelectDialogProps = Omit<MultiSelectProps, \"onChange\"> & {\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport const MultiSelectDialog = chakra(\n  forwardRef<HTMLDivElement, React.PropsWithChildren<MultiSelectDialogProps>>(\n    (props, ref) => {\n      const {\n        id,\n        isBlockElement,\n        isDefaultOpen,\n        items,\n        labelText,\n        onApply,\n        onChange,\n        onClear,\n        onMixedStateChange,\n        selectedItems,\n        width,\n        ...rest\n      } = props;\n\n      // Use NYPL Breakpoints hook to check screen size\n      const { isLargerThanMobile } = useNYPLBreakpoints();\n\n      // Control the open or closed state of the MultiSelect.\n      const [isOpen, setIsOpen] = useState(isDefaultOpen);\n\n      const styles = useMultiStyleConfig(\"MultiSelect\", {\n        width,\n        isBlockElement,\n        isOpen,\n      });\n\n      // Create a ref that we add to the element for which we want to detect outside clicks.\n      const internalRef: React.RefObject<HTMLDivElement> =\n        useRef<HTMLDivElement>();\n\n      // Custom Hook, Closes the MultiSelect if user clicks outside.\n      function useOnClickOutside(ref, handler) {\n        React.useEffect(() => {\n          const listener = (event) => {\n            // Do nothing if clicking ref's element or descendent elements\n            if (!ref.current || ref.current.contains(event.target)) {\n              return;\n            }\n            handler(event);\n          };\n          document.addEventListener(\"mousedown\", listener);\n          document.addEventListener(\"touchstart\", listener);\n          return () => {\n            document.removeEventListener(\"mousedown\", listener);\n            document.removeEventListener(\"touchstart\", listener);\n          };\n        }, [ref, handler]);\n      }\n      useOnClickOutside(internalRef, () => setIsOpen(false));\n\n      // Hook to close Dialog on ESC key storke\n      useCloseDropDown(() => setIsOpen(false), internalRef);\n\n      // Merge internal ref with the ref passed through the chakra function.\n      const mergedRefs = useMergeRefs(internalRef, ref);\n\n      const isChecked = (multiSelectId: string, itemId: string): boolean => {\n        if (selectedItems[multiSelectId]) {\n          return !!selectedItems[multiSelectId].items.find(\n            (selectedItemId: string) => selectedItemId === itemId\n          );\n        }\n        return false;\n      };\n\n      // isAllChecked defines the isChecked status of parent checkboxes. If all child items are selected, it will turn true, otherwise it returns false.\n      // This prop is only passed to parent options.\n      const isAllChecked = (\n        multiSelectId: string,\n        item: MultiSelectItem\n      ): boolean => {\n        let childIds: string[] = item.children.map((childItem) => childItem.id);\n        if (selectedItems[multiSelectId] !== undefined) {\n          return childIds.every((childItem) =>\n            selectedItems[multiSelectId].items.includes(childItem)\n          );\n        }\n        return false;\n      };\n\n      // isInteterminate will return true if some child items of the parent item are selected. This prop is only passed to parent options.\n      const isIndeterminate = (\n        multiSelectId: string,\n        item: MultiSelectItem\n      ): boolean => {\n        let childIds: string[] = item.children.map((childItem) => childItem.id);\n        if (\n          selectedItems[multiSelectId] !== undefined &&\n          childIds.some((childItem) =>\n            selectedItems[multiSelectId].items.includes(childItem)\n          )\n        ) {\n          return !isAllChecked(multiSelectId, item);\n        }\n        return false;\n      };\n\n      return (\n        <Box id={id} ref={mergedRefs} __css={styles} {...rest}>\n          <FocusLock isDisabled={!isOpen}>\n            <MultiSelectMenuButton\n              id={`ms-${id}-menu-button`}\n              multiSelectId={id}\n              multiSelectLabelText={labelText}\n              isOpen={isOpen}\n              selectedItems={selectedItems}\n              onMenuToggle={() => {\n                setIsOpen(!isOpen);\n              }}\n              onClear={onClear}\n            />\n            <Box\n              role=\"dialog\"\n              __css={styles.menuContainer}\n              {...(isOpen && { \"aria-modal\": true })}\n              aria-labelledby={`ms-${id}-menu-button`}\n            >\n              <UnorderedList\n                styleType=\"none\"\n                marginInlineStart=\"0\"\n                __css={styles.menu}\n              >\n                {isOpen &&\n                  items.map((item: MultiSelectItem) => (\n                    <ListItem key={item.id} py=\"xxs\">\n                      {item.children ? (\n                        <>\n                          <Checkbox\n                            id={item.id}\n                            labelText={item.name}\n                            name={item.name}\n                            // If onMixedStateChange is not passed as a prop, handle\n                            // the parent checkbox as a regular checkbox using onChange\n                            {...(onMixedStateChange !== undefined\n                              ? {\n                                  isChecked: isAllChecked(id, item),\n                                  isIndeterminate: isIndeterminate(id, item),\n                                  onChange: onMixedStateChange,\n                                }\n                              : {\n                                  isChecked: isChecked(id, item.id),\n                                  onChange,\n                                })}\n                          />\n                          <UnorderedList\n                            styleType=\"none\"\n                            marginInlineStart=\"0\"\n                            __css={styles.menuChildren}\n                          >\n                            {item.children.map((childItem) => {\n                              return (\n                                <ListItem key={childItem.id} py=\"xxs\">\n                                  <Checkbox\n                                    id={childItem.id}\n                                    labelText={childItem.name}\n                                    name={childItem.name}\n                                    isChecked={isChecked(id, childItem.id)}\n                                    onChange={onChange}\n                                  />\n                                </ListItem>\n                              );\n                            })}\n                          </UnorderedList>\n                        </>\n                      ) : (\n                        <Checkbox\n                          id={item.id}\n                          labelText={item.name}\n                          name={item.name}\n                          isChecked={isChecked(id, item.id)}\n                          onChange={onChange}\n                        />\n                      )}\n                    </ListItem>\n                  ))}\n              </UnorderedList>\n              {isOpen && isLargerThanMobile && (\n                <ButtonGroup __css={styles.actionButtons}>\n                  <Button\n                    id={`ms-${id}-clear`}\n                    buttonType=\"link\"\n                    type=\"button\"\n                    onClick={onClear}\n                  >\n                    Clear\n                  </Button>\n                  <Button\n                    id={`ms-${id}-apply`}\n                    buttonType=\"primary\"\n                    type=\"button\"\n                    onClick={() => {\n                      // Close the multiselect on apply.\n                      setIsOpen(false);\n                      // Run the onApply prop function.\n                      onApply();\n                    }}\n                  >\n                    Apply\n                  </Button>\n                </ButtonGroup>\n              )}\n            </Box>\n          </FocusLock>\n        </Box>\n      );\n    }\n  ),\n  // Pass all custom props to Chakra and override, for width prop.\n  { shouldForwardProp: () => true }\n);\n\nexport default MultiSelectDialog;\n","import { chakra } from \"@chakra-ui/react\";\nimport React, { forwardRef } from \"react\";\n\nimport MultiSelectListBox from \"./MultiSelectListbox\";\nimport MultiSelectDialog from \"./MultiSelectDialog\";\n\nexport interface MultiSelectItem {\n  id: string;\n  name: string;\n  children?: MultiSelectItem[];\n}\n\nexport const multiSelectWidthsArray = [\n  \"default\",\n  \"fitContent\",\n  \"full\",\n] as const;\nexport type MultiSelectWidths = typeof multiSelectWidthsArray[number];\n\nexport interface SelectedItems {\n  [name: string]: { items: string[] };\n}\ninterface MultiSelectCommonProps {\n  /** The id of the MultiSelect. */\n  id: string;\n  /** Set the default open or closed state of the Multiselect. */\n  isDefaultOpen?: boolean;\n  /** Boolean value used to control how the MultiSelect component will render within the page and interact with other DOM elements.\n   * The default value is false. */\n  isBlockElement?: boolean;\n  /** The items to be rendered in the Multiselect as checkbox options. */\n  items: MultiSelectItem[];\n  /** The label text rendered within the MultiSelect. */\n  labelText: string;\n  /** The action to perform for clear/reset button of MultiSelect. */\n  onClear?: () => void;\n  /** The type of MultiSelect that will be rendered. */\n  type: \"listbox\" | \"dialog\";\n  /** The selected items state (items that were checked by user). */\n  selectedItems: SelectedItems;\n  /** Value used to set the width for the MultiSelect component. */\n  width?: MultiSelectWidths;\n}\ntype ListboxOnChange = (selectedItem: MultiSelectItem, id: string) => void;\ntype DialogOnChange = (event: React.ChangeEvent<HTMLInputElement>) => void;\n\ntype MultiSelectVariantsProps =\n  | {\n      type: \"listbox\";\n      onApply?: never;\n      /** The action to perform for downshift's onSelectedItemChange function. */\n      onChange: ListboxOnChange;\n      // These are props that are never allowed on the listbox type.\n      onMixedStateChange?: never;\n    }\n  | {\n      type: \"dialog\";\n      /** The action to perform for save/apply button of multiselect. */\n      onApply: () => void;\n      /** The action to perform on the checkbox's onChange function.  */\n      onChange: DialogOnChange;\n      /** The action to perform for a mixed state checkbox (parent checkbox). */\n      onMixedStateChange?: DialogOnChange;\n    };\n\nexport type MultiSelectProps = MultiSelectCommonProps &\n  MultiSelectVariantsProps;\n\n/**\n * The `MultiSelect` component is a form input element that presents a list\n * of `Checkbox` components from which a user can make one or multiple\n * selections. Two variants of the MultiSelect component are offered, each with\n * slightly different functionality and requirements.  Because of these\n * differences, the two variants are broken out in separate stories below.\n */\nexport const MultiSelect = chakra(\n  forwardRef<HTMLDivElement, React.PropsWithChildren<MultiSelectProps>>(\n    (props, ref?) => {\n      const {\n        id,\n        isBlockElement = false,\n        isDefaultOpen = false,\n        items,\n        labelText,\n        onApply,\n        onChange,\n        onClear,\n        onMixedStateChange,\n        selectedItems,\n        type,\n        width = \"default\",\n        ...rest\n      } = props;\n\n      const commonProps = {\n        id,\n        isBlockElement,\n        isDefaultOpen,\n        items,\n        labelText,\n        onClear,\n        selectedItems,\n        type,\n        width,\n      };\n\n      if (type === \"listbox\") {\n        const listboxOnChange = onChange as ListboxOnChange;\n\n        return (\n          <MultiSelectListBox\n            {...commonProps}\n            ref={ref}\n            onChange={listboxOnChange}\n            {...rest}\n          />\n        );\n      }\n\n      if (type === \"dialog\") {\n        const dialogOnChange = onChange as DialogOnChange;\n\n        return (\n          <MultiSelectDialog\n            {...commonProps}\n            onChange={dialogOnChange}\n            onMixedStateChange={onMixedStateChange}\n            onApply={onApply}\n            ref={ref}\n            {...rest}\n          />\n        );\n      }\n\n      return null;\n    }\n  ),\n  // Pass all custom props to Chakra and override, for width prop.\n  { shouldForwardProp: () => true }\n);\n\nexport default MultiSelect;\n"],"names":["b","c","d","e","f","g","h","k","l","m","n","p","q","r","u","v","w","x","y","a","z","A","B","C","D","E","F","G","H","I","reactIs_production_min","t","i","o","s","W","M","R","T","O","Y","L","S","j","N","J","K","P","Q","U","Z","$","idCounter","noop","scrollIntoView","node","menuNode","actions","computeScrollIntoView","_ref","el","top","left","isOrContainsNode","parent","child","environment","result","debounce","fn","time","timeoutId","cancel","wrapper","_len","args","_key","callAllEventHandlers","_len2","fns","_key2","event","_len3","_key3","handleRefs","_len4","refs","_key4","ref","generateId","getA11yStatusMessage$1","_ref2","isOpen","resultCount","previousResultCount","getState","state","props","prevState","key","isControlledProp","normalizeArrowKey","keyCode","getNextWrappingIndex","moveAmount","baseIndex","itemCount","getItemNodeFromIndex","circular","itemsLastIndex","newIndex","nonDisabledNewIndex","getNextNonDisabledIndex","currentElementNode","index","_index","targetWithinDownshift","target","downshiftElements","checkActiveElement","contextNode","cleanupStatus","documentProp","getStatusDiv","setStatus","status","div","statusDiv","_excluded$3","dropdownDefaultStateValues","callOnChangeProps","action","newState","type","changes","invokeOnChangeHandler","_extends","handler","capitalizeString","stateReducer","getA11ySelectionMessage","selectionParameters","selectedItem","itemToStringLocal","updateA11yStatus","getA11yMessage","document","useIsomorphicLayoutEffect","useLayoutEffect","useEffect","useElementIds","_ref$id","id","labelId","menuId","getItemId","toggleButtonId","inputId","elementIdsRef","useRef","getItemIndex","item","items","itemToString","isAcceptedCharacterKey","string","useLatestRef","val","useEnhancedReducer","reducer","initialState","prevStateRef","actionRef","enhancedReducer","useCallback","_useReducer","useReducer","dispatch","propsRef","dispatchWithProps","useControlledReducer$1","_useEnhancedReducer","defaultProps$3","getDefaultValue$1","propKey","defaultStateValues","defaultPropKey","getInitialValue$1","initialPropKey","getInitialState$2","highlightedIndex","inputValue","getHighlightedIndexOnOpen","offset","initialHighlightedIndex","defaultHighlightedIndex","useMouseAndTouchTracker","downshiftElementRefs","handleBlur","mouseAndTouchTrackersRef","onMouseDown","onMouseUp","onTouchStart","onTouchMove","onTouchEnd","useGetterPropsCalledChecker","useA11yMessageSetter","dependencyArray","isInitialMount","rest","_objectWithoutPropertiesLoose","useScrollIntoView","_ref3","itemRefs","menuElement","scrollIntoViewProp","shouldScrollRef","useControlPropsValidator","downshiftCommonReducer","stateChangeTypes","getItemIndexByCharacterKey","_a","keysSoFar","lowerCasedKeysSoFar","offsetIndex","element","PropTypes","getA11yStatusMessage","defaultProps$2","__assign","validatePropTypes$2","MenuKeyDownArrowDown","MenuKeyDownArrowUp","MenuKeyDownEscape","MenuKeyDownHome","MenuKeyDownEnd","MenuKeyDownEnter","MenuKeyDownSpaceButton","MenuKeyDownCharacter","MenuBlur","MenuMouseLeave$1","ItemMouseMove$1","ItemClick$1","ToggleButtonClick$1","ToggleButtonKeyDownArrowDown","ToggleButtonKeyDownArrowUp","ToggleButtonKeyDownCharacter","FunctionToggleMenu$1","FunctionOpenMenu$1","FunctionCloseMenu$1","FunctionSetHighlightedIndex$1","FunctionSelectItem$1","FunctionSetInputValue$1","FunctionReset$2","stateChangeTypes$2","downshiftSelectReducer","shiftKey","lowercasedKey","itemIndex","_lowercasedKey","_inputValue","_excluded$2","_excluded2$2","_excluded3$1","useSelect","userProps","initialIsOpen","defaultIsOpen","_useControlledReducer","toggleButtonRef","menuRef","shouldBlurRef","clearTimeoutRef","elementIds","previousResultCountRef","isInitialMountRef","latest","outerDispatch","setGetterPropCallInfo","toggleButtonKeyDownHandlers","useMemo","menuKeyDownHandlers","toggleMenu","closeMenu","openMenu","setHighlightedIndex","newHighlightedIndex","selectItem","newSelectedItem","reset","setInputValue","newInputValue","getLabelProps","labelProps","getMenuProps","_temp","_temp2","_extends2","onMouseLeave","_ref$refKey","refKey","onKeyDown","onBlur","latestState","menuHandleKeyDown","menuHandleBlur","shouldBlur","menuHandleMouseLeave","getToggleButtonProps","_temp3","_temp4","_extends3","onClick","_ref3$refKey","_ref4","toggleButtonHandleClick","toggleButtonHandleKeyDown","toggleProps","toggleButtonNode","getItemProps","_temp5","_extends4","_ref5","onMouseMove","_ref5$refKey","_latest$current","latestProps","itemHandleMouseMove","itemHandleClick","itemProps","itemNode","getA11yRemovalMessage","removedSelectedItem","grow","keyframes","MultiSelectMenuButton","forwardRef","multiSelectId","multiSelectLabelText","onClear","onMenuToggle","selectedItems","iconType","growAnimation","prevIsOpen","setPrevIsOpen","React","getSelectedItemsCount","selectedItemsAriaLabel","styles","useMultiStyleConfig","internalRef","mergedRefs","useMergeRefs","onKeyPress","jsxs","Fragment","Button","jsx","Box","Icon","MultiSelectListbox","chakra","isBlockElement","isDefaultOpen","labelText","onChange","width","actionAndChanges","UnorderedList","ListItem","Checkbox","useCloseDropDown","actionCb","close","useOutsideClick","MultiSelectDialog","onApply","onMixedStateChange","isLargerThanMobile","useNYPLBreakpoints","setIsOpen","useState","useOnClickOutside","ref2","listener","isChecked","itemId","selectedItemId","isAllChecked","childIds","childItem","isIndeterminate","FocusLock","ButtonGroup","multiSelectWidthsArray","MultiSelect","commonProps","MultiSelectListBox"],"mappings":"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","x_google_ignoreList":[0,1,2]}