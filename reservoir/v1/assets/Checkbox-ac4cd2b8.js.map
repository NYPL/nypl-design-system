{"version":3,"file":"Checkbox-ac4cd2b8.js","sources":["../../../src/components/Checkbox/Checkbox.tsx"],"sourcesContent":["import {\n  chakra,\n  Checkbox as ChakraCheckbox,\n  Icon,\n  useMultiStyleConfig,\n} from \"@chakra-ui/react\";\nimport React, { forwardRef } from \"react\";\n\nimport ComponentWrapper from \"../ComponentWrapper/ComponentWrapper\";\nimport { HelperErrorTextType } from \"../HelperErrorText/HelperErrorText\";\nimport { getAriaAttrs } from \"../../utils/utils\";\n\ninterface CheckboxIconProps {\n  /** When using the Checkbox as a \"controlled\" form element, you can specify\n   * the Checkbox's checked state using this prop.\n   * Learn more about controlled and uncontrolled form fields:\n   * https://goshakkk.name/controlled-vs-uncontrolled-inputs-react/ */\n  isChecked?: boolean;\n  /** Adds the indeterminate state to the `Checkbox`. */\n  isIndeterminate?: boolean;\n}\n\nexport interface CheckboxProps extends CheckboxIconProps {\n  /** className you can add in addition to 'input' */\n  className?: string;\n  /** Optional string to populate the HelperErrorText for standard state */\n  helperText?: HelperErrorTextType;\n  /** ID that other components can cross reference for accessibility purposes */\n  id: string;\n  /** Optional string to populate the HelperErrorText for the error state\n   * when `isInvalid` is true. */\n  invalidText?: HelperErrorTextType;\n  /** Adds the 'disabled' and `aria-disabled` attributes to the input when true.\n   * This also makes the text italic and color scheme gray. */\n  isDisabled?: boolean;\n  /** Adds the 'aria-invalid' attribute to the input when true. This also makes\n   * the color theme \"NYPL error\" red for the button and text. */\n  isInvalid?: boolean;\n  /** Adds the 'required' attribute to the input when true. */\n  isRequired?: boolean;\n  /** The checkbox's label. This will serve as the text content for a `<label>`\n   * element if `showlabel` is true, or an \"aria-label\" if `showLabel` is false. */\n  labelText: string | JSX.Element;\n  /** The name prop indicates into which group of checkboxes this checkbox\n   * belongs. If none is specified, 'default' will be used */\n  name?: string;\n  /** The action to perform on the `<input>`'s onChange function  */\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  /** Offers the ability to hide the helper/invalid text. */\n  showHelperInvalidText?: boolean;\n  /** Offers the ability to show the checkbox's label onscreen or hide it.\n   * Refer to the `labelText` property for more information. */\n  showLabel?: boolean;\n  /** Populates the value of the input */\n  value?: string;\n}\n\nfunction CheckboxIcon(props: CheckboxIconProps) {\n  // We don't need the `isIndeterminate` or `isChecked` props but it\n  // causes rendering issues on the SVG element, so we remove them\n  // before passing all the props to the `Icon` component.\n  const { isIndeterminate, isChecked, ...rest } = props;\n\n  return (\n    <Icon viewBox=\"0 0 24 24\" {...rest}>\n      <path\n        fill=\"currentColor\"\n        d=\"M8.795 15.875l-4.17-4.17-1.42 1.41 5.59 5.59 12-12-1.41-1.41-10.59 10.58z\"\n      />\n    </Icon>\n  );\n}\n\nexport const Checkbox = chakra(\n  forwardRef<HTMLInputElement, CheckboxProps>((props, ref?) => {\n    const {\n      className,\n      invalidText,\n      helperText,\n      id,\n      isChecked,\n      isDisabled = false,\n      isIndeterminate = false,\n      isInvalid = false,\n      isRequired = false,\n      labelText,\n      name,\n      onChange,\n      showHelperInvalidText = true,\n      showLabel = true,\n      value,\n      ...rest\n    } = props;\n    const styles = useMultiStyleConfig(\"Checkbox\", {});\n    const footnote = isInvalid ? invalidText : helperText;\n    // Use Chakra's default indeterminate icon.\n    const icon = !isIndeterminate ? <CheckboxIcon /> : undefined;\n    const ariaAttributes = getAriaAttrs({\n      footnote,\n      id,\n      labelText,\n      name: \"Checkbox\",\n      showLabel,\n    });\n\n    if (!id) {\n      console.warn(\n        \"NYPL Reservoir Checkbox: This component's required `id` prop was not passed.\"\n      );\n    }\n\n    return (\n      <ComponentWrapper\n        helperText={helperText}\n        helperTextStyles={styles.helperErrorText}\n        id={id}\n        invalidText={invalidText}\n        isInvalid={isInvalid}\n        showHelperInvalidText={showHelperInvalidText}\n        {...rest}\n      >\n        <ChakraCheckbox\n          className={className}\n          icon={icon}\n          id={id}\n          isDisabled={isDisabled}\n          isIndeterminate={isIndeterminate}\n          isInvalid={isInvalid}\n          isRequired={isRequired}\n          name={name || \"default\"}\n          ref={ref}\n          value={value}\n          {...(isChecked !== undefined\n            ? {\n                isChecked,\n                onChange,\n              }\n            : {\n                defaultIsChecked: false,\n              })}\n          alignItems=\"flex-start\"\n          __css={styles}\n          {...ariaAttributes}\n        >\n          {showLabel && labelText}\n        </ChakraCheckbox>\n      </ComponentWrapper>\n    );\n  })\n);\n\nexport default Checkbox;\n"],"names":["CheckboxIcon","props","isIndeterminate","isChecked","rest","jsx","Icon","Checkbox","chakra","forwardRef","ref","className","invalidText","helperText","id","isDisabled","isInvalid","isRequired","labelText","name","onChange","showHelperInvalidText","showLabel","value","styles","useMultiStyleConfig","footnote","icon","ariaAttributes","getAriaAttrs","ComponentWrapper","ChakraCheckbox"],"mappings":"yWAyDA,SAAAA,EAAAC,EAAA,CAIE,KAAA,CAAA,gBAAAC,EAAA,UAAAC,EAAA,GAAAC,CAAA,EAAAH,EAEA,OAAAI,EAAAC,EAAA,CAAA,QAAA,YAAA,GAAAF,EAAA,SAAAC,EAEI,OAAC,CAAA,KAAA,eACM,EAAA,2EACH,CAAA,CAAA,CAAA,CAIV,CAEO,MAAAE,EAAAC,EAAiBC,aAAA,CAAAR,EAAAS,IAAA,CAEpB,KAAA,CAAM,UAAAC,EACJ,YAAAC,EACA,WAAAC,EACA,GAAAC,EACA,UAAAX,EACA,WAAAY,EAAA,GACa,gBAAAb,EAAA,GACK,UAAAc,EAAA,GACN,WAAAC,EAAA,GACC,UAAAC,EACb,KAAAC,EACA,SAAAC,EACA,sBAAAC,EAAA,GACwB,UAAAC,EAAA,GACZ,MAAAC,EACZ,GAAAnB,CACG,EAAAH,EAELuB,EAAAC,EAAA,WAAA,CAAA,CAAA,EACAC,EAAAV,EAAAJ,EAAAC,EAEAc,EAAAzB,EAAA,OAAAG,EAAAL,EAAA,CAAA,CAAA,EACA4B,EAAAC,EAAA,CAAoC,SAAAH,EAClC,GAAAZ,EACA,UAAAI,EACA,KAAA,WACM,UAAAI,CACN,CAAA,EAGF,OAAAR,GACE,QAAA,KAAQ,8EACN,EAIJT,EACEyB,EAAC,CAAA,WAAAjB,EACC,iBAAAW,EAAA,gBACyB,GAAAV,EACzB,YAAAF,EACA,UAAAI,EACA,sBAAAK,EACA,GAAAjB,EACI,SAAAC,EAEJ0B,EAAC,CAAA,UAAApB,EACC,KAAAgB,EACA,GAAAb,EACA,WAAAC,EACA,gBAAAb,EACA,UAAAc,EACA,WAAAC,EACA,KAAAE,GAAA,UACc,IAAAT,EACd,MAAAa,EACA,GAAApB,IAAA,OAAA,CAEI,UAAAA,EACE,SAAAiB,CACA,EAAA,CAEF,iBAAA,EACoB,EACpB,WAAA,aACO,MAAAI,EACJ,GAAAI,EACH,SAAAN,GAAAJ,CAEU,CAAA,CAChB,CAAA,CACF,CAAA,CAGN;;;;;"}