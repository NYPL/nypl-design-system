import{j as x}from"./emotion-react-jsx-runtime.browser.esm-b12afd4d.js";import{r as i}from"./index-f2bd0723.js";import{C}from"./ComponentWrapper-82a15cf7.js";import{g as q}from"./utils-acca7d12.js";import{u as S}from"./chakra-ui-checkbox.esm-6eb4bb1a.js";import{o as P,u as k,p as E,f as d,r as V,x as v,i as I,B as N}from"./chakra-ui-layout.esm-b2fa9d31.js";function o(){return o=Object.assign||function(t){for(var s=1;s<arguments.length;s++){var e=arguments[s];for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a])}return t},o.apply(this,arguments)}function A(t,s){if(t==null)return{};var e={},a=Object.keys(t),n,r;for(r=0;r<a.length;r++)n=a[r],!(s.indexOf(n)>=0)&&(e[n]=t[n]);return e}var H=["spacing","children"],L=P(function(t,s){var e=k("Switch",t),a=E(t),n=a.spacing,r=n===void 0?"0.5rem":n,c=a.children,p=A(a,H),l=S(p),h=l.state,m=l.getInputProps,g=l.getCheckboxProps,b=l.getRootProps,u=l.getLabelProps,y=i.useMemo(function(){return o({display:"inline-block",position:"relative",verticalAlign:"middle",lineHeight:0},e.container)},[e.container]),f=i.useMemo(function(){return o({display:"inline-flex",flexShrink:0,justifyContent:"flex-start",boxSizing:"content-box",cursor:"pointer"},e.track)},[e.track]),T=i.useMemo(function(){return o({userSelect:"none",marginStart:r},e.label)},[r,e.label]);return i.createElement(d.label,o({},b(),{className:V("chakra-switch",t.className),__css:y}),i.createElement("input",o({className:"chakra-switch__input"},m({},s))),i.createElement(d.span,o({},g(),{className:"chakra-switch__track",__css:f}),i.createElement(d.span,{__css:e.thumb,className:"chakra-switch__thumb","data-checked":v(h.isChecked),"data-hover":v(h.isHovered)})),c&&i.createElement(d.span,o({className:"chakra-switch__label"},u(),{__css:T}),c))});const Y=["default","small"],R=()=>{},_=d(i.forwardRef((t,s)=>{const{defaultChecked:e=!1,helperText:a,id:n,invalidText:r,isChecked:c,isDisabled:p=!1,isInvalid:l=!1,isRequired:h=!1,labelText:m,name:g,onChange:b=R,size:u="default",...y}=t,f=k("Toggle",{isDisabled:p,size:u}),T=I("Switch",{size:u}),w=q({footnote:l?r:a,id:n,labelText:m,name:"Toggle",showLabel:!0});return n||console.warn("NYPL Reservoir Toggle: This component's required `id` prop was not passed."),x(C,{helperText:a,helperTextStyles:f.helperErrorText,id:n,invalidText:r,isInvalid:l,...y,children:x(N,{__css:f,children:x(L,{id:n,isDisabled:p,isInvalid:l,isRequired:h,name:g||"default",ref:s,size:u==="default"?"lg":"sm",lineHeight:"1.5",...c!==void 0?{isChecked:c,onChange:b}:{defaultChecked:e},...w,__css:T,children:m})})})}));try{_.displayName="Toggle",_.__docgenInfo={description:"Component that renders Chakra's `Switch` component along with NYPL defaults.",displayName:"Toggle",props:{id:{defaultValue:null,description:"ID that other components can cross reference for accessibility purposes",name:"id",required:!0,type:{name:"string"}},size:{defaultValue:null,description:'The size of the Toggle. Defaults to "large".',name:"size",required:!1,type:{name:'"small" | "default"'}},name:{defaultValue:null,description:"The name prop indicates the `Toggle`'s form element name. If none is\nspecified, 'default' will be used.",name:"name",required:!1,type:{name:"string"}},isDisabled:{defaultValue:null,description:"Adds the 'disabled' and `aria-disabled` attributes to the input when true.\nThis also makes the text italic and color scheme gray.",name:"isDisabled",required:!1,type:{name:"boolean"}},helperText:{defaultValue:null,description:"Optional string to populate the HelperErrorText for standard state",name:"helperText",required:!1,type:{name:"HelperErrorTextType"}},defaultChecked:{defaultValue:null,description:`Used for uncontrolled scenarios.  Sets the state of the Toggle when the page first loads.
 If true, the toggle will be initially set to the "on" position.`,name:"defaultChecked",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"The action to perform on the `<input>`'s onChange function",name:"onChange",required:!1,type:{name:"(event: ChangeEvent<HTMLInputElement>) => void"}},invalidText:{defaultValue:null,description:"Optional string to populate the HelperErrorText for the error state\nwhen `isInvalid` is true.",name:"invalidText",required:!1,type:{name:"HelperErrorTextType"}},isInvalid:{defaultValue:null,description:"Adds the 'aria-invalid' attribute to the input when true.",name:"isInvalid",required:!1,type:{name:"boolean"}},isRequired:{defaultValue:null,description:"Adds the 'required' attribute to the input when true.",name:"isRequired",required:!1,type:{name:"boolean"}},labelText:{defaultValue:null,description:"The toggle's label. This will serve as the text content for the `<label>` element",name:"labelText",required:!0,type:{name:"string"}},isChecked:{defaultValue:null,description:`When using the Toggle as a "controlled" form element, you can specify
the Toggle's checked state using this prop.
Learn more about controlled and uncontrolled form fields:
https://goshakkk.name/controlled-vs-uncontrolled-inputs-react/`,name:"isChecked",required:!1,type:{name:"boolean"}}}}}catch{}export{_ as T,Y as t};
//# sourceMappingURL=Toggle-9580209e.js.map
