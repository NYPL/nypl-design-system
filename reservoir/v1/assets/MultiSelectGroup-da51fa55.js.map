{"version":3,"file":"MultiSelectGroup-da51fa55.js","sources":["../../../src/components/MultiSelectGroup/MultiSelectGroup.tsx"],"sourcesContent":["import { chakra, Stack, useMultiStyleConfig } from \"@chakra-ui/react\";\nimport React, { forwardRef } from \"react\";\n\nimport Fieldset from \"../Fieldset/Fieldset\";\nimport { LayoutTypes } from \"../../helpers/types\";\nimport MultiSelect, { MultiSelectWidths } from \"../MultiSelect/MultiSelect\";\nimport useNYPLBreakpoints from \"../../hooks/useNYPLBreakpoints\";\n\nexport interface MultiSelectGroupProps {\n  children: React.ReactNode;\n  /** Additional className to use. */\n  className?: string;\n  /** The id of the MultiSelectGroup. */\n  id: string;\n  /** The label text rendered within the MultiSelectGroup. */\n  labelText: string;\n  /** Renders the layout of `MultiSelect` components in a row or column. */\n  layout?: LayoutTypes;\n  /** Width will be passed on each `MultiSelect` component. */\n  multiSelectWidth?: MultiSelectWidths;\n  /** Is set to `true` by default and determines if the `labelText` is visible on the site. */\n  showLabel?: boolean;\n}\n\n/**\n * `MultiSelectGroup` is a wrapper component specific for `MultiSelect` components. The wrapped `MutliSelect` components can be displayed in a\n * column or in a row. The `MultiSelectGroup` component renders all the necessary\n * wrapping and associated text elements, but the child elements\n * _need_ to be `MultiSelect` components from the NYPL Design System.\n */\nexport const MultiSelectGroup = chakra(\n  forwardRef<HTMLDivElement, React.PropsWithChildren<MultiSelectGroupProps>>(\n    (props, ref?) => {\n      const {\n        children,\n        className = \"\",\n        id,\n        labelText,\n        layout = \"row\",\n        multiSelectWidth = \"default\",\n        showLabel = true,\n        ...rest\n      } = props;\n      const newChildren: JSX.Element[] = [];\n\n      const { isLargerThanMobile } = useNYPLBreakpoints();\n      const finalLayout = isLargerThanMobile ? layout : \"column\";\n      const finallWidth = isLargerThanMobile ? multiSelectWidth : \"full\";\n      const isBlockElement = layout === \"column\" ? true : false;\n      const styles = useMultiStyleConfig(\"MultiSelectGroup\", {\n        width: finallWidth,\n      });\n\n      // Go through the MultiSelect children and update props as needed.\n      React.Children.map(\n        children as JSX.Element,\n        (child: React.ReactElement) => {\n          if (React.isValidElement(child)) {\n            // @TODO: DXP needs to pass custom MultiSelects that wrap DS Mutliselects - type check deos not allow DXP to use MultiSelectGroup\n            // if (child.type !== MultiSelect) {\n            //   console.warn(\n            //     \"NYPL Reservoir MultiSelectGroup: Only MultiSelect components can be children of MultiSelectGroup.\"\n            //   );\n            //   return;\n            // }\n            if (child.type === MultiSelect) {\n              const props = { isBlockElement, width: multiSelectWidth };\n              newChildren.push(React.cloneElement(child, props));\n            } else {\n              newChildren.push(React.cloneElement(child));\n            }\n          }\n        }\n      );\n\n      return (\n        <Fieldset\n          id={`${id}-multiselect-group`}\n          legendText={labelText}\n          isLegendHidden={!showLabel}\n          __css={styles}\n          {...rest}\n        >\n          <Stack\n            className={className}\n            columnGap=\"xs\"\n            data-testid=\"multi-select-group\"\n            direction={finalLayout}\n            id={id}\n            ref={ref}\n            rowGap={finalLayout === \"row\" ? \"xs\" : \"0\"}\n            spacing=\"xs\"\n            wrap={layout === \"row\" ? \"wrap\" : null}\n            sx={{\n              \"> div\": {\n                _notFirst: {\n                  mx: \"0\",\n                },\n              },\n            }}\n          >\n            {newChildren}\n          </Stack>\n        </Fieldset>\n      );\n    }\n  )\n);\n\nexport default MultiSelectGroup;\n"],"names":["MultiSelectGroup","chakra","forwardRef","props","ref","children","className","id","labelText","layout","multiSelectWidth","showLabel","rest","newChildren","isLargerThanMobile","useNYPLBreakpoints","finalLayout","finallWidth","isBlockElement","styles","useMultiStyleConfig","React","child","MultiSelect","props2","jsx","Fieldset","Stack"],"mappings":"0UA8BO,MAAAA,EAAAC,EAAyBC,EAAA,WAC9B,CAAAC,EAAAC,IAAA,CAEI,KAAA,CAAM,SAAAC,EACJ,UAAAC,EAAA,GACY,GAAAC,EACZ,UAAAC,EACA,OAAAC,EAAA,MACS,iBAAAC,EAAA,UACU,UAAAC,EAAA,GACP,GAAAC,CACT,EAAAT,EAELU,EAAA,CAAA,EAEA,CAAA,mBAAAC,GAAAC,IACAC,EAAAF,EAAAL,EAAA,SACAQ,EAAAH,EAAAJ,EAAA,OACAQ,EAAAT,IAAA,SACAU,EAAAC,EAAA,mBAAA,CAAuD,MAAAH,CAC9C,CAAA,EAIT,OAAAI,EAAA,SAAA,IAAehB,EACbiB,GAAA,CAEE,GAAAD,EAAA,eAAAC,CAAA,EAQE,GAAAA,EAAA,OAAAC,EAAA,CACE,MAAAC,EAAA,CAAA,eAAAN,EAAA,MAAAR,CAAA,EACAG,EAAA,KAAAQ,EAAA,aAAAC,EAAAE,CAAA,CAAA,OAEAX,EAAA,KAAAQ,EAAA,aAAAC,CAAA,CAAA,CAEJ,CACF,EAGFG,EACEC,EAAC,CAAA,GAAA,GAAAnB,sBACQ,WAAAC,EACK,eAAA,CAAAG,EACK,MAAAQ,EACV,GAAAP,EACH,SAAAa,EAEJE,EAAC,CAAA,UAAArB,EACC,UAAA,KACU,cAAA,qBACE,UAAAU,EACD,GAAAT,EACX,IAAAH,EACA,OAAAY,IAAA,MAAA,KAAA,IACuC,QAAA,KAC/B,KAAAP,IAAA,MAAA,OAAA,KAC0B,GAAA,CAC9B,QAAA,CACO,UAAA,CACI,GAAA,GACL,CACN,CACF,EACF,SAAAI,CAEC,CAAA,CACH,CAAA,CACF,CAEJ,CAEJ"}