{"version":3,"file":"ComponentWrapper-82a15cf7.js","sources":["../../../src/components/HelperErrorText/HelperErrorText.tsx","../../../src/components/ComponentWrapper/ComponentWrapper.tsx"],"sourcesContent":["import { Box, chakra, useStyleConfig } from \"@chakra-ui/react\";\nimport React, { forwardRef } from \"react\";\n\nexport type AriaLiveValues = \"assertive\" | \"off\" | \"polite\" | undefined;\nexport type HelperErrorTextType = string | JSX.Element;\n\ninterface HelperErrorTextProps {\n  /** Aria attribute. When true, assistive technologies will read the entire\n   * DOM element. When false, only changes (additionals or removals) will be\n   * read. True by default. */\n  ariaAtomic?: boolean;\n  /** Aria attribute used to handle live updates for the helper and error text.\n   * This indicates the priority of the text and when it should be presented to\n   * users using screen readers; \"off\" indicates that the content should not be\n   * presented, \"polite\" that it will be announced at the next available time\n   * slot, and \"assertive\" that it should be announced immediately. This is set\n   * to \"polite\" by default. */\n  ariaLive?: AriaLiveValues;\n  /** Additional className to add. */\n  className?: string;\n  /** Unique ID for accessibility purposes. */\n  id?: string;\n  /** Toggles between helper and invalid styling. */\n  isInvalid?: boolean;\n  /** Offers the ability to render or not render the content passed in\n   * the `text` prop; `true` by default. */\n  isRenderedText?: boolean;\n  /** The text to display. */\n  text: HelperErrorTextType;\n}\n\n/**\n * Component that always renders a div even if the text content is not passed.\n * This pattern guarantees accessibility guidelines are met if the text content\n * is dynamically updated by the app or component that implements it.\n */\nexport const HelperErrorText = chakra(\n  forwardRef<HTMLDivElement, HelperErrorTextProps>(\n    (\n      {\n        ariaAtomic = true,\n        ariaLive = \"polite\",\n        className = \"\",\n        id,\n        isInvalid = false,\n        isRenderedText = true,\n        text,\n        ...rest\n      },\n      ref?\n    ) => {\n      const styles = useStyleConfig(\"HelperErrorText\", { isInvalid });\n      const props = {\n        \"aria-atomic\": ariaAtomic,\n        \"aria-live\": ariaLive === \"off\" ? undefined : ariaLive,\n        className,\n        \"data-isinvalid\": isInvalid,\n        id,\n        ref,\n        __css: styles,\n        ...rest,\n      };\n\n      // Always render the wrapper div element with the proper aria attributes.\n      return (\n        <Box {...props}>\n          {isRenderedText ? (\n            typeof text === \"string\" ? (\n              <span dangerouslySetInnerHTML={{ __html: text }} />\n            ) : (\n              text\n            )\n          ) : null}\n        </Box>\n      );\n    }\n  )\n);\n\nexport default HelperErrorText;\n","import { Box, chakra, useMultiStyleConfig } from \"@chakra-ui/react\";\nimport React, { forwardRef } from \"react\";\n\nimport Heading from \"../Heading/Heading\";\nimport HelperErrorText, {\n  HelperErrorTextType,\n} from \"../HelperErrorText/HelperErrorText\";\nimport Text from \"../Text/Text\";\nexport interface ComponentWrapperProps {\n  /** The UI elements that will be wrapped by this component */\n  children: React.ReactNode;\n  /** A class name for the `div` parent element. */\n  className?: string;\n  /** Optional string to set the text for the component's description */\n  descriptionText?: string | JSX.Element;\n  /** Optional string to set the text for a `Heading` component */\n  headingText?: string;\n  /** Optional string to set the text for a `HelperErrorText` component */\n  helperText?: HelperErrorTextType;\n  /** Styles that target the helper text. */\n  helperTextStyles?: { [key: string]: any };\n  /** ID that other components can cross reference for accessibility purposes */\n  id?: string;\n  /** Optional string to populate the `HelperErrorText` for the error state\n   * when `isInvalid` is true. */\n  invalidText?: HelperErrorTextType;\n  /** Sets invalid text in the error state. */\n  isInvalid?: boolean;\n  /** Offers the ability to hide the helper/invalid text. */\n  showHelperInvalidText?: boolean;\n}\n\nexport const ComponentWrapper = chakra(\n  forwardRef<HTMLDivElement, React.PropsWithChildren<ComponentWrapperProps>>(\n    (props, ref?) => {\n      const {\n        children,\n        className,\n        descriptionText,\n        headingText,\n        helperText,\n        helperTextStyles = {},\n        id,\n        invalidText,\n        isInvalid = false,\n        showHelperInvalidText = true,\n        ...rest\n      } = props;\n      const hasChildren = !!children;\n      const styles = useMultiStyleConfig(\"ComponentWrapper\", { hasChildren });\n      const footnote = isInvalid ? invalidText : helperText;\n\n      // Note: Typescript warns when there are no children passed and\n      // doesn't compile. This is meant to log in non-Typescript apps.\n      if (!hasChildren) {\n        console.warn(\n          \"NYPL Reservoir ComponentWrapper: No children were passed.\"\n        );\n      }\n\n      return (\n        <Box\n          className={className}\n          id={`${id}-wrapper`}\n          ref={ref}\n          __css={styles}\n          {...rest}\n        >\n          {headingText && <Heading id={`${id}-heading`} text={headingText} />}\n          {descriptionText && <Text>{descriptionText}</Text>}\n          {children}\n          <HelperErrorText\n            id={`${id}-helperText`}\n            isInvalid={isInvalid}\n            isRenderedText={showHelperInvalidText}\n            text={footnote}\n            __css={{ ...styles.helperErrorText, ...helperTextStyles }}\n          />\n        </Box>\n      );\n    }\n  )\n);\n\nexport default ComponentWrapper;\n"],"names":["HelperErrorText","chakra","forwardRef","ariaAtomic","ariaLive","className","id","isInvalid","isRenderedText","text","rest","ref","styles","useStyleConfig","props","jsx","Box","ComponentWrapper","children","descriptionText","headingText","helperText","helperTextStyles","invalidText","showHelperInvalidText","hasChildren","useMultiStyleConfig","footnote","jsxs","Heading","Text"],"mappings":"oRAoCO,MAAAA,EAAAC,EAAwBC,EAAA,WAC7B,CAAA,CAEI,WAAAC,EAAA,GACe,SAAAC,EAAA,SACF,UAAAC,EAAA,GACC,GAAAC,EACZ,UAAAC,EAAA,GACY,eAAAC,EAAA,GACK,KAAAC,EACjB,GAAAC,CACG,EAAAC,IAAA,CAIL,MAAAC,EAAAC,EAAA,kBAAA,CAAA,UAAAN,CAAA,CAAA,EACAO,EAAA,CAAc,cAAAX,EACG,YAAAC,IAAA,MAAA,OAAAA,EAC+B,UAAAC,EAC9C,iBAAAE,EACkB,GAAAD,EAClB,IAAAK,EACA,MAAAC,EACO,GAAAF,CACJ,EAIL,OAAAK,EAAAC,EAAA,CAAA,GAAAF,EAAA,SAAAN,EAAA,OAAAC,GAAA,SAAAM,EAAA,OAAA,CAAA,wBAAA,CAAA,OAAAN,CAAA,CAAA,CAAA,EAAAA,EAAA,IAAA,CAAA,CASE,CAEJ,CAEJ;;;;;;;;;2SC7CO,MAAAQ,EAAAhB,EAAyBC,EAAA,WAC9B,CAAAY,EAAAH,IAAA,CAEI,KAAA,CAAM,SAAAO,EACJ,UAAAb,EACA,gBAAAc,EACA,YAAAC,EACA,WAAAC,EACA,iBAAAC,EAAA,CAAA,EACoB,GAAAhB,EACpB,YAAAiB,EACA,UAAAhB,EAAA,GACY,sBAAAiB,EAAA,GACY,GAAAd,CACrB,EAAAI,EAELW,EAAA,CAAA,CAAAP,EACAN,EAAAc,EAAA,mBAAA,CAAA,YAAAD,CAAA,CAAA,EACAE,EAAApB,EAAAgB,EAAAF,EAIA,OAAAI,GACE,QAAA,KAAQ,2DACN,EAIJG,EACEZ,EAAC,CAAA,UAAAX,EACC,GAAA,GAAAC,YACO,IAAAK,EACP,MAAAC,EACO,GAAAF,EACH,SAAA,CAEHU,GAAAL,EAAAc,EAAA,CAAA,GAAA,GAAAvB,YAAA,KAAAc,EAAA,EAAgED,GAAAJ,EAAAe,EAAA,CAAA,SAAAX,CAAA,CAAA,EACtBD,EAC1CH,EACDf,EAAC,CAAA,GAAA,GAAAM,eACQ,UAAAC,EACP,eAAAiB,EACgB,KAAAG,EACV,MAAA,CAAA,GAAAf,EAAA,gBAAA,GAAAU,CAAA,CACkD,CAAA,CAC1D,CAAA,CAAA,CACF,CAEJ,CAEJ"}