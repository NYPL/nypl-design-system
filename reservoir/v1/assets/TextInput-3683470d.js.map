{"version":3,"file":"TextInput-3683470d.js","sources":["../../../node_modules/@chakra-ui/input/dist/chakra-ui-input.esm.js","../../../node_modules/@chakra-ui/textarea/dist/chakra-ui-textarea.esm.js","../../../src/hooks/useStateWithDependencies.ts","../../../src/components/TextInput/TextInput.tsx"],"sourcesContent":["import { useFormControl } from '@chakra-ui/form-control';\nimport { forwardRef, useMultiStyleConfig, omitThemingProps, chakra, useStyles, StylesProvider } from '@chakra-ui/system';\nimport { cx, __DEV__, filterUndefined } from '@chakra-ui/utils';\nimport * as React from 'react';\nimport { getValidChildren } from '@chakra-ui/react-utils';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar _excluded$3 = [\"htmlSize\"];\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n */\nvar Input = /*#__PURE__*/forwardRef(function (props, ref) {\n  var htmlSize = props.htmlSize,\n      rest = _objectWithoutPropertiesLoose(props, _excluded$3);\n\n  var styles = useMultiStyleConfig(\"Input\", rest);\n  var ownProps = omitThemingProps(rest);\n  var input = useFormControl(ownProps);\n\n  var _className = cx(\"chakra-input\", props.className);\n\n  return /*#__PURE__*/React.createElement(chakra.input, _extends({\n    size: htmlSize\n  }, input, {\n    __css: styles.field,\n    ref: ref,\n    className: _className\n  }));\n});\n\nif (__DEV__) {\n  Input.displayName = \"Input\";\n} // This is used in `input-group.tsx`\n\n\nInput.id = \"Input\";\n\nvar _excluded$2 = [\"placement\"];\nvar placements = {\n  left: {\n    marginEnd: \"-1px\",\n    borderEndRadius: 0,\n    borderEndColor: \"transparent\"\n  },\n  right: {\n    marginStart: \"-1px\",\n    borderStartRadius: 0,\n    borderStartColor: \"transparent\"\n  }\n};\nvar StyledAddon = chakra(\"div\", {\n  baseStyle: {\n    flex: \"0 0 auto\",\n    width: \"auto\",\n    display: \"flex\",\n    alignItems: \"center\",\n    whiteSpace: \"nowrap\"\n  }\n});\n\n/**\n * InputAddon\n *\n * Element to append or prepend to an input\n */\nvar InputAddon = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _placements$placement;\n\n  var _props$placement = props.placement,\n      placement = _props$placement === void 0 ? \"left\" : _props$placement,\n      rest = _objectWithoutPropertiesLoose(props, _excluded$2);\n\n  var placementStyles = (_placements$placement = placements[placement]) != null ? _placements$placement : {};\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(StyledAddon, _extends({\n    ref: ref\n  }, rest, {\n    __css: _extends({}, styles.addon, placementStyles)\n  }));\n});\n\nif (__DEV__) {\n  InputAddon.displayName = \"InputAddon\";\n}\n/**\n * InputLeftAddon\n *\n * Element to append to the left of an input\n */\n\n\nvar InputLeftAddon = /*#__PURE__*/forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(InputAddon, _extends({\n    ref: ref,\n    placement: \"left\"\n  }, props, {\n    className: cx(\"chakra-input__left-addon\", props.className)\n  }));\n});\n\nif (__DEV__) {\n  InputLeftAddon.displayName = \"InputLeftAddon\";\n} // This is used in `input-group.tsx`\n\n\nInputLeftAddon.id = \"InputLeftAddon\";\n/**\n * InputRightAddon\n *\n * Element to append to the right of an input\n */\n\nvar InputRightAddon = /*#__PURE__*/forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(InputAddon, _extends({\n    ref: ref,\n    placement: \"right\"\n  }, props, {\n    className: cx(\"chakra-input__right-addon\", props.className)\n  }));\n});\n\nif (__DEV__) {\n  InputRightAddon.displayName = \"InputRightAddon\";\n} // This is used in `input-group.tsx`\n\n\nInputRightAddon.id = \"InputRightAddon\";\n\nvar _excluded$1 = [\"children\", \"className\"];\nvar InputGroup = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useMultiStyleConfig(\"Input\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      children = _omitThemingProps.children,\n      className = _omitThemingProps.className,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, _excluded$1);\n\n  var _className = cx(\"chakra-input__group\", className);\n\n  var groupStyles = {};\n  var validChildren = getValidChildren(children);\n  var input = styles.field;\n  validChildren.forEach(function (child) {\n    if (!styles) return;\n\n    if (input && child.type.id === \"InputLeftElement\") {\n      var _input$height;\n\n      groupStyles.paddingStart = (_input$height = input.height) != null ? _input$height : input.h;\n    }\n\n    if (input && child.type.id === \"InputRightElement\") {\n      var _input$height2;\n\n      groupStyles.paddingEnd = (_input$height2 = input.height) != null ? _input$height2 : input.h;\n    }\n\n    if (child.type.id === \"InputRightAddon\") {\n      groupStyles.borderEndRadius = 0;\n    }\n\n    if (child.type.id === \"InputLeftAddon\") {\n      groupStyles.borderStartRadius = 0;\n    }\n  });\n  var clones = validChildren.map(function (child) {\n    var _child$props, _child$props2;\n\n    /**\n     * Make it possible to override the size and variant from `Input`\n     */\n    var theming = filterUndefined({\n      size: ((_child$props = child.props) == null ? void 0 : _child$props.size) || props.size,\n      variant: ((_child$props2 = child.props) == null ? void 0 : _child$props2.variant) || props.variant\n    });\n    return child.type.id !== \"Input\" ? /*#__PURE__*/React.cloneElement(child, theming) : /*#__PURE__*/React.cloneElement(child, Object.assign(theming, groupStyles, child.props));\n  });\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: _className,\n    ref: ref,\n    __css: {\n      width: \"100%\",\n      display: \"flex\",\n      position: \"relative\"\n    }\n  }, rest), /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, clones));\n});\n\nif (__DEV__) {\n  InputGroup.displayName = \"InputGroup\";\n}\n\nvar _excluded = [\"placement\"],\n    _excluded2 = [\"className\"],\n    _excluded3 = [\"className\"];\nvar StyledElement = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\",\n    top: \"0\",\n    zIndex: 2\n  }\n});\nvar InputElement = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _input$height, _input$height2, _extends2;\n\n  var _props$placement = props.placement,\n      placement = _props$placement === void 0 ? \"left\" : _props$placement,\n      rest = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var styles = useStyles();\n  var input = styles.field;\n  var attr = placement === \"left\" ? \"insetStart\" : \"insetEnd\";\n\n  var elementStyles = _extends((_extends2 = {}, _extends2[attr] = \"0\", _extends2.width = (_input$height = input == null ? void 0 : input.height) != null ? _input$height : input == null ? void 0 : input.h, _extends2.height = (_input$height2 = input == null ? void 0 : input.height) != null ? _input$height2 : input == null ? void 0 : input.h, _extends2.fontSize = input == null ? void 0 : input.fontSize, _extends2), styles.element);\n\n  return /*#__PURE__*/React.createElement(StyledElement, _extends({\n    ref: ref,\n    __css: elementStyles\n  }, rest));\n}); // This is used in `input-group.tsx`\n\nInputElement.id = \"InputElement\";\n\nif (__DEV__) {\n  InputElement.displayName = \"InputElement\";\n}\n\nvar InputLeftElement = /*#__PURE__*/forwardRef(function (props, ref) {\n  var className = props.className,\n      rest = _objectWithoutPropertiesLoose(props, _excluded2);\n\n  var _className = cx(\"chakra-input__left-element\", className);\n\n  return /*#__PURE__*/React.createElement(InputElement, _extends({\n    ref: ref,\n    placement: \"left\",\n    className: _className\n  }, rest));\n}); // This is used in `input-group.tsx`\n\nInputLeftElement.id = \"InputLeftElement\";\n\nif (__DEV__) {\n  InputLeftElement.displayName = \"InputLeftElement\";\n}\n\nvar InputRightElement = /*#__PURE__*/forwardRef(function (props, ref) {\n  var className = props.className,\n      rest = _objectWithoutPropertiesLoose(props, _excluded3);\n\n  var _className = cx(\"chakra-input__right-element\", className);\n\n  return /*#__PURE__*/React.createElement(InputElement, _extends({\n    ref: ref,\n    placement: \"right\",\n    className: _className\n  }, rest));\n}); // This is used in `input-group.tsx`\n\nInputRightElement.id = \"InputRightElement\";\n\nif (__DEV__) {\n  InputRightElement.displayName = \"InputRightElement\";\n}\n\nexport { Input, InputAddon, InputGroup, InputLeftAddon, InputLeftElement, InputRightAddon, InputRightElement };\n","import { useFormControl } from '@chakra-ui/form-control';\nimport { forwardRef, useStyleConfig, omitThemingProps, chakra } from '@chakra-ui/system';\nimport { omit, cx, __DEV__ } from '@chakra-ui/utils';\nimport * as React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar _excluded = [\"className\", \"rows\"];\n\n/**\n * Textarea is used to enter an amount of text that's longer than a single line\n * @see Docs https://chakra-ui.com/textarea\n */\nvar Textarea = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useStyleConfig(\"Textarea\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      className = _omitThemingProps.className,\n      rows = _omitThemingProps.rows,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, _excluded);\n\n  var textareaProps = useFormControl(rest);\n  var omitted = [\"h\", \"minH\", \"height\", \"minHeight\"];\n  var textareaStyles = rows ? omit(styles, omitted) : styles;\n  return /*#__PURE__*/React.createElement(chakra.textarea, _extends({\n    ref: ref,\n    rows: rows\n  }, textareaProps, {\n    className: cx(\"chakra-textarea\", className),\n    __css: textareaStyles\n  }));\n});\n\nif (__DEV__) {\n  Textarea.displayName = \"Textarea\";\n}\n\nexport { Textarea };\n","import { useEffect, useState } from \"react\";\n\n/**\n * DS internal helper hook to use state with prop dependencies.\n */\nfunction useStateWithDependencies(initialValue: any): typeof initialValue {\n  const [value, setValue] = useState(initialValue);\n\n  useEffect(() => {\n    setValue(initialValue);\n  }, [initialValue]);\n\n  return [value, setValue];\n}\n\nexport default useStateWithDependencies;\n","import {\n  Box,\n  chakra,\n  Input as ChakraInput,\n  Textarea as ChakraTextarea,\n  useMergeRefs,\n  useMultiStyleConfig,\n} from \"@chakra-ui/react\";\nimport React, { forwardRef, useRef } from \"react\";\n\nimport ComponentWrapper from \"../ComponentWrapper/ComponentWrapper\";\nimport Label from \"../Label/Label\";\nimport { HelperErrorTextType } from \"../HelperErrorText/HelperErrorText\";\nimport useStateWithDependencies from \"../../hooks/useStateWithDependencies\";\nimport { getAriaAttrs } from \"../../utils/utils\";\nimport Button from \"../Button/Button\";\nimport Icon from \"../Icons/Icon\";\n\nexport const textInputTypesArray = [\n  \"email\",\n  \"hidden\",\n  \"number\",\n  \"password\",\n  \"text\",\n  \"textarea\",\n  \"tel\",\n  \"url\",\n] as const;\n// HTML Input types as defined by MDN: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\nexport type TextInputTypes = typeof textInputTypesArray[number];\n\n// Only used internally.\nexport const TextInputFormats = {\n  email: \"jdoe@domain.com\",\n  hidden: \"\",\n  password: \"\",\n  text: \"\",\n  tel: \"(123) 123-1234\",\n  textarea: \"\",\n  url: \"https://domain.com\",\n};\n\n// Only used internally in `TextInput` and `SearchBar`.\nexport type TextInputVariants = \"default\" | \"searchBar\" | \"searchBarSelect\";\n\nexport interface InputProps {\n  /** A class name for the TextInput parent div. */\n  className?: string;\n  /** The starting value of the input field. */\n  defaultValue?: string;\n  /** Populates the HelperErrorText for the standard state */\n  helperText?: HelperErrorTextType;\n  /** ID that other components can cross reference for accessibility purposes */\n  id: string;\n  /** Populates the HelperErrorText for the error state */\n  invalidText?: HelperErrorTextType;\n  /** Adds a button to clear existing text in the input field. */\n  isClearable?: boolean;\n  /** The callback function that is called when the clear button is clicked. */\n  isClearableCallback?: () => void;\n  /** Adds the `disabled` and `aria-disabled` prop to the input when true */\n  isDisabled?: boolean;\n  /** Adds errored styling to the input/textarea and helper text elements */\n  isInvalid?: boolean;\n  /** Will add `required` and `aria-required` props to the input/textarea elements */\n  isRequired?: boolean;\n  /** Provides text for a `Label` component if `showLabel` is set to true;\n   * populates an `aria-label` attribute if `showLabel` is set to false. */\n  labelText: string;\n  /** The max number for a `number` TextInput type. */\n  max?: number;\n  /** The max length of the input field. This prop is for all input types\n   * except for the `number` type. */\n  maxLength?: number;\n  /** The min number for a `number` TextInput type. */\n  min?: number;\n  /** Used to reference the input element in forms. */\n  name?: string;\n  /** The action to perform on the `input`/`textarea`'s onChange function  */\n  onChange?: (\n    event:\n      | React.ChangeEvent<HTMLInputElement>\n      | React.ChangeEvent<HTMLTextAreaElement>\n  ) => void;\n  /** The action to perform on the `input`/`textarea`'s onClick function  */\n  onClick?: (event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void;\n  /** The action to perform on the `input`/`textarea`'s onFocus function  */\n  onFocus?: (event: React.FocusEvent<HTMLInputElement>) => void;\n  /** Regex to query the user input against. */\n  pattern?: string;\n  /** Populates the placeholder for the input/textarea elements */\n  placeholder?: string;\n  /** Allows the '(Required)' text to be changed for language purposes\n   * Note: Parenthesis will be added automatically by the component */\n  requiredLabelText?: string;\n  /** Offers the ability to hide the helper/invalid text. */\n  showHelperInvalidText?: boolean;\n  /** Offers the ability to show the label onscreen or hide it. Refer to the\n   * `labelText` property for more information. */\n  showLabel?: boolean;\n  /** Whether or not to display the \"(Required)\" text in the label text.\n   * True by default. */\n  showRequiredLabel?: boolean;\n  /** The amount to increase or decrease when using the number type. */\n  step?: number;\n  /** FOR INTERNAL DS USE ONLY: the input variant to display. */\n  textInputType?: TextInputVariants;\n  /** HTML Input types as defined by MDN: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input */\n  type?: TextInputTypes;\n  /** Populates the value of the input/textarea elements */\n  value?: string;\n}\n\n/**\n * The type used for `ref`s. We want to extend both `input` and `textarea`\n * since both are available to create through `TextInput`.\n */\nexport type TextInputRefType = HTMLInputElement & HTMLTextAreaElement;\n\n/**\n * Renders either an `input` element with a specified type or a `textarea`\n * element. All types will render an accessible `Label` component and an\n * optional `HelperErrorText` component.\n */\nexport const TextInput = chakra(\n  forwardRef<TextInputRefType, InputProps>(\n    (props, ref: React.Ref<TextInputRefType>) => {\n      const {\n        className,\n        defaultValue,\n        helperText,\n        id,\n        invalidText,\n        isClearable = false,\n        isClearableCallback,\n        isDisabled = false,\n        isInvalid = false,\n        isRequired = false,\n        labelText,\n        max,\n        maxLength,\n        min,\n        name,\n        onChange,\n        onClick,\n        onFocus,\n        pattern,\n        placeholder,\n        showHelperInvalidText = true,\n        showLabel = true,\n        showRequiredLabel = true,\n        requiredLabelText,\n        step = 1,\n        textInputType = \"default\",\n        type = \"text\",\n        value,\n        ...rest\n      } = props;\n      const [finalValue, setFinalValue] = useStateWithDependencies(value);\n      const closedRef = useRef<HTMLInputElement>();\n      const mergedRefs = useMergeRefs(closedRef, ref);\n      // If a ref is not passed, then merging refs won't work.\n      const finalRef = ref ? mergedRefs : closedRef;\n      const styles = useMultiStyleConfig(\"TextInput\", {\n        showLabel,\n        variant: textInputType,\n      });\n      const isTextArea = type === \"textarea\";\n      const isHidden = type === \"hidden\";\n      let hasAutocomplete = false;\n      const finalInvalidText = invalidText\n        ? invalidText\n        : \"There is an error related to this field.\";\n      const internalOnChange = (\n        e:\n          | React.ChangeEvent<HTMLInputElement>\n          | React.ChangeEvent<HTMLTextAreaElement>\n      ) => {\n        setFinalValue(e.target.value);\n        onChange && onChange(e);\n      };\n      let footnote: HelperErrorTextType = isInvalid\n        ? finalInvalidText\n        : helperText;\n\n      if (type === \"tel\" || type === \"url\" || type === \"email\") {\n        hasAutocomplete = true;\n        const example = TextInputFormats[type] || \"\";\n        footnote = (\n          <>\n            Ex: {example}\n            <br />\n            {footnote}\n          </>\n        );\n      }\n\n      const ariaAttributes = getAriaAttrs({\n        footnote,\n        id,\n        labelText,\n        name: \"TextInput\",\n        showLabel,\n      });\n\n      const onClearClick = () => {\n        setFinalValue(\"\");\n        isClearableCallback && isClearableCallback();\n        // Set focus back to the input element.\n        (finalRef as any).current.focus();\n      };\n      let finalIsInvalid = isInvalid;\n      let fieldOutput;\n      let clearButtonOutput;\n      let options;\n\n      if (!id) {\n        console.warn(\n          \"NYPL Reservoir TextInput: This component's required `id` prop was not passed.\"\n        );\n      }\n\n      if (type === \"number\" && max && min && min > max) {\n        finalIsInvalid = true;\n        console.warn(\n          \"NYPL Reservoir TextInput: The `min` prop is greater than the `max` prop.\"\n        );\n      }\n      // When the type is \"hidden\", the input element needs fewer attributes.\n      options = isHidden\n        ? {\n            defaultValue,\n            id,\n            \"aria-hidden\": isHidden,\n            name,\n            onChange: internalOnChange,\n            ref: finalRef,\n          }\n        : {\n            \"aria-required\": isRequired,\n            autoComplete: hasAutocomplete ? type : null,\n            defaultValue,\n            id,\n            isDisabled,\n            isRequired,\n            isInvalid: finalIsInvalid,\n            max,\n            maxLength,\n            min,\n            name,\n            onChange: internalOnChange,\n            onClick,\n            onFocus,\n            pattern,\n            placeholder,\n            ref: finalRef,\n            // The `step` attribute is useful for the number type.\n            step: type === \"number\" ? step : null,\n            ...ariaAttributes,\n            ...rest,\n          };\n      // For `input` and `textarea`, all attributes are the same but `input`\n      // also needs `type` and `value` to render correctly.\n      if (!isTextArea) {\n        options = { type, value: finalValue, ...options } as any;\n        fieldOutput = <ChakraInput {...options} __css={styles.input} />;\n        if (isClearable && !isHidden) {\n          clearButtonOutput = (\n            <Button\n              buttonType=\"text\"\n              id={`${id}-clear-btn`}\n              onClick={onClearClick}\n              sx={styles.clearButton}\n            >\n              <Icon color=\"ui.black\" name=\"close\" size=\"medium\" />\n              <span>Clear {labelText}</span>\n            </Button>\n          );\n        }\n      } else {\n        if (isClearable) {\n          console.warn(\n            \"NYPL Reservoir TextInput: The `isClearable` prop cannot be used with the `textarea` type.\"\n          );\n        }\n        fieldOutput = (\n          <ChakraTextarea {...options} __css={styles.textarea}>\n            {value}\n          </ChakraTextarea>\n        );\n      }\n\n      return (\n        <ComponentWrapper\n          className={className}\n          helperText={!finalIsInvalid ? footnote : helperText}\n          id={id}\n          invalidText={finalInvalidText}\n          isInvalid={finalIsInvalid}\n          showHelperInvalidText={showHelperInvalidText && !isHidden}\n          __css={styles}\n          {...rest}\n        >\n          {labelText && showLabel && !isHidden && (\n            <Label\n              htmlFor={id}\n              id={`${id}-label`}\n              isRequired={showRequiredLabel && isRequired}\n              requiredLabelText={requiredLabelText}\n            >\n              {labelText}\n            </Label>\n          )}\n          <Box position=\"relative\">\n            {fieldOutput}\n            {!isHidden && finalValue?.length > 0 && clearButtonOutput}\n          </Box>\n        </ComponentWrapper>\n      );\n    }\n  )\n);\n\nexport default TextInput;\n"],"names":["_extends","target","i","source","key","_objectWithoutPropertiesLoose","excluded","sourceKeys","_excluded$3","Input","forwardRef","props","ref","htmlSize","rest","styles","useMultiStyleConfig","ownProps","omitThemingProps","input","useFormControl","_className","cx","React.createElement","chakra","_excluded$2","placements","StyledAddon","InputAddon","_placements$placement","_props$placement","placement","placementStyles","useStyles","InputLeftAddon","InputRightAddon","_excluded","_excluded2","_excluded3","StyledElement","InputElement","_input$height","_input$height2","_extends2","attr","elementStyles","InputLeftElement","className","InputRightElement","Textarea","useStyleConfig","_omitThemingProps","rows","textareaProps","omitted","textareaStyles","omit","useStateWithDependencies","initialValue","value","setValue","useState","useEffect","textInputTypesArray","TextInputFormats","TextInput","defaultValue","helperText","id","invalidText","isClearable","isClearableCallback","isDisabled","isInvalid","isRequired","labelText","max","maxLength","min","name","onChange","onClick","onFocus","pattern","placeholder","showHelperInvalidText","showLabel","showRequiredLabel","requiredLabelText","step","textInputType","type","finalValue","setFinalValue","closedRef","useRef","mergedRefs","useMergeRefs","finalRef","isTextArea","isHidden","hasAutocomplete","finalInvalidText","internalOnChange","e","footnote","example","jsxs","Fragment","jsx","ariaAttributes","getAriaAttrs","onClearClick","finalIsInvalid","fieldOutput","clearButtonOutput","options","ChakraTextarea","ChakraInput","Button","Icon","ComponentWrapper","Label","Box"],"mappings":"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","x_google_ignoreList":[0,1]}