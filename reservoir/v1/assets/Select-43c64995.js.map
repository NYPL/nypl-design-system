{"version":3,"file":"Select-43c64995.js","sources":["../../../node_modules/@chakra-ui/select/dist/chakra-ui-select.esm.js","../../../src/components/Select/Select.tsx"],"sourcesContent":["import { useFormControl } from '@chakra-ui/form-control';\nimport { forwardRef, chakra, useMultiStyleConfig, omitThemingProps, layoutPropNames } from '@chakra-ui/system';\nimport { cx, __DEV__, split, mergeWith, dataAttr } from '@chakra-ui/utils';\nimport * as React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar _excluded = [\"children\", \"placeholder\", \"className\"],\n    _excluded2 = [\"rootProps\", \"placeholder\", \"icon\", \"color\", \"height\", \"h\", \"minH\", \"minHeight\", \"iconColor\", \"iconSize\", \"isFullWidth\"],\n    _excluded3 = [\"children\"];\nvar SelectField = /*#__PURE__*/forwardRef(function (props, ref) {\n  var children = props.children,\n      placeholder = props.placeholder,\n      className = props.className,\n      rest = _objectWithoutPropertiesLoose(props, _excluded);\n\n  return /*#__PURE__*/React.createElement(chakra.select, _extends({}, rest, {\n    ref: ref,\n    className: cx(\"chakra-select\", className)\n  }), placeholder && /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\"\n  }, placeholder), children);\n});\n\nif (__DEV__) {\n  SelectField.displayName = \"SelectField\";\n}\n\n/**\n * React component used to select one item from a list of options.\n */\nvar Select = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useMultiStyleConfig(\"Select\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      rootProps = _omitThemingProps.rootProps,\n      placeholder = _omitThemingProps.placeholder,\n      icon = _omitThemingProps.icon,\n      color = _omitThemingProps.color,\n      height = _omitThemingProps.height,\n      h = _omitThemingProps.h,\n      minH = _omitThemingProps.minH,\n      minHeight = _omitThemingProps.minHeight,\n      iconColor = _omitThemingProps.iconColor,\n      iconSize = _omitThemingProps.iconSize;\n      _omitThemingProps.isFullWidth;\n      var rest = _objectWithoutPropertiesLoose(_omitThemingProps, _excluded2);\n\n  var _split = split(rest, layoutPropNames),\n      layoutProps = _split[0],\n      otherProps = _split[1];\n\n  var ownProps = useFormControl(otherProps);\n  var rootStyles = {\n    width: \"100%\",\n    height: \"fit-content\",\n    position: \"relative\",\n    color: color\n  };\n  var fieldStyles = mergeWith({\n    paddingEnd: \"2rem\"\n  }, styles.field, {\n    _focus: {\n      zIndex: \"unset\"\n    }\n  });\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: \"chakra-select__wrapper\",\n    __css: rootStyles\n  }, layoutProps, rootProps), /*#__PURE__*/React.createElement(SelectField, _extends({\n    ref: ref,\n    height: h != null ? h : height,\n    minH: minH != null ? minH : minHeight,\n    placeholder: placeholder\n  }, ownProps, {\n    __css: fieldStyles\n  }), props.children), /*#__PURE__*/React.createElement(SelectIcon, _extends({\n    \"data-disabled\": dataAttr(ownProps.disabled)\n  }, (iconColor || color) && {\n    color: iconColor || color\n  }, {\n    __css: styles.icon\n  }, iconSize && {\n    fontSize: iconSize\n  }), icon));\n});\n\nif (__DEV__) {\n  Select.displayName = \"Select\";\n}\n\nvar DefaultIcon = function DefaultIcon(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 24 24\"\n  }, props), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n  }));\n};\nvar IconWrapper = chakra(\"div\", {\n  baseStyle: {\n    position: \"absolute\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    pointerEvents: \"none\",\n    top: \"50%\",\n    transform: \"translateY(-50%)\"\n  }\n});\n\nvar SelectIcon = function SelectIcon(props) {\n  var _props$children = props.children,\n      children = _props$children === void 0 ? /*#__PURE__*/React.createElement(DefaultIcon, null) : _props$children,\n      rest = _objectWithoutPropertiesLoose(props, _excluded3);\n\n  var clone = /*#__PURE__*/React.cloneElement(children, {\n    role: \"presentation\",\n    className: \"chakra-select__icon\",\n    focusable: false,\n    \"aria-hidden\": true,\n    // force icon to adhere to `IconWrapper` styles\n    style: {\n      width: \"1em\",\n      height: \"1em\",\n      color: \"currentColor\"\n    }\n  });\n  return /*#__PURE__*/React.createElement(IconWrapper, _extends({}, rest, {\n    className: \"chakra-select__icon-wrapper\"\n  }), /*#__PURE__*/React.isValidElement(children) ? clone : null);\n};\n\nif (__DEV__) {\n  SelectIcon.displayName = \"SelectIcon\";\n}\n\nexport { DefaultIcon, Select, SelectField };\n","import {\n  Box,\n  chakra,\n  Select as ChakraSelect,\n  useColorModeValue,\n  useMultiStyleConfig,\n} from \"@chakra-ui/react\";\nimport React, { forwardRef, useEffect, useState, useRef } from \"react\";\n\nimport ComponentWrapper from \"../ComponentWrapper/ComponentWrapper\";\nimport { HelperErrorTextType } from \"../HelperErrorText/HelperErrorText\";\nimport Icon from \"../Icons/Icon\";\nimport Label from \"../Label/Label\";\nimport { getAriaAttrs } from \"../../utils/utils\";\n\nexport const selectTypesArray = [\"default\", \"searchbar\"];\nexport const labelPositionsArray = [\"default\", \"inline\"];\nexport type SelectTypes = typeof selectTypesArray[number];\nexport type LabelPositions = typeof labelPositionsArray[number];\n\nexport interface SelectProps {\n  /** A class name for the `div` parent element. */\n  className?: string;\n  /** Optional string to populate the `HelperErrorText` for the standard state. */\n  helperText?: HelperErrorTextType;\n  /** ID that other components can cross reference for accessibility purposes */\n  id: string;\n  /** Optional string to populate the `HelperErrorText` for the error state\n   * when `isInvalid` is true. */\n  invalidText?: HelperErrorTextType;\n  /** Adds the `disabled` and `aria-disabled` attributes to the select when true */\n  isDisabled?: boolean;\n  /** Adds the `aria-invalid` attribute to the select when true. This also makes\n   * the color theme \"NYPL error\" red for the select and text. */\n  isInvalid?: boolean;\n  /** Adds the `required` and `aria-required` attributes to the input when true. */\n  isRequired?: boolean;\n  /** Optional value to render the label inline, rather than the default (on top)\n   * of the select element. */\n  labelPosition?: LabelPositions;\n  /** Provides text for a `Label` component if `showLabel` is set to `true`;\n   * populates an `aria-label` attribute on the select input if `showLabel` is\n   * set to `false`. */\n  labelText: string;\n  /** Used to reference the select element in forms. */\n  name: string;\n  /** The callback function to get the selected value.\n   * Should be passed along with `value` for controlled components. */\n  onChange?: (event: React.FormEvent) => void;\n  /** Placeholder text in the select element. */\n  placeholder?: string;\n  /** The variant to display. */\n  selectType?: SelectTypes;\n  /** Offers the ability to hide the helper/invalid text. */\n  showHelperInvalidText?: boolean;\n  /** Offers the ability to show the select's label onscreen or hide it. Refer\n   * to the `labelText` property for more information. */\n  showLabel?: boolean;\n  /** Whether or not to display the \"(Required)\" text in the label text.\n   * True by default. */\n  showRequiredLabel?: boolean;\n  /** The value of the selected option.\n   * Should be passed along with `onChange` for controlled components. */\n  value?: string;\n}\n\n/**\n * Component that renders Chakra's `Select` component along with an accessible\n * `Label` and optional `HelperErrorText` component.\n */\nexport const Select = chakra(\n  forwardRef<HTMLSelectElement, React.PropsWithChildren<SelectProps>>(\n    (props: React.PropsWithChildren<SelectProps>, ref?) => {\n      const {\n        children,\n        className,\n        helperText,\n        id,\n        invalidText,\n        isDisabled = false,\n        isInvalid = false,\n        isRequired = false,\n        labelPosition = \"default\",\n        labelText,\n        name,\n        onChange,\n        placeholder,\n        selectType = \"default\",\n        showHelperInvalidText = true,\n        showLabel = true,\n        showRequiredLabel = true,\n        value = \"\",\n        ...rest\n      } = props;\n      const [labelWidth, setLabelWidth] = useState<number>(0);\n      const labelRef = useRef<HTMLDivElement>(null);\n      const styles = useMultiStyleConfig(\"CustomSelect\", {\n        variant: selectType,\n        labelPosition,\n      });\n      const finalInvalidText = invalidText\n        ? invalidText\n        : \"There is an error related to this field.\";\n      const footnote = isInvalid ? finalInvalidText : helperText;\n      const ariaAttributes = getAriaAttrs({\n        footnote,\n        id,\n        labelText,\n        name: \"Select\",\n        showLabel,\n      });\n      // To control the `Select` component, both `onChange` and `value`\n      // must be passed.\n      const controlledProps = onChange ? { onChange, value } : {};\n\n      // The number of pixels between the label and select elements\n      // when the labelPosition is inline (equivalent to --nypl-space-xs).\n      const labelSelectGap = 8;\n\n      // Set the color of the dropdown arrow based on the color mode.\n      const arrowColor = useColorModeValue(\n        isInvalid ? \"ui.error.primary\" : \"ui.black\",\n        isInvalid ? \"dark.ui.error.primary\" : \"dark.ui.typography.body\"\n      );\n\n      if (!id) {\n        console.warn(\n          \"NYPL Reservoir Select: This component's required `id` prop was not passed.\"\n        );\n      }\n\n      useEffect(() => {\n        if (labelPosition === \"inline\") {\n          if (labelRef.current) {\n            const width = labelRef.current.clientWidth + labelSelectGap;\n            setLabelWidth(width);\n          }\n        } else {\n          setLabelWidth(0);\n        }\n      }, [labelPosition]);\n\n      return (\n        <ComponentWrapper\n          className={className}\n          helperText={helperText}\n          helperTextStyles={{\n            marginStart: { sm: \"auto\", md: `${labelWidth}px` },\n          }}\n          id={id}\n          invalidText={finalInvalidText}\n          isInvalid={isInvalid}\n          showHelperInvalidText={showHelperInvalidText}\n          __css={styles}\n          {...rest}\n        >\n          <Box __css={labelPosition === \"inline\" && styles.inline}>\n            {showLabel && (\n              <Box ref={labelRef}>\n                <Label\n                  htmlFor={id}\n                  id={`${id}-label`}\n                  isInlined\n                  isRequired={showRequiredLabel && isRequired}\n                >\n                  {labelText}\n                </Label>\n              </Box>\n            )}\n            <ChakraSelect\n              id={id}\n              variant=\"outline\"\n              isRequired={isRequired}\n              isDisabled={isDisabled}\n              isInvalid={isInvalid}\n              name={name}\n              placeholder={placeholder}\n              ref={ref}\n              {...controlledProps}\n              {...ariaAttributes}\n              icon={\n                <Icon\n                  color={arrowColor}\n                  id={`${id}-icon`}\n                  name=\"arrow\"\n                  size=\"medium\"\n                />\n              }\n              __css={styles.select}\n            >\n              {children}\n            </ChakraSelect>\n          </Box>\n        </ComponentWrapper>\n      );\n    }\n  )\n);\n\nexport default Select;\n"],"names":["_extends","target","i","source","key","_objectWithoutPropertiesLoose","excluded","sourceKeys","_excluded","_excluded2","_excluded3","SelectField","forwardRef","props","ref","children","placeholder","className","rest","React.createElement","chakra","cx","Select","styles","useMultiStyleConfig","_omitThemingProps","omitThemingProps","rootProps","icon","color","height","h","minH","minHeight","iconColor","iconSize","_split","split","layoutPropNames","layoutProps","otherProps","ownProps","useFormControl","rootStyles","fieldStyles","mergeWith","SelectIcon","dataAttr","DefaultIcon","IconWrapper","_props$children","clone","React.cloneElement","React.isValidElement","labelPositionsArray","helperText","id","invalidText","isDisabled","isInvalid","isRequired","labelPosition","labelText","name","onChange","selectType","showHelperInvalidText","showLabel","showRequiredLabel","value","labelWidth","setLabelWidth","useState","labelRef","useRef","finalInvalidText","ariaAttributes","getAriaAttrs","controlledProps","labelSelectGap","arrowColor","useColorModeValue","useEffect","width","jsx","ComponentWrapper","jsxs","Box","Label","ChakraSelect","Icon"],"mappings":"2dAKA,SAASA,GAAW,CAClB,OAAAA,EAAW,OAAO,QAAU,SAAUC,EAAQ,CAC5C,QAASC,EAAI,EAAGA,EAAI,UAAU,OAAQA,IAAK,CACzC,IAAIC,EAAS,UAAUD,CAAC,EAExB,QAASE,KAAOD,EACV,OAAO,UAAU,eAAe,KAAKA,EAAQC,CAAG,IAClDH,EAAOG,CAAG,EAAID,EAAOC,CAAG,GAK9B,OAAOH,CACX,EAESD,EAAS,MAAM,KAAM,SAAS,CACvC,CAEA,SAASK,EAA8BF,EAAQG,EAAU,CACvD,GAAIH,GAAU,KAAM,MAAO,GAC3B,IAAIF,EAAS,CAAA,EACTM,EAAa,OAAO,KAAKJ,CAAM,EAC/BC,EAAKF,EAET,IAAKA,EAAI,EAAGA,EAAIK,EAAW,OAAQL,IACjCE,EAAMG,EAAWL,CAAC,EACd,EAAAI,EAAS,QAAQF,CAAG,GAAK,KAC7BH,EAAOG,CAAG,EAAID,EAAOC,CAAG,GAG1B,OAAOH,CACT,CAEA,IAAIO,EAAY,CAAC,WAAY,cAAe,WAAW,EACnDC,GAAa,CAAC,YAAa,cAAe,OAAQ,QAAS,SAAU,IAAK,OAAQ,YAAa,YAAa,WAAY,aAAa,EACrIC,GAAa,CAAC,UAAU,EACxBC,GAA2BC,EAAW,SAAUC,EAAOC,EAAK,CAC9D,IAAIC,EAAWF,EAAM,SACjBG,EAAcH,EAAM,YACpBI,EAAYJ,EAAM,UAClBK,EAAOb,EAA8BQ,EAAOL,CAAS,EAEzD,OAAoBW,EAAAA,cAAoBC,EAAO,OAAQpB,EAAS,CAAA,EAAIkB,EAAM,CACxE,IAAKJ,EACL,UAAWO,EAAG,gBAAiBJ,CAAS,CAC5C,CAAG,EAAGD,GAA4BG,EAAmB,cAAC,SAAU,CAC5D,MAAO,EACX,EAAKH,CAAW,EAAGD,CAAQ,CAC3B,CAAC,EASGO,GAAsBV,EAAW,SAAUC,EAAOC,EAAK,CACzD,IAAIS,EAASC,EAAoB,SAAUX,CAAK,EAE5CY,EAAoBC,EAAiBb,CAAK,EAC1Cc,EAAYF,EAAkB,UAC9BT,EAAcS,EAAkB,YAChCG,EAAOH,EAAkB,KACzBI,EAAQJ,EAAkB,MAC1BK,EAASL,EAAkB,OAC3BM,EAAIN,EAAkB,EACtBO,EAAOP,EAAkB,KACzBQ,EAAYR,EAAkB,UAC9BS,EAAYT,EAAkB,UAC9BU,EAAWV,EAAkB,SAC7BA,EAAkB,YAClB,IAAIP,EAAOb,EAA8BoB,EAAmBhB,EAAU,EAEtE2B,EAASC,EAAMnB,EAAMoB,CAAe,EACpCC,EAAcH,EAAO,CAAC,EACtBI,EAAaJ,EAAO,CAAC,EAErBK,EAAWC,EAAeF,CAAU,EACpCG,EAAa,CACf,MAAO,OACP,OAAQ,cACR,SAAU,WACV,MAAOd,CACX,EACMe,EAAcC,EAAU,CAC1B,WAAY,MAChB,EAAKtB,EAAO,MAAO,CACf,OAAQ,CACN,OAAQ,OACT,CACL,CAAG,EACD,OAAoBJ,gBAAoBC,EAAO,IAAKpB,EAAS,CAC3D,UAAW,yBACX,MAAO2C,CACR,EAAEJ,EAAaZ,CAAS,EAAgBR,EAAAA,cAAoBR,GAAaX,EAAS,CACjF,IAAKc,EACL,OAAQiB,GAAgBD,EACxB,KAAME,GAAsBC,EAC5B,YAAajB,CACd,EAAEyB,EAAU,CACX,MAAOG,CACX,CAAG,EAAG/B,EAAM,QAAQ,EAAgBM,EAAAA,cAAoB2B,GAAY9C,EAAS,CACzE,gBAAiB+C,EAASN,EAAS,QAAQ,CAC/C,GAAMP,GAAaL,IAAU,CACzB,MAAOK,GAAaL,CACxB,EAAK,CACD,MAAON,EAAO,IACf,EAAEY,GAAY,CACb,SAAUA,CACd,CAAG,EAAGP,CAAI,CAAC,CACX,CAAC,EAMGoB,GAAc,SAAqBnC,EAAO,CAC5C,OAAoBM,EAAmB,cAAC,MAAOnB,EAAS,CACtD,QAAS,WACb,EAAKa,CAAK,EAAgBM,EAAmB,cAAC,OAAQ,CAClD,KAAM,eACN,EAAG,8CACJ,CAAA,CAAC,CACJ,EACI8B,GAAc7B,EAAO,MAAO,CAC9B,UAAW,CACT,SAAU,WACV,QAAS,cACT,WAAY,SACZ,eAAgB,SAChB,cAAe,OACf,IAAK,MACL,UAAW,kBACZ,CACH,CAAC,EAEG0B,GAAa,SAAoBjC,EAAO,CAC1C,IAAIqC,EAAkBrC,EAAM,SACxBE,EAAWmC,IAAoB,OAAsB/B,EAAmB,cAAC6B,GAAa,IAAI,EAAIE,EAC9FhC,EAAOb,EAA8BQ,EAAOH,EAAU,EAEtDyC,EAAqBC,EAAkB,aAACrC,EAAU,CACpD,KAAM,eACN,UAAW,sBACX,UAAW,GACX,cAAe,GAEf,MAAO,CACL,MAAO,MACP,OAAQ,MACR,MAAO,cACR,CACL,CAAG,EACD,OAAoBI,EAAmB,cAAC8B,GAAajD,EAAS,CAAA,EAAIkB,EAAM,CACtE,UAAW,6BACZ,CAAA,EAAgBmC,EAAAA,eAAqBtC,CAAQ,EAAIoC,EAAQ,IAAI,CAChE,EClJO,MAAAG,GAAA,CAAA,UAAA,QAAA,EAsDAhC,EAAAF,EAAeR,EAAA,WACpB,CAAAC,EAAAC,IAAA,CAEI,KAAA,CAAM,SAAAC,EACJ,UAAAE,EACA,WAAAsC,EACA,GAAAC,EACA,YAAAC,EACA,WAAAC,EAAA,GACa,UAAAC,EAAA,GACD,WAAAC,EAAA,GACC,cAAAC,EAAA,UACG,UAAAC,EAChB,KAAAC,EACA,SAAAC,EACA,YAAAhD,EACA,WAAAiD,EAAA,UACa,sBAAAC,EAAA,GACW,UAAAC,EAAA,GACZ,kBAAAC,EAAA,GACQ,MAAAC,EAAA,GACZ,GAAAnD,CACL,EAAAL,EAEL,CAAAyD,EAAAC,CAAA,EAAAC,EAAA,SAAA,CAAA,EACAC,EAAAC,SAAA,IAAA,EACAnD,EAAAC,EAAA,eAAA,CAAmD,QAAAyC,EACxC,cAAAJ,CACT,CAAA,EAEFc,EAAAlB,GAAA,2CAIAmB,EAAAC,EAAA,CAAoC,SADpClB,EAAAgB,EAAApB,EAEE,GAAAC,EACA,UAAAM,EACA,KAAA,SACM,UAAAK,CACN,CAAA,EAIFW,EAAAd,EAAA,CAAA,SAAAA,EAAA,MAAAK,CAAA,EAAA,CAAA,EAIAU,EAAA,EAGAC,EAAAC,EAAmBtB,EAAA,mBAAA,WACgBA,EAAA,wBAAA,yBACK,EAGxC,OAAAH,GACE,QAAA,KAAQ,4EACN,EAIJ0B,EAAAA,UAAA,IAAA,CACE,GAAArB,IAAA,UACE,GAAAY,EAAA,QAAA,CACE,MAAAU,EAAAV,EAAA,QAAA,YAAAM,EACAR,EAAAY,CAAA,QAGFZ,EAAA,CAAA,CACF,EAAA,CAAAV,CAAA,CAAA,EAGFuB,EACEC,EAAC,CAAA,UAAApE,EACC,WAAAsC,EACA,iBAAA,CACkB,YAAA,CAAA,GAAA,OAAA,GAAA,GAAAe,KAAA,CACiC,EACnD,GAAAd,EACA,YAAAmB,EACa,UAAAhB,EACb,sBAAAO,EACA,MAAA3C,EACO,GAAAL,EACH,SAAAoE,EAAAC,EAAA,CAAA,MAAA1B,IAAA,UAAAtC,EAAA,OAAA,SAAA,CAGD4C,GAAAiB,EAAAG,EAAA,CAAA,IAAAd,EAAA,SAAAW,EAEGI,EAAC,CAAA,QAAAhC,EACU,GAAA,GAAAA,UACF,UAAA,GACE,WAAAY,GAAAR,EACwB,SAAAE,CAEhC,CAAA,EAAA,EAELsB,EAEFK,GAAC,CAAA,GAAAjC,EACC,QAAA,UACQ,WAAAI,EACR,WAAAF,EACA,UAAAC,EACA,KAAAI,EACA,YAAA/C,EACA,IAAAF,EACA,GAAAgE,EACI,GAAAF,EACA,KAAAQ,EAEFM,EAAC,CAAA,MAAAV,EACQ,GAAA,GAAAxB,SACA,KAAA,QACF,KAAA,QACA,CAAA,EACP,MAAAjC,EAAA,OAEY,SAAAR,CAEb,CAAA,CACH,EAAA,CACF,CAAA,CACF,CAEJ,CAEJ;;","x_google_ignoreList":[0]}