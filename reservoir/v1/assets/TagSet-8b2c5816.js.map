{"version":3,"file":"TagSet-8b2c5816.js","sources":["../../../src/components/TagSet/TooltipWrapper.tsx","../../../src/components/TagSet/TagSetExplore.tsx","../../../src/components/TagSet/TagSetFilter.tsx","../../../src/components/TagSet/TagSet.tsx"],"sourcesContent":["import React from \"react\";\n\nimport Tooltip from \"../Tooltip/Tooltip\";\n\n/**\n * This helper component wrapper renders a DS `Tooltip` component if the text is\n * long or a React fragment. This assumes that the `label` prop is a rather\n * simple single root JSX element, such as `<Link ...>....</Link>`.\n */\nexport const TooltipWrapper = ({\n  label,\n  children,\n}: React.PropsWithChildren<{ label: any }>) => {\n  const maxCharLengthToShow = 20;\n  const labelText = typeof label === \"string\" ? label : label.props.children;\n  if (labelText.length > maxCharLengthToShow && typeof labelText === \"string\") {\n    return <Tooltip content={labelText}>{children}</Tooltip>;\n  }\n  return <>{children}</>;\n};\n","import { Box, chakra, useStyleConfig } from \"@chakra-ui/react\";\nimport React from \"react\";\n\nimport Icon from \"../Icons/Icon\";\nimport { IconNames } from \"../Icons/Icon\";\nimport { TooltipWrapper } from \"./TooltipWrapper\";\n\nexport interface TagSetExploreDataProps {\n  /** The name of the SVG `Icon` to render before the tag label. */\n  iconName?: IconNames;\n  /** The content to display; should be a link-type component. */\n  label: JSX.Element;\n}\nexport interface TagSetExploreProps {\n  /** ID that other components can cross reference for accessibility purposes. */\n  id?: string;\n  /** Whether the tags should be removable. This prop is not used in the \"explore\" variant. */\n  isDismissible?: never;\n  /** The function to perform when a tag is clicked when `isDismissible` is\n   * true.  This prop is not used in the \"explore\" variant.*/\n  onClick?: never;\n  /** The array of data to display as tags. */\n  tagSetData: TagSetExploreDataProps[];\n  /** The `TagSet` variant to render; \"filter\" by default. */\n  type: \"explore\";\n}\n\n/**\n * The \"explore\" `TagSet` variant will always display the tags passed as data.\n * The `label` property in the `tagSetData` prop should be set to a link-type\n * JSX component for linking to specific content.\n */\nexport const TagSetExplore = chakra((props: TagSetExploreProps) => {\n  const { id, tagSetData = [] } = props;\n  const styles = useStyleConfig(\"TagSetExplore\");\n\n  return (\n    <>\n      {tagSetData.map((tagSet: TagSetExploreDataProps, key: number) => {\n        if (typeof tagSet.label === \"string\") {\n          console.warn(\n            \"NYPL Reservoir TagSet: Explore tags require all `label` props to be React components.\"\n          );\n        }\n\n        return (\n          <TooltipWrapper key={key} label={tagSet.label}>\n            <Box\n              data-testid=\"explore-tags\"\n              id={`ts-explore-${id}-${key}`}\n              __css={styles}\n            >\n              {tagSet.iconName ? (\n                <Icon\n                  align=\"left\"\n                  data-testid=\"ts-icon\"\n                  name={tagSet.iconName}\n                  size=\"small\"\n                />\n              ) : null}\n              <span>{tagSet.label}</span>\n            </Box>\n          </TooltipWrapper>\n        );\n      })}\n    </>\n  );\n});\n\nexport default TagSetExplore;\n","import {\n  chakra,\n  useColorModeValue,\n  useMultiStyleConfig,\n} from \"@chakra-ui/react\";\nimport React, { useEffect } from \"react\";\n\nimport Button from \"../Button/Button\";\nimport Icon from \"../Icons/Icon\";\nimport { IconNames } from \"../Icons/Icon\";\nimport { TooltipWrapper } from \"./TooltipWrapper\";\n\nexport interface TagSetFilterDataProps {\n  /** The name of the SVG `Icon` to render before the tag label. */\n  iconName?: IconNames;\n  /** The string label to display. */\n  label: string;\n}\nexport interface TagSetFilterProps {\n  /** ID that other components can cross reference for accessibility purposes. */\n  id?: string;\n  /** Whether the tags should be removable. */\n  isDismissible?: boolean;\n  /** The function to perform when a tag is clicked when `isDismissible` is true. */\n  onClick?: (tagLabel: string) => void;\n  /** The array of data to display as tags. */\n  tagSetData: TagSetFilterDataProps[];\n  /** The `TagSet` variant to render; \"filter\" by default. */\n  type: \"filter\";\n}\n\n/**\n * The \"filter\" `TagSet` variant will display tags that can be removed when\n * `isDismissible` is true and they are clicked.\n */\nexport const TagSetFilter = chakra((props: TagSetFilterProps) => {\n  const { id, isDismissible = false, onClick, tagSetData = [] } = props;\n  const [filters, setFilters] =\n    React.useState<TagSetFilterDataProps[]>(tagSetData);\n  const styles = useMultiStyleConfig(\"TagSetFilter\", { isDismissible });\n  const finalOnClick = (tagLabel: string) => {\n    onClick && onClick(tagLabel);\n  };\n\n  // Set element colors based on color mode\n  const dismissButtonColor = useColorModeValue(\n    \"ui.gray.x-dark\",\n    \"dark.ui.typography.body\"\n  );\n  const iconColor = useColorModeValue(\"ui.black\", \"dark.ui.typography.body\");\n\n  // This expects that the consuming app passes in a new set of data\n  // whenever the current list of tags needs to be updated.\n  useEffect(() => {\n    setFilters(tagSetData);\n  }, [tagSetData, setFilters]);\n\n  return (\n    <>\n      {filters.map((tagSet: TagSetFilterDataProps, key: number) => {\n        if (typeof tagSet.label !== \"string\") {\n          console.warn(\n            \"NYPL Reservoir TagSet: Filter tags require all `label` props to be strings.\"\n          );\n        }\n\n        if (isDismissible && tagSet.iconName) {\n          console.warn(\n            \"NYPL Reservoir TagSet: Filter tags will not render icons when `isDismissible` is set to true.\"\n          );\n        }\n\n        return (\n          <TooltipWrapper key={key} label={tagSet.label}>\n            <Button\n              aria-label={\n                isDismissible\n                  ? `${tagSet.label}, click to remove filter`\n                  : undefined\n              }\n              data-testid=\"filter-tags\"\n              id={`ts-filter-${id}-${key}`}\n              onClick={\n                isDismissible ? () => finalOnClick(tagSet.label) : undefined\n              }\n              sx={styles}\n            >\n              {!isDismissible && tagSet.iconName ? (\n                <Icon\n                  align=\"left\"\n                  color={iconColor}\n                  data-testid=\"ts-icon\"\n                  name={tagSet.iconName}\n                  size=\"small\"\n                />\n              ) : null}\n              <span>{tagSet.label}</span>\n              {isDismissible ? (\n                <Icon\n                  data-testid=\"filter-close-icon\"\n                  align=\"right\"\n                  name=\"close\"\n                  size=\"small\"\n                  color={dismissButtonColor}\n                  width=\"12px\"\n                />\n              ) : null}\n            </Button>\n          </TooltipWrapper>\n        );\n      })}\n\n      {filters.length > 1 && isDismissible ? (\n        <Button\n          buttonType=\"link\"\n          data-testid=\"filter-clear-all\"\n          id={`ts-filter-clear-all-${id}`}\n          onClick={() => finalOnClick(\"clearFilters\")}\n          __css={styles.clearAll}\n        >\n          Clear Filters\n        </Button>\n      ) : null}\n    </>\n  );\n});\n\nexport default TagSetFilter;\n","import { chakra, Flex, useStyleConfig } from \"@chakra-ui/react\";\nimport React, { forwardRef } from \"react\";\n\nimport TagSetExplore, {\n  TagSetExploreProps,\n  TagSetExploreDataProps,\n} from \"./TagSetExplore\";\nimport TagSetFilter, {\n  TagSetFilterDataProps,\n  TagSetFilterProps,\n} from \"./TagSetFilter\";\n\nexport interface BaseTagSetProps {\n  /** Additional class for the component. */\n  className?: string;\n}\n\n// We want either the \"explore\" or \"filter\" type props.\nexport type TagSetTypeProps = TagSetFilterProps | TagSetExploreProps;\n// And here combine the special types with the base props.\nexport type TagSetProps = BaseTagSetProps & TagSetTypeProps;\n\n// Type guard so we can make sure we have a \"filter\" `TagSet` variant.\nexport function isFilterType(type: TagSetProps[\"type\"]): type is \"filter\" {\n  return type === \"filter\";\n}\n\n/**\n * The `TagSet` component renders a group of individual tags which have two\n * variants: \"explore\" and \"filter\". The \"explore\" tags are meant to be used for\n * exploratory linkable elements, whereas the \"filter\" tags are used to display\n * the filter values that were selected through another UI. Only \"filter\" tags\n * can be dismissible.\n *\n * The width of a single tag will never be greater than 200px. If necessary, a\n * tag’s label text will be truncated to keep a tag’s width at or below 200px.\n * The full label text will be automatically revealed when the tag is hovered\n * with a DS `Tooltip` component.\n */\nexport const TagSet = chakra(\n  forwardRef<HTMLDivElement, TagSetProps>((props: TagSetProps, ref?) => {\n    const {\n      className,\n      id,\n      isDismissible = false,\n      onClick,\n      tagSetData = [],\n      type = \"filter\",\n      ...rest\n    } = props;\n    const styles = useStyleConfig(\"TagSet\", {});\n\n    if (!isFilterType(type)) {\n      if (isDismissible) {\n        console.warn(\n          \"NYPL Reservoir TagSet: The `isDismissible` prop will be ignored when the `type` prop is set to 'explore'.\"\n        );\n      }\n      if (onClick) {\n        console.warn(\n          \"NYPL Reservoir TagSet: The `onClick` prop will be ignored when the `type` prop is set to 'explore'.\"\n        );\n      }\n    }\n\n    return (\n      <Flex className={className} id={id} ref={ref} __css={styles} {...rest}>\n        {!isFilterType(type) && (\n          <TagSetExplore\n            id={id}\n            tagSetData={tagSetData as TagSetExploreDataProps[]}\n            type={type}\n          />\n        )}\n        {isFilterType(type) && (\n          <TagSetFilter\n            id={id}\n            isDismissible={isDismissible}\n            onClick={onClick}\n            tagSetData={tagSetData as TagSetFilterDataProps[]}\n            type={type}\n          />\n        )}\n      </Flex>\n    );\n  })\n);\n\nexport default TagSet;\n"],"names":["TooltipWrapper","label","children","labelText","jsx","Tooltip","Fragment","TagSetExplore","chakra","props","id","tagSetData","styles","useStyleConfig","tagSet","key","jsxs","Box","Icon","TagSetFilter","isDismissible","onClick","filters","setFilters","React","useMultiStyleConfig","finalOnClick","tagLabel","dismissButtonColor","useColorModeValue","iconColor","useEffect","Button","isFilterType","type","TagSet","forwardRef","ref","className","rest","Flex"],"mappings":"yVASO,MAAAA,EAAA,CAAA,CAAwB,MAAAC,EAC7B,SAAAC,CAEF,IAAA,CAEE,MAAAC,EAAA,OAAAF,GAAA,SAAAA,EAAAA,EAAA,MAAA,SACA,OAAAE,EAAA,OAAA,IAAA,OAAAA,GAAA,SACEC,EAAAC,EAAA,CAAA,QAAAF,EAAA,SAAAD,CAAA,CAAA,EAEFE,EAAAE,EAAA,CAAA,SAAAJ,CAAA,CAAA,CACF,2UCaO,MAAAK,EAAAC,EAAAC,GAAA,CACL,KAAA,CAAA,GAAAC,EAAA,WAAAC,EAAA,CAAA,CAAA,EAAAF,EACAG,EAAAC,EAAA,eAAA,EAEA,OAAAT,EAAAE,EAAA,CAAA,SAAAK,EAAA,IAAA,CAAAG,EAAAC,KAGM,OAAAD,EAAA,OAAA,UACE,QAAA,KAAQ,uFACN,EAIJV,EAAAJ,EAAA,CAAA,MAAAc,EAAA,MAAA,SAAAE,EAEIC,EAAC,CAAA,cAAA,eACa,GAAA,cAAAP,KAAAK,IACY,MAAAH,EACjB,SAAA,CAENE,EAAA,SAAAV,EACCc,EAAC,CAAA,MAAA,OACO,cAAA,UACM,KAAAJ,EAAA,SACC,KAAA,OACR,CAAA,EAAA,KAELV,EAAA,OAAA,CAAA,SAAAU,EAAA,KAAA,CAAA,CACgB,CAAA,CAAA,CAAA,EAAAC,CAAA,EAExB,CAAA,CAAA,CAKV,CAAA,qoCChCO,MAAAI,EAAAX,EAAAC,GAAA,CACL,KAAA,CAAA,GAAAC,EAAA,cAAAU,EAAA,GAAA,QAAAC,EAAA,WAAAV,EAAA,CAAA,CAAA,EAAAF,EACA,CAAAa,EAAAC,CAAA,EAAAC,EAAA,SAAAb,CAAA,EAEAC,EAAAa,EAAA,eAAA,CAAA,cAAAL,CAAA,CAAA,EACAM,EAAAC,GAAA,CACEN,GAAAA,EAAAM,CAAA,CAA2B,EAI7BC,EAAAC,EAA2B,iBACzB,yBACA,EAEFC,EAAAD,EAAA,WAAA,yBAAA,EAIAE,OAAAA,EAAAA,UAAA,IAAA,CACER,EAAAZ,CAAA,CAAqB,EAAA,CAAAA,EAAAY,CAAA,CAAA,EAGvBP,EAAAV,EAAA,CAAA,SAAA,CAEKgB,EAAA,IAAA,CAAAR,EAAAC,KACC,OAAAD,EAAA,OAAA,UACE,QAAA,KAAQ,6EACN,EAIJM,GAAAN,EAAA,UACE,QAAA,KAAQ,+FACN,EAIJV,EAAAJ,EAAA,CAAA,MAAAc,EAAA,MAAA,SAAAE,EAEIgB,EAAC,CAAA,aAAAZ,EAAA,GAAAN,EAAA,gCAAA,OAIO,cAAA,cAEM,GAAA,aAAAJ,KAAAK,IACW,QAAAK,EAAA,IAAAM,EAAAZ,EAAA,KAAA,EAAA,OAE8B,GAAAF,EAEjD,SAAA,CAEH,CAAAQ,GAAAN,EAAA,SAAAV,EACCc,EAAC,CAAA,MAAA,OACO,MAAAY,EACC,cAAA,UACK,KAAAhB,EAAA,SACC,KAAA,OACR,CAAA,EAAA,KAELV,EAAA,OAAA,CAAA,SAAAU,EAAA,KAAA,CAAA,EACgBM,EAAAhB,EAElBc,EAAC,CAAA,cAAA,oBACa,MAAA,QACN,KAAA,QACD,KAAA,QACA,MAAAU,EACE,MAAA,MACD,CAAA,EAAA,IAEN,CAAA,CAAA,CAAA,EAAAb,CAAA,EAER,EAEHO,EAAA,OAAA,GAAAF,EAAAhB,EAGC4B,EAAC,CAAA,WAAA,OACY,cAAA,mBACC,GAAA,uBAAAtB,IACe,QAAA,IAAAgB,EAAA,cAAA,EACe,MAAAd,EAAA,SAC5B,SAAA,eACf,CAAA,EAAA,IAGC,CAAA,CAAA,CAGV,CAAA,s+BCtGO,SAAAqB,EAAAC,EAAA,CACL,OAAAA,IAAA,QACF,CAcO,MAAAC,EAAA3B,EAAe4B,aAAA,CAAA3B,EAAA4B,IAAA,CAElB,KAAA,CAAM,UAAAC,EACJ,GAAA5B,EACA,cAAAU,EAAA,GACgB,QAAAC,EAChB,WAAAV,EAAA,CAAA,EACc,KAAAuB,EAAA,SACP,GAAAK,CACJ,EAAA9B,EAELG,EAAAC,EAAA,SAAA,CAAA,CAAA,EAEA,OAAAoB,EAAAC,CAAA,IACEd,GACE,QAAA,KAAQ,2GACN,EAGJC,GACE,QAAA,KAAQ,qGACN,GAKNL,EAAAwB,EAAA,CAAA,UAAAF,EAAA,GAAA5B,EAAA,IAAA2B,EAAA,MAAAzB,EAAA,GAAA2B,EAAA,SAAA,CAEK,CAAAN,EAAAC,CAAA,GAAA9B,EACCG,EAAC,CAAA,GAAAG,EACC,WAAAC,EACA,KAAAuB,CACA,CAAA,EACFD,EAAAC,CAAA,GAAA9B,EAGAe,EAAC,CAAA,GAAAT,EACC,cAAAU,EACA,QAAAC,EACA,WAAAV,EACA,KAAAuB,CACA,CAAA,CACF,CAAA,CAAA,CAEJ,CAAA,CAGN;;;;;;;;;;"}