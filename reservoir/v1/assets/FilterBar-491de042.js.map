{"version":3,"file":"FilterBar-491de042.js","sources":["../../../src/components/FilterBar/FilterBar.tsx"],"sourcesContent":["import {\n  Box,\n  chakra,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Stack,\n  useMultiStyleConfig,\n} from \"@chakra-ui/react\";\nimport React, { forwardRef } from \"react\";\n\nimport Button from \"../Button/Button\";\nimport ButtonGroup from \"../ButtonGroup/ButtonGroup\";\nimport Heading from \"../Heading/Heading\";\nimport { LayoutTypes } from \"../../helpers/types\";\nimport MultiSelect from \"../MultiSelect/MultiSelect\";\nimport MultiSelectGroup from \"../MultiSelectGroup/MultiSelectGroup\";\nimport { SelectedItems } from \"../MultiSelect/MultiSelect\";\nimport useNYPLBreapoints from \"../../hooks/useNYPLBreakpoints\";\n\ninterface FilterBarCommonProps {\n  children: React.ReactNode;\n  /** The id of the MultiSelect. */\n  id?: string;\n  /** Determines on Mobile if filter modal overlay is open or closed */\n  isOpen: boolean;\n  /** Heading text of FilterBar */\n  headingText: string;\n  /** Renders the layout of the FilterBar child components in a row or column. */\n  layout?: LayoutTypes;\n  /** The selected items state (items that were checked by user). */\n  selectedItems: SelectedItems;\n  /** User for the global `Clear Filters` button. This button is always shown on mobile, optional on desktop */\n  onClear: () => void;\n  /** If passed, the global `Clear Filters` button will render on desktop and tablet */\n  showClearAll?: boolean;\n  /** Set width of `FilterBar` child components */\n  filterWidth?: string;\n}\n\n/** Types related to an optional global submit button `Apply Filters` */\ntype SubmitAllProps =\n  | {\n      /** If passed the `Apply Filters` button will render on desktop and tablet */\n      showSubmitAll?: false;\n      /** Function for `Apply Filters` button, needs to be provided by the consuming app */\n      onSubmit?: never;\n    }\n  /** onSubmit is required only if showSubmitAll is passed */\n  | { showSubmitAll: true; onSubmit: () => void };\n\n/** Types related to the Modal handling */\ntype HandleModalProps =\n  | {\n      /** If onToggle is passed as prop, it will open and close the filter modal on mobile */\n      onToggle: () => void;\n      /** onOpen and onClose will not be used in this scenario */\n      onOpen?: never;\n      onClose?: never;\n    }\n  | {\n      /** If onToggle is omitted, onOpen and onClose should be provided instead */\n      onToggle?: undefined;\n      /** onOpen will open the filter modal on mobile */\n      onOpen: () => void;\n      /** onClose will close the filter modal on mobile */\n      onClose: () => void;\n    };\n\nexport type FilterBarProps = FilterBarCommonProps &\n  SubmitAllProps &\n  HandleModalProps;\n\n/**\n * `FilterBar` is a wrapper component for filter components.\n * The DS considers the following components as filter components:\n * - `MultiSelectGroup`\n *\n * The wrapped components/ component groups can be displayed in a column or\n * in a row layout. `FilterBar` can render additional `Clear All` and a `Apply Filters` buttons. The two\n * _optional_ buttons are controlled by the `showClearAll`/ `onClear` or `showSubmitAll`/`onSubmit` props repectively.\n */\n\nexport const FilterBar = chakra(\n  forwardRef<HTMLDivElement, React.PropsWithChildren<FilterBarProps>>(\n    (props, ref?) => {\n      const {\n        children,\n        id,\n        isOpen,\n        headingText,\n        layout = \"row\",\n        onClear,\n        onSubmit,\n        onToggle,\n        onOpen,\n        onClose,\n        selectedItems,\n        showClearAll = false,\n        showSubmitAll = false,\n        filterWidth,\n        ...rest\n      } = props;\n\n      const { isLargerThanMedium } = useNYPLBreapoints();\n      const finalLayout = isLargerThanMedium ? layout : \"column\";\n      const finalWidth = isLargerThanMedium\n        ? filterWidth\n          ? filterWidth\n          : finalLayout === \"column\"\n          ? \"full\"\n          : \"default\"\n        : \"full\";\n      const styles = useMultiStyleConfig(\"FilterBar\", {\n        layout: finalLayout,\n        width: finalWidth,\n      });\n\n      const getSelectedItemsCount = () =>\n        Object.entries(selectedItems).length\n          ? `(${Object.entries(selectedItems).length})`\n          : \"\";\n      // Warning when onSubmit is passed but the showSubmitAll is missing\n      if (onSubmit && showSubmitAll === false) {\n        console.warn(\n          \"NYPL Reservoir FilterBar: The `onSubmit` handler was set, but the `Apply Filters` button is not visible.\"\n        );\n      }\n      // Warning when showSubmitAll is passed but onSubmit is missing\n      if (onSubmit === undefined && showSubmitAll === true) {\n        console.warn(\n          \"NYPL Reservoir FilterBar: The `Apply Filters` button is rendering but no onSubmit function was passed.\"\n        );\n      }\n\n      const newChildren: JSX.Element[] = [];\n      // Go through the FilterBar children and update props as needed.\n      React.Children.map(\n        children as JSX.Element,\n        (child: React.ReactElement) => {\n          if (React.isValidElement(child)) {\n            if (child.type === MultiSelectGroup) {\n              const props = {\n                layout: finalLayout,\n                multiSelectWidth: finalWidth,\n              };\n              newChildren.push(React.cloneElement(child, props));\n            } else if (child.type === MultiSelect) {\n              const props = {\n                isBlockElement: finalLayout === \"column\",\n                width: finalWidth,\n              };\n              newChildren.push(React.cloneElement(child, props));\n            } else {\n              console.warn(\n                \"NYPL Reservoir FilterBar: Invalid child component was passed\",\n                child\n              );\n              return;\n            }\n          }\n        }\n      );\n      return (\n        <Box id={`filter-bar-${id}`} __css={styles} ref={ref} {...rest}>\n          {isLargerThanMedium ? (\n            <>\n              {headingText && (\n                <Heading text={headingText} level=\"two\" size=\"tertiary\" />\n              )}\n              <Stack\n                alignItems={layout === \"row\" ? \"flex-end\" : null}\n                columnGap=\"l\"\n                direction={layout}\n                rowGap=\"s\"\n                spacing=\"0\"\n                wrap={layout === \"row\" ? \"wrap\" : null}\n                sx={{\n                  \"> div\": {\n                    _notFirst: {\n                      mx: \"0\",\n                    },\n                  },\n                }}\n              >\n                {newChildren &&\n                  newChildren.map((newChild, i) => (\n                    <Box key={`filter-bar-child-${i}`}>{newChild}</Box>\n                  ))}\n\n                {(showSubmitAll || showClearAll) && (\n                  <ButtonGroup\n                    layout={finalLayout}\n                    __css={styles.globalButtonGroup}\n                    buttonWidth={layout === \"column\" ? \"full\" : \"default\"}\n                  >\n                    {showSubmitAll && (\n                      <Button\n                        buttonType=\"primary\"\n                        id={`${id}-submit-all-button`}\n                        onClick={onSubmit}\n                      >\n                        Apply Filters\n                      </Button>\n                    )}\n                    {showClearAll && (\n                      <Button\n                        buttonType=\"text\"\n                        id={`${id}-clear-all-button`}\n                        onClick={onClear}\n                        textAlign=\"center\"\n                      >\n                        Clear Filters\n                      </Button>\n                    )}\n                  </ButtonGroup>\n                )}\n              </Stack>\n            </>\n          ) : (\n            <>\n              <Button\n                id={`filter-bar-${id}-show-filters`}\n                buttonType=\"secondary\"\n                onClick={() => {\n                  onToggle === undefined ? onOpen() : onToggle();\n                }}\n              >\n                {`Show Filter ${getSelectedItemsCount()}`}\n              </Button>\n              <Modal\n                isOpen={isOpen}\n                onClose={() => {\n                  onToggle === undefined ? onClose() : onToggle();\n                }}\n                size=\"full\"\n                scrollBehavior=\"inside\"\n              >\n                <ModalOverlay />\n                <ModalContent>\n                  <ModalHeader sx={styles.modalHeader}>\n                    Filter Criteria\n                  </ModalHeader>\n                  <ModalCloseButton sx={styles.modalCloseButton} />\n                  <ModalBody sx={styles.modalBody}>{newChildren}</ModalBody>\n                  <ModalFooter sx={styles.modalFooter}>\n                    <ButtonGroup layout=\"row\" buttonWidth=\"full\">\n                      <Button\n                        id={`filter-bar-${id}-see-results`}\n                        type=\"submit\"\n                        onClick={() => {\n                          onSubmit();\n                          onToggle === undefined ? onClose() : onToggle();\n                        }}\n                      >\n                        Show Results\n                      </Button>\n                      <Button\n                        id={`filter-bar-${id}-clear`}\n                        buttonType=\"text\"\n                        type=\"reset\"\n                        textAlign=\"center\"\n                        onClick={onClear}\n                      >\n                        Clear Filters\n                      </Button>\n                    </ButtonGroup>\n                  </ModalFooter>\n                </ModalContent>\n              </Modal>\n            </>\n          )}\n        </Box>\n      );\n    }\n  )\n);\n\nexport default FilterBar;\n"],"names":["FilterBar","chakra","forwardRef","props","ref","children","id","isOpen","headingText","layout","onClear","onSubmit","onToggle","onOpen","onClose","selectedItems","showClearAll","showSubmitAll","filterWidth","rest","isLargerThanMedium","useNYPLBreapoints","finalLayout","finalWidth","styles","useMultiStyleConfig","getSelectedItemsCount","newChildren","React","child","MultiSelectGroup","props2","MultiSelect","jsx","Box","jsxs","Fragment","Heading","Stack","newChild","i","ButtonGroup","Button","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","ModalFooter"],"mappings":"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"}