{"version":3,"file":"CheckboxGroup-ac2921c3.js","sources":["../../../src/components/CheckboxGroup/CheckboxGroup.tsx"],"sourcesContent":["import {\n  chakra,\n  CheckboxGroup as ChakraCheckboxGroup,\n  Stack,\n  useMultiStyleConfig,\n} from \"@chakra-ui/react\";\nimport React, { forwardRef } from \"react\";\n\nimport Checkbox from \"../Checkbox/Checkbox\";\nimport Fieldset from \"../Fieldset/Fieldset\";\nimport HelperErrorText, {\n  HelperErrorTextType,\n} from \"../HelperErrorText/HelperErrorText\";\nimport { LayoutTypes } from \"../../helpers/types\";\nimport { spacing } from \"../../theme/foundations/spacing\";\n\nexport interface CheckboxGroupProps {\n  /** Any child node passed to the component. */\n  children: React.ReactNode;\n  /** Populates the initial value of the input */\n  defaultValue?: string[];\n  /** Optional string to populate the HelperErrorText for standard state */\n  helperText?: HelperErrorTextType;\n  /** ID that other components can cross reference for accessibility purposes */\n  id: string;\n  /** Optional string to populate the HelperErrorText for error state */\n  invalidText?: HelperErrorTextType;\n  /** Adds the 'disabled' prop to the input when true. */\n  isDisabled?: boolean;\n  /** Set's the `Checkbox`s' wrapper to be full width. */\n  isFullWidth?: boolean;\n  /** A`dds the 'aria-invalid' attribute to the input and\n   * sets the error state when true. */\n  isInvalid?: boolean;\n  /** Adds the 'required' attribute to the input when true. */\n  isRequired?: boolean;\n  /** The checkbox group label displayed in a `legend` element if `showlabel` is\n   * true, or an \"aria-label\" if `showLabel` is false. */\n  labelText: string;\n  /** Renders the checkbox buttons in a row or column (default). */\n  layout?: LayoutTypes;\n  /** The `name` prop indicates the form group for all the `Checkbox` children. */\n  name: string;\n  /** The action to perform on the `<input>`'s onChange function  */\n  onChange?: (value: string[]) => void;\n  /** Offers the ability to hide the helper/invalid text. */\n  showHelperInvalidText?: boolean;\n  /** Offers the ability to show the group's legend onscreen or hide it. Refer\n   * to the `labelText` property for more information. */\n  showLabel?: boolean;\n  /** Whether or not to display the \"(Required)\" text in the label text.\n   * True by default. */\n  showRequiredLabel?: boolean;\n  /** The values to programmatically update the selected `Checkbox`es. */\n  value?: string[];\n}\n\nconst noop = () => {};\n\n/**\n * Wrapper component to wrap `Checkbox` components. Can be displayed in a\n * column or in a row. The `CheckboxGroup` component renders all the necessary\n * wrapping and associated text elements, but the checkbox input elements\n * _need_ to be child `Checkbox` components from the NYPL Design System.\n */\nexport const CheckboxGroup = chakra(\n  forwardRef<HTMLDivElement, CheckboxGroupProps>((props, ref?) => {\n    const {\n      children,\n      defaultValue = [],\n      helperText,\n      id,\n      invalidText,\n      isDisabled = false,\n      isFullWidth = false,\n      isInvalid = false,\n      isRequired = false,\n      labelText,\n      layout = \"column\",\n      name,\n      onChange,\n      showHelperInvalidText = true,\n      showLabel = true,\n      showRequiredLabel = true,\n      value,\n      ...rest\n    } = props;\n    const footnote = isInvalid ? invalidText : helperText;\n    const newChildren: JSX.Element[] = [];\n    const spacingProp =\n      layout === \"column\"\n        ? spacing.input.group.default.vstack\n        : spacing.input.group.default.hstack;\n    const checkboxProps =\n      defaultValue && onChange\n        ? {\n            defaultValue,\n            onChange,\n          }\n        : {};\n\n    if (value) {\n      checkboxProps[\"value\"] = value;\n    }\n\n    if (!id) {\n      console.warn(\n        \"NYPL Reservoir CheckboxGroup: This component's required `id` prop was not passed.\"\n      );\n    }\n    // Go through the Checkbox children and update them as needed.\n    React.Children.map(\n      children as JSX.Element,\n      (child: React.ReactElement, i) => {\n        if (child.type !== Checkbox) {\n          // Special case for Storybook MDX documentation.\n          if (child.props.mdxType && child.props.mdxType === \"Checkbox\") {\n            noop();\n          } else {\n            console.warn(\n              \"NYPL Reservoir CheckboxGroup: Only `Checkbox` components are \" +\n                \"allowed as children.\"\n            );\n          }\n        }\n\n        if (child !== undefined && child !== null) {\n          const newProps = {\n            key: i,\n            id: `${id}-${i}`,\n            name,\n            isDisabled,\n            isInvalid,\n            isRequired,\n          };\n          newChildren.push(React.cloneElement(child, newProps));\n        }\n      }\n    );\n\n    // Get the Chakra-based styles for the custom elements in this component.\n    const styles = useMultiStyleConfig(\"CheckboxGroup\", { isFullWidth });\n\n    return (\n      <Fieldset\n        id={`${id}-checkbox-group`}\n        isLegendHidden={!showLabel}\n        isRequired={isRequired}\n        legendText={labelText}\n        showRequiredLabel={showRequiredLabel}\n        {...rest}\n        __css={styles}\n      >\n        <ChakraCheckboxGroup {...checkboxProps}>\n          <Stack\n            id={id}\n            data-testid=\"checkbox-group\"\n            direction={[layout]}\n            spacing={spacingProp}\n            ref={ref}\n          >\n            {newChildren}\n          </Stack>\n        </ChakraCheckboxGroup>\n        <HelperErrorText\n          id={`${id}-helperErrorText`}\n          isInvalid={isInvalid}\n          isRenderedText={showHelperInvalidText}\n          text={footnote}\n          __css={styles.helperErrorText}\n        />\n      </Fieldset>\n    );\n  })\n);\n\nexport default CheckboxGroup;\n"],"names":["CheckboxGroup","chakra","forwardRef","props","ref","children","defaultValue","helperText","id","invalidText","isDisabled","isFullWidth","isInvalid","isRequired","labelText","layout","name","onChange","showHelperInvalidText","showLabel","showRequiredLabel","value","rest","footnote","newChildren","spacingProp","spacing","checkboxProps","React","child","i","Checkbox","newProps","styles","useMultiStyleConfig","jsxs","Fieldset","jsx","ChakraCheckboxGroup","Stack","HelperErrorText"],"mappings":"+aAiEO,MAAAA,EAAAC,EAAsBC,aAAA,CAAAC,EAAAC,IAAA,CAEzB,KAAA,CAAM,SAAAC,EACJ,aAAAC,EAAA,CAAA,EACgB,WAAAC,EAChB,GAAAC,EACA,YAAAC,EACA,WAAAC,EAAA,GACa,YAAAC,EAAA,GACC,UAAAC,EAAA,GACF,WAAAC,EAAA,GACC,UAAAC,EACb,OAAAC,EAAA,SACS,KAAAC,EACT,SAAAC,EACA,sBAAAC,EAAA,GACwB,UAAAC,EAAA,GACZ,kBAAAC,EAAA,GACQ,MAAAC,EACpB,GAAAC,CACG,EAAAnB,EAELoB,EAAAX,EAAAH,EAAAF,EACAiB,EAAA,CAAA,EACAC,EAAAV,IAAA,SAAAW,EAAA,MAAA,MAAA,QAAA,OAAAA,EAAA,MAAA,MAAA,QAAA,OAIAC,EAAArB,GAAAW,EAAA,CAEM,aAAAX,EACE,SAAAW,CACA,EAAA,GAIRI,IACEM,EAAA,MAAAN,GAGFb,GACE,QAAA,KAAQ,mFACN,EAIJoB,EAAA,SAAA,IAAevB,EACb,CAAAwB,EAAAC,IAAA,CAcE,GAZAD,EAAA,OAAAE,IAEEF,EAAA,MAAA,SAAAA,EAAA,MAAA,UAAA,YAGE,QAAA,KAAQ,mFACN,GAMNA,GAAA,KAAA,CACE,MAAAG,EAAA,CAAiB,IAAAF,EACV,GAAA,GAAAtB,KAAAsB,IACQ,KAAAd,EACb,WAAAN,EACA,UAAAE,EACA,WAAAC,CACA,EAEFW,EAAA,KAAAI,EAAA,aAAAC,EAAAG,CAAA,CAAA,EACF,CACF,EAIF,MAAAC,EAAAC,EAAA,gBAAA,CAAA,YAAAvB,CAAA,CAAA,EAEA,OAAAwB,EACEC,EAAC,CAAA,GAAA,GAAA5B,mBACQ,eAAA,CAAAW,EACU,WAAAN,EACjB,WAAAC,EACY,kBAAAM,EACZ,GAAAE,EACI,MAAAW,EACG,SAAA,CAEPI,EAAAC,EAAA,CAAA,GAAAX,EAAA,SAAAU,EACEE,EAAC,CAAA,GAAA/B,EACC,cAAA,iBACY,UAAA,CAAAO,CAAA,EACM,QAAAU,EACT,IAAArB,EACT,SAAAoB,CAEC,CAAA,EAAA,EAELa,EACAG,EAAC,CAAA,GAAA,GAAAhC,oBACQ,UAAAI,EACP,eAAAM,EACgB,KAAAK,EACV,MAAAU,EAAA,eACQ,CAAA,CAChB,CAAA,CAAA,CACF,CAAA,CAGN;"}