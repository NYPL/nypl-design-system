import{j as l,a as D}from"./emotion-react-jsx-runtime.browser.esm-b12afd4d.js";import{r as b,R as c}from"./index-f2bd0723.js";import{H as w}from"./Heading-2ec2ea62.js";import{f as x,i as E,B as g}from"./chakra-ui-layout.esm-b2fa9d31.js";const T=["ol","ul","dl"],_=x(b.forwardRef((a,o)=>{const{children:r,className:e,id:i,inline:N=!1,listItems:s,noStyling:C=!1,title:f,type:n="ul",...y}=a,h=E("List",{inline:N,noStyling:C,variant:n});let u=null;if(r&&s&&(s==null?void 0:s.length)>0)return console.warn("NYPL Reservoir List: Pass in either `<li>`, `<dt>`, or `<dd>` children or use the `listItems` data prop. Do not use both."),null;if(!r&&!s)return console.warn("NYPL Reservoir List: Pass in either `<li>` children or pass data in the `listItems` prop, not both."),null;const L=t=>r||(s?t==="ol"||t==="ul"?s.map((d,p)=>l("li",{children:d},p)):t==="dl"?s.map((d,p)=>[l("dt",{children:d.term},`${p}-term`),l("dd",{children:d.description},`${p}-des`)]):null:null);return n==="ol"||n==="ul"?(m(r,n),u=l(g,{as:n,id:i,className:e,ref:o,__css:h,...y,children:L(n)})):n==="dl"&&((()=>{c.Children.map(r,t=>{t.type!=="dt"&&t.type!=="dd"&&t.type!==c.Fragment&&t.props.mdxType!=="dt"&&t.props.mdxType!=="dd"&&t.props.mdxType!==c.Fragment&&console.warn("NYPL Reservoir List: Direct children of `List` (description) must be `<dt>`s and `<dd>`s.")})})(),u=D(g,{as:"section",id:i,className:e,ref:o,__css:h,...y,children:[f&&l(w,{id:`${i}-heading`,children:f}),l("dl",{children:L(n)})]})),u})),m=(a,o="ul",r="List")=>{c.Children.map(a,e=>{var i;e&&(e==null?void 0:e.type)!=="li"&&((i=e==null?void 0:e.props)==null?void 0:i.mdxType)!=="li"&&console.warn(`NYPL Reservoir ${r}: Direct children of \`${r}\` (${o}) must be \`<li>\`s.`)})};try{_.displayName="List",_.__docgenInfo={description:"A component that renders list item `li` elements or description item `dt`\nand `dd` elements based on the `type` prop. Note that the `title` prop will\nonly display for the `Description` list type.",displayName:"List",props:{title:{defaultValue:null,description:`An optional title that will appear over the list. This prop only applies
to Description Lists.`,name:"title",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"ClassName you can add in addition to 'list'",name:"className",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"ID that other components can cross reference for accessibility purposes",name:"id",required:!1,type:{name:"string"}},inline:{defaultValue:null,description:"Display the list in a row.",name:"inline",required:!1,type:{name:"boolean"}},type:{defaultValue:null,description:'The type of list: "ol", "ul", or "dl". "ul" by default.',name:"type",required:!0,type:{name:'"dl" | "ol" | "ul"'}},listItems:{defaultValue:null,description:'Data to render if children are not passed. For `listTypes` ordered `"ol"`\nand unordered `"ul"` `List` types, the data structure is an array of strings\nto renders as `li` items. For description `"dl"` `List` types, the data\nstructure is an array of objects with `term` and `description` properties\nto render `dt` and `dd` elements, respectively.',name:"listItems",required:!1,type:{name:"(string | Element | DescriptionProps)[]"}},noStyling:{defaultValue:null,description:"Remove list styling.",name:"noStyling",required:!1,type:{name:"boolean"}}}}}catch{}try{m.displayName="checkListChildrenError",m.__docgenInfo={description:"Checks for `li` elements and consoles a warning if the\nchildren are different HTML elements.",displayName:"checkListChildrenError",props:{}}}catch{}export{_ as L,m as c,T as l};
//# sourceMappingURL=List-b2e63895.js.map
