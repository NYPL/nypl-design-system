{"version":3,"file":"StyledList-ad1bf317.js","sources":["../../../src/components/StyledList/StyledList.tsx"],"sourcesContent":["import { Box, chakra, useMultiStyleConfig } from \"@chakra-ui/react\";\nimport React, { forwardRef } from \"react\";\n\nimport { checkListChildrenError } from \"../List/List\";\nimport { TextSizes } from \"../Text/Text\";\n\nexport interface StyledListProps {\n  /** Any child node passed to the component. */\n  children?: React.ReactNode;\n  /** A class name for the StyledList parent div. */\n  className?: string;\n  /** ID that other components can cross reference for accessibility purposes. */\n  id?: string;\n  /** Data to render if `li` children elements are not passed. It must be an\n   * array of strings or JSX elements. */\n  listItems?: (string | JSX.Element)[];\n  /** The style used to render the StyledList component. For its initial release,\n   * there is only one variant style which is the default, \"capped\". */\n  style?: \"capped\";\n  /** The font size of the `li` elements. */\n  textSize?: TextSizes;\n}\n\n/**\n * The `StyledList` component renders an HTML list with styles that do not\n * adhere to traditional numbered and bulleted list styles. Unlike\n * the `List` component, `StyledList` only renders an unordered list.\n */\nexport const StyledList = chakra(\n  forwardRef<HTMLDivElement & HTMLUListElement, StyledListProps>(\n    (props, ref?) => {\n      const {\n        children,\n        className,\n        id,\n        listItems = [],\n        style = \"capped\",\n        textSize = \"default\",\n      } = props;\n      const styles = useMultiStyleConfig(\"StyledList\", {\n        textSize,\n        variant: style,\n      });\n      let finalChildren;\n\n      if (children && listItems.length > 0) {\n        console.warn(\n          \"NYPL Reservoir StyledList: Pass in either `<li>` children or use the \" +\n            \"`listItems` data prop. Do not use both.\"\n        );\n        return null;\n      }\n\n      // Makes sure that the passed children elements are `li` elements but\n      // it is not enforced. Only a warning is logged to the console.\n      checkListChildrenError(children, \"ul\", \"StyledList\");\n\n      finalChildren =\n        children || listItems.map((item, i) => <li key={i}>{item}</li>);\n\n      return (\n        <Box as=\"ul\" className={className} id={id} ref={ref} __css={styles}>\n          {finalChildren}\n        </Box>\n      );\n    }\n  )\n);\n\nexport default StyledList;\n"],"names":["StyledList","chakra","forwardRef","props","ref","children","className","id","listItems","style","textSize","styles","useMultiStyleConfig","finalChildren","checkListChildrenError","item","i","jsx","Box"],"mappings":"uNA4BO,MAAAA,EAAAC,EAAmBC,EAAA,WACxB,CAAAC,EAAAC,IAAA,CAEI,KAAA,CAAM,SAAAC,EACJ,UAAAC,EACA,GAAAC,EACA,UAAAC,EAAA,CAAA,EACa,MAAAC,EAAA,SACL,SAAAC,EAAA,SACG,EAAAP,EAEbQ,EAAAC,EAAA,aAAA,CAAiD,SAAAF,EAC/C,QAAAD,CACS,CAAA,EAEX,IAAAI,EAEA,OAAAR,GAAAG,EAAA,OAAA,GACE,QAAA,KAAQ,8GACN,EAGF,OAKFM,EAAAT,EAAA,KAAA,YAAA,EAEAQ,EAAAR,GAAAG,EAAA,IAAA,CAAAO,EAAAC,IAAAC,EAAA,KAAA,CAAA,SAAAF,CAAA,EAAAC,CAAA,CAAA,EAGAC,EAAAC,EAAA,CAAA,GAAA,KAAA,UAAAZ,EAAA,GAAAC,EAAA,IAAAH,EAAA,MAAAO,EAAA,SAAAE,CAAA,CAAA,EAGE,CAEJ,CAEJ;"}