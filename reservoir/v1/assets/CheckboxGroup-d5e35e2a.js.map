{"version":3,"file":"CheckboxGroup-d5e35e2a.js","sources":["../../../src/components/CheckboxGroup/CheckboxGroup.mdx"],"sourcesContent":["import { ArgTypes, Canvas, Description, Meta, Source } from \"@storybook/blocks\";\n\nimport * as CheckboxGroupStories from \"./CheckboxGroup.stories\";\nimport Link from \"../Link/Link\";\n\n<Meta of={CheckboxGroupStories} />\n\n# CheckboxGroup\n\n| Component Version | DS Version |\n| ----------------- | ---------- |\n| Added             | `0.25.1`   |\n| Latest            | `1.5.0`    |\n\n## Table of Contents\n\n- {<Link href=\"#overview\" target=\"_self\">Overview</Link>}\n- {<Link href=\"#component-props\" target=\"_self\">Component Props</Link>}\n- {<Link href=\"#accessibility\" target=\"_self\">Accessibility</Link>}\n- {<Link href=\"#layout-patterns\" target=\"_self\">Layout Patterns</Link>}\n- {<Link href=\"#errored\" target=\"_self\">Errored</Link>}\n- {<Link href=\"#required\" target=\"_self\">Required</Link>}\n- {<Link href=\"#disabled\" target=\"_self\">Disabled</Link>}\n- {<Link href=\"#labels-using-jsx-elements\" target=\"_self\">Labels Using JSX Elements</Link>}\n- {<Link href=\"#indeterminate-example\" target=\"_self\">Indeterminate Example</Link>}\n- {<Link href=\"#getting-checkbox-input-values\" target=\"_self\">Getting Checkbox Input Values</Link>}\n- {<Link href=\"#programmatically-update\" target=\"_self\">Programmatically Update</Link>}\n\n## Overview\n\n<Description of={CheckboxGroupStories} />\n\n## Component Props\n\n<Canvas of={CheckboxGroupStories.WithControls} />\n\n<ArgTypes of={CheckboxGroupStories.WithControls} />\n\n## Accessibility\n\nThe `CheckboxGroup` renders a group of `Checkbox` components that are wrapped in\na `<fieldset>` element. The `<fieldset>` element renders a `<legend>` element that\ncan be visually hidden through the `showLabel` prop.\n\nResources:\n\n- [Chakra UI Checkbox](https://chakra-ui.com/docs/components/form/checkbox)\n\n## Layout Patterns\n\nUse the `layout` prop to set the `Checkbox` buttons to display in a column or in\na row.\n\n<Canvas of={CheckboxGroupStories.Layout} />\n\n## Errored\n\n<Canvas of={CheckboxGroupStories.Errored} />\n\n## Required\n\n<Canvas of={CheckboxGroupStories.Required} />\n\n## Disabled\n\n<Canvas of={CheckboxGroupStories.Disabled} />\n\n## Labels Using JSX Elements\n\nReact elements can be passed to the `labelText` prop of the `Checkbox`\ncomponent. This is useful if you need to pass information as part of the label.\nFor example, if a `Checkbox` label needs to display how many items that option\nhas, it can be displayed with the help of the `Flex` and `Spacer` components.\n\nNote: the width of `CheckboxGroup` is _not_ set to full width by default. In\norder to make this work, pass in the `isFullWidth` prop.\n\n<Canvas of={CheckboxGroupStories.LabelsUsingJSXElements} />\n\n## Indeterminate Example\n\nThe \"indeterminate\" state can be used when a group of checkboxes are not all\nchecked or unchecked. In the following example, if only one child checkebox is\nchecked, the parent checkbox will be in the \"indeterminate\" state. Once both\nchildren are checked, the parent will be in the \"checked\" state.\n\nThe following working example can be used in your application to keep track of\nthe checked and indeterminate states - taken and modified from Chakra's\n[Checkbox](https://chakra-ui.com/docs/form/checkbox#indeterminate) documentation.\nNote that this example is specifically using Reservoir Design System (DS)\n`Checkbox` and `CheckboxGroup` components.\n\n<Source\n  code={`\n  export function IndeterminateExample() {\n  const [checkedItems, setCheckedItems] = React.useState([false, false]);\n  const allChecked = checkedItems.every(Boolean);\n  const isIndeterminate = checkedItems.some(Boolean) && !allChecked;\n  return (\n    <CheckboxGroup\n      id=\"indeterminate\"\n      labelText=\"Indeterminate Example\"\n      name=\"indeterminate-example\"\n    >\n      <Checkbox\n        isChecked={allChecked}\n        isIndeterminate={isIndeterminate}\n        onChange={(e) => setCheckedItems([e.target.checked, e.target.checked])}\n        labelText=\"Parent Checkbox\"\n        id=\"parent-checkbox\"\n      />\n      <Checkbox\n        isChecked={checkedItems[0]}\n        onChange={(e) => setCheckedItems([e.target.checked, checkedItems[1]])}\n        labelText=\"Child Checkbox 1\"\n        id=\"child-checkbox-1\"\n      />\n      <Checkbox\n        isChecked={checkedItems[1]}\n        onChange={(e) => setCheckedItems([checkedItems[0], e.target.checked])}\n        labelText=\"Child Checkbox 2\"\n        id=\"child-checkbox-2\"\n      />\n    </CheckboxGroup>\n  )`}\n  language=\"tsx\"\n/>\n\n<Canvas of={CheckboxGroupStories.IndeterminateExample} />\n\n## Getting Checkbox Input Values\n\n### Controlled Component using name, defaultValue, and onChange props\n\nIf your application uses controlled React components and the DS CheckboxGroup\nmust be controlled, you can extract the data through the `name`, `defaultValue`,\nand `onChange` props. The `onChange` function will be called every time a new\n`Checkbox` value is checked or unchecked.\n\n <Source\n code={`\n const onChange = (data: string[]) => {\n  // This will return the values selected as an array of strings.\n  // Ex: [\"2\", \"4\"]\n  console.log(data);\n};\n// ...\n\n// Example of the DS CheckboxGroup instance with the function above:\n\n<CheckboxGroup\n  id=\"controlled-example\"\n  labelText=\"Checkbox Group\"\n  name=\"CheckboxExample\"\n  defaultValue={[\"2\"]}\n  onChange={onChange}\n>\n  <Checkbox id=\"checkbox-2\" value=\"2\" labelText=\"Checkbox 2\" />\n  <Checkbox id=\"checkbox-3\" value=\"3\" labelText=\"Checkbox 3\" />\n  <Checkbox id=\"checkbox-4\" value=\"4\" labelText=\"Checkbox 4\" />\n</CheckboxGroup>\n;`} language=\"jsx\"/>\n\n### Uncontrolled Component using ref's\n\nIf your application uses uncontrolled components, you can pass React `ref` props\nto the DS CheckboxGroup component to get the selected value from the DOM.\n\nThe following example is using the `register` React `ref` from the\n`react-hook-form` package.\n\n<Source \ncode={`\nimport { useFormContext, Controller } from \"react-hook-form\";\n// ...\nconst { register, handleSubmit, control } = useFormContext();\n// ...\nconst submitForm = (formData) => {\n  // This will return an object with all the DOM element values that were\n  // registered with a 'name' attribute.\n  // {\n  //   checkboxExample: [\"3\"]\n  // }\n  console.log(formData);\n  // ...\n};\n\n<form\n  onSubmit={handleSubmit(submitForm)}\n  method=\"post\"\n  action=\"/some/api/endpoint\"\n>\n  <Controller\n    as={\n      <CheckboxGroup\n        id=\"uncontrolled-example\"\n        labelText=\"Checkbox Group\"\n        name=\"checkboxExample\"\n        defaultValue={[\"3\"]}\n        ref={register()}\n      >\n        <Checkbox id=\"checkbox-2\" value=\"2\" labelText=\"Checkbox 2\" />\n        <Checkbox id=\"checkbox-3\" value=\"3\" labelText=\"Checkbox 3\" />\n        <Checkbox id=\"checkbox-4\" value=\"4\" labelText=\"Checkbox 4\" />\n      </CheckboxGroup>\n    }\n    name=\"checkboxExample\"\n    control={control}\n  />\n</form>\n;`} language=\"jsx\"/>\n\nThe above is specific to `react-hook-form` but a similar pattern can be used\nwith normal React `ref` values.\n\n<Source \ncode={`\nconst CheckboxGroupRef = React.createRef<HTMLInputElement>();\n// ...\n<CheckboxGroup\n  id=\"uncontrolled-example\"\n  labelText=\"Checkbox Group\"\n  name=\"checkboxExample\"\n  defaultValue={[\"3\"]}\n  ref={CheckboxGroupRef}\n>\n  <Checkbox id=\"checkbox-2\" value=\"2\" labelText=\"Checkbox 2\" />\n  <Checkbox id=\"checkbox-3\" value=\"3\" labelText=\"Checkbox 3\" />\n  <Checkbox id=\"checkbox-4\" value=\"4\" labelText=\"Checkbox 4\" />\n</CheckboxGroup>\n\n// ...\n// Get the value through:\nconst onSubmit = () => {\n// ...\nconst CheckboxGroupValue = CheckboxGroupRef.current.value;\n};`} language=\"jsx\"/>\n\n### Programmatically Update\n\nWithin the `CheckboxGroup`, individual `Checkbox`es can be updated programmatically\nthrough the `value` prop. Similar to the `defaultValue` prop, the `value` prop\nalso accepts an array of strings.\n\nWhen passing selected values through the `value` prop, the consuming app is now\ncontrolling the state of the values. By default, the `CheckboxGroup` component\nreturns the value(s) checked to the consuming app through the `onChange` callback.\nNote that the `defaultValue` prop is not necessary unless there are values that\nshould be checked when the component first renders.\n\nIn the following example, the `CheckboxGroup` component works as expected, but\nnow there are three (3) additional buttons that can update the selected checkboxes\nwithin the `CheckboxGroup` component. Open the browser's console to see the\n`onChange` callback being called _only_ when checkboxes are checked or unchecked.\nClicking on a button does not trigger the `onChange` callback but does update\nthe values.\n\n<Source\n  code={`\nexport function CheckboxGroupValuesUpdateExample() {\n  const [value, setValue] = useState([]);\n  const onClick1 = () => {\n    setValue([\"art\", \"science\", \"math\"]);\n  };\n  const onClick2 = () => {\n    setValue([\"math\", \"music\", \"magic\"]);\n  };\n  const onClick3 = () => {\n    setValue([\"physics\", \"science\", \"chemistry\"]);\n  };\n  const onChange = (data) => {\n    setValue(data);\n    console.log(\"Selected values:\", data);\n  };\n  return (\n    <VStack align=\"stretch\" spacing=\"m\">\n      <span>Set values to:</span>\n      <ButtonGroup>\n        <Button id=\"btn1\" onClick={onClick1}>\n          \"art\", \"science\", \"math\"\n        </Button>\n        <Button id=\"btn2\" onClick={onClick2}>\n          \"math\", \"music\", \"magic\"\n        </Button>\n        <Button id=\"btn3\" onClick={onClick3}>\n          \"physics\", \"science\", \"chemistry\"\n        </Button>\n      </ButtonGroup>\n      <CheckboxGroup\n        id=\"programmatically-update-example\"\n        labelText=\"Course Selection\"\n        name=\"courseSelection\"\n        onChange={onChange}\n        value={value}\n      >\n        <Checkbox id=\"art\" labelText=\"Art\" value=\"art\" />\n        <Checkbox id=\"chemistry\" labelText=\"Chemistry\" value=\"chemistry\" />\n        <Checkbox id=\"english\" labelText=\"English\" value=\"english\" />\n        <Checkbox id=\"magic\" labelText=\"Magic\" value=\"magic\" />\n        <Checkbox id=\"math\" labelText=\"Math\" value=\"math\" />\n        <Checkbox id=\"music\" labelText=\"Music\" value=\"music\" />\n        <Checkbox id=\"physics\" labelText=\"Physics\" value=\"physics\" />\n        <Checkbox id=\"science\" labelText=\"Science\" value=\"science\" />\n      </CheckboxGroup>\n    </VStack>\n  );\n}`}\n  language=\"jsx\"\n/>\n\n<Canvas of={CheckboxGroupStories.ProgrammaticallyUpdateValues} />\n"],"names":["_createMdxContent","props","_components","_provideComponents","_jsxs","_Fragment","_jsx","Meta","CheckboxGroupStories","Link","Description","Canvas","CheckboxGroupStories.WithControls","ArgTypes","CheckboxGroupStories.Layout","CheckboxGroupStories.Errored","CheckboxGroupStories.Required","CheckboxGroupStories.Disabled","CheckboxGroupStories.LabelsUsingJSXElements","Source","CheckboxGroupStories.IndeterminateExample","CheckboxGroupStories.ProgrammaticallyUpdateValues","MDXContent","MDXLayout"],"mappings":"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"}