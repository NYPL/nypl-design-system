import{j as a,a as L,F as j}from"./emotion-react-jsx-runtime.browser.esm-b12afd4d.js";import{r as O,R as _}from"./index-f2bd0723.js";import{H as S}from"./Heading-2ec2ea62.js";import{I as z}from"./Image-3405777f.js";import{f,i as x,B as u,L as T,u as D,j as F}from"./chakra-ui-layout.esm-b2fa9d31.js";function M(o){const{alt:t,aspectRatio:n,caption:s,component:l,credit:i,isAtEnd:d,isCentered:e,layout:y,size:g,src:C}=o,c=x("CardImage",{imageIsAtEnd:d,isCentered:e,layout:y,size:g});return a(u,{__css:c,children:a(z,{alt:t,caption:s,component:l,credit:i,aspectRatio:n,size:g,src:C})})}const q=f(S),w=f(o=>{const{children:t,...n}=o,s=x("CardContent");return t?a(u,{__css:s,...n,children:t}):null}),I=f(o=>{const{bottomBorder:t,children:n,isCentered:s,layout:l,topBorder:i,...d}=o,e=x("CardActions",{bottomBorder:t,isCentered:s,layout:l,topBorder:i});return n?a(u,{__css:e,...d,children:n}):null}),W=f(O.forwardRef(({className:o,children:t,id:n,mainActionLink:s,styles:l,...i},d)=>s?a(T,{id:n,className:o,ref:d,sx:l,...i,children:t}):a(u,{id:n,className:o,ref:d,__css:l,...i,children:t})));function Y({children:o,mainActionLink:t}){return t?a(F,{href:t,children:o}):a(j,{children:o})}const N=f(O.forwardRef((o,t)=>{const{backgroundColor:n,children:s,className:l,foregroundColor:i,id:d,imageProps:e={alt:"",aspectRatio:"square",caption:void 0,component:void 0,credit:void 0,isAtEnd:!1,size:"default",src:""},isAlignedRightActions:y=!1,isBordered:g,isCentered:C=!1,layout:c="column",mainActionLink:b,...E}=o,V=e.src||e.component,k=e.component?"original":e.aspectRatio,A={},h=[],v=[];let B=0;e.component&&e.aspectRatio&&console.warn("NYPL Reservoir Card: Both the `imageProps.component` and `imageProps.aspectRatio` props were set but `imageProps.aspectRatio` will be ignored in favor of the aspect ratio on `imageProps.component` prop."),n&&(A.backgroundColor=n),i&&(A.color=i);const m=D("Card",{hasImage:V,imageIsAtEnd:e.isAtEnd,isAlignedRightActions:y,isBordered:g,isCentered:C,layout:c,mainActionLink:b});return _.Children.map(s,(r,R)=>{const P=r.type===I||r.props.mdxType==="CardActions";if(r.type===q||r.props.mdxType==="CardHeading"){const p=B===0?a(Y,{mainActionLink:b,children:r.props.children}):r.props.children,H=_.cloneElement(r,{key:R,children:p,layout:c,__css:m.heading});h.push(H),B++}else if(r.type===w||r.props.mdxType==="CardContent"){const p=_.cloneElement(r,{key:R});h.push(p)}else if(P){const p=_.cloneElement(r,{key:R,isCentered:C,layout:c});y&&c==="row"?v.push(p):h.push(p)}}),L(W,{id:d,className:l,mainActionLink:b,ref:t,styles:{...m,...A},...E,children:[V&&a(M,{alt:e.alt,aspectRatio:k,caption:e.caption,component:e.component,credit:e.credit,isAtEnd:e.isAtEnd,layout:c,size:e.size,src:e.src?e.src:void 0}),a(u,{className:"card-body",__css:m.body,children:h}),v.length?a(u,{className:"card-right",__css:{...m.body,...m.actions},children:v}):null]})}));try{q.displayName="CardHeading",q.__docgenInfo={description:"",displayName:"CardHeading",props:{}}}catch{}try{w.displayName="CardContent",w.__docgenInfo={description:"",displayName:"CardContent",props:{}}}catch{}try{I.displayName="CardActions",I.__docgenInfo={description:"",displayName:"CardActions",props:{bottomBorder:{defaultValue:null,description:`Optional boolean value to control visibility of border on the bottom edge
of the card actions element`,name:"bottomBorder",required:!1,type:{name:"boolean"}},topBorder:{defaultValue:null,description:`Optional boolean value to control visibility of border on the top edge of
the card actions element`,name:"topBorder",required:!1,type:{name:"boolean"}},isCentered:{defaultValue:null,description:"Optional value to control the alignment of the text and elements.",name:"isCentered",required:!1,type:{name:"boolean"}},layout:{defaultValue:null,description:'Optional value to render the layout in a row or column.\nDefault is `"column"`.',name:"layout",required:!1,type:{name:'"column" | "row"'}}}}}catch{}try{N.displayName="Card",N.__docgenInfo={description:"",displayName:"Card",props:{className:{defaultValue:null,description:"Optional CSS class name to add.",name:"className",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"ID that other components can cross reference for accessibility purposes.",name:"id",required:!1,type:{name:"string"}},isCentered:{defaultValue:null,description:"Optional value to control the alignment of the text and elements.",name:"isCentered",required:!1,type:{name:"boolean"}},layout:{defaultValue:null,description:'Optional value to render the layout in a row or column.\nDefault is `"column"`.',name:"layout",required:!1,type:{name:'"column" | "row"'}},foregroundColor:{defaultValue:null,description:"Optional hex color value used to override the default text color.",name:"foregroundColor",required:!1,type:{name:"string"}},isBordered:{defaultValue:null,description:`Optional boolean value to control the visibility of a border around
the card.`,name:"isBordered",required:!1,type:{name:"boolean"}},imageProps:{defaultValue:null,description:"Object used to create and render the `Image` component.",name:"imageProps",required:!1,type:{name:"CardImageProps"}},isAlignedRightActions:{defaultValue:null,description:`Set CardActions to the right content side. This only works in
the row layout.`,name:"isAlignedRightActions",required:!1,type:{name:"boolean"}},mainActionLink:{defaultValue:null,description:"Main link to use when the full `Card` component should be clickable.",name:"mainActionLink",required:!1,type:{name:"string"}},styles:{defaultValue:null,description:"Additional object for styling the `Card`'s `div` wrapper.",name:"styles",required:!1,type:{name:"any"}}}}}catch{}export{N as C,q as a,w as b,I as c};
//# sourceMappingURL=Card-ecb67591.js.map
