{"version":3,"file":"RadioGroup-8ceb9bfa.js","sources":["../../../src/components/RadioGroup/RadioGroup.tsx"],"sourcesContent":["import {\n  chakra,\n  RadioGroup as ChakraRadioGroup,\n  Stack,\n  useMultiStyleConfig,\n} from \"@chakra-ui/react\";\nimport React, { forwardRef } from \"react\";\n\nimport Fieldset from \"../Fieldset/Fieldset\";\nimport HelperErrorText, {\n  HelperErrorTextType,\n} from \"../HelperErrorText/HelperErrorText\";\nimport { spacing } from \"../../theme/foundations/spacing\";\nimport Radio from \"../Radio/Radio\";\nimport { LayoutTypes } from \"../../helpers/types\";\n\nexport interface RadioGroupProps {\n  /** Additional class name. */\n  className?: string;\n  /** Populates the initial value of the input */\n  defaultValue?: string;\n  /** Optional string to populate the HelperErrorText for standard state */\n  helperText?: HelperErrorTextType;\n  /** ID that other components can cross reference for accessibility purposes */\n  id: string;\n  /** Optional string to populate the HelperErrorText for error state */\n  invalidText?: HelperErrorTextType;\n  /** Adds the 'disabled' prop to the input when true. */\n  isDisabled?: boolean;\n  /** Set's the `Radio`s' wrapper to be full width. */\n  isFullWidth?: boolean;\n  /** Adds the 'aria-invalid' attribute to the input and\n   * sets the error state when true. */\n  isInvalid?: boolean;\n  /** Adds the 'required' attribute to the input when true. */\n  isRequired?: boolean;\n  /** The radio group label displayed in a `legend` element if `showlabel` is\n   * true, or an \"aria-label\" if `showLabel` is false. */\n  labelText: string;\n  /** Renders the Radio buttons in a row or column (default). */\n  layout?: LayoutTypes;\n  /** The `name` prop indicates the form group for all the Radio children. */\n  name: string;\n  /** The action to perform on the `<input>`'s onChange function  */\n  onChange?: (value: string) => void;\n  /** Offers the ability to hide the helper/invalid text. */\n  showHelperInvalidText?: boolean;\n  /** Offers the ability to show the group's legend onscreen or hide it. Refer\n   * to the `labelText` property for more information. */\n  showLabel?: boolean;\n  /** Whether or not to display the \"(Required)\" text in the label text.\n   * True by default. */\n  showRequiredLabel?: boolean;\n}\n\nconst noop = () => {};\n\n/**\n * RadioGroup is a wrapper for DS `Radio` components that renders as a fieldset\n * HTML element along with optional helper text. The `name` prop is essential\n * for this form group element and is not needed for individual DS `Radio`\n * components when `RadioGroup` is used.\n */\nexport const RadioGroup = chakra(\n  forwardRef<HTMLDivElement, React.PropsWithChildren<RadioGroupProps>>(\n    (props, ref?) => {\n      const {\n        children,\n        className = \"\",\n        defaultValue,\n        helperText,\n        id,\n        invalidText,\n        isDisabled = false,\n        isFullWidth = false,\n        isInvalid = false,\n        isRequired = false,\n        labelText,\n        layout = \"column\",\n        name,\n        onChange,\n        showHelperInvalidText = true,\n        showLabel = true,\n        showRequiredLabel = true,\n        ...rest\n      } = props;\n      const [value, setValue] = React.useState(defaultValue);\n      const footnote: HelperErrorTextType = isInvalid\n        ? invalidText\n        : helperText;\n      const spacingProp = layout === \"column\" ? spacing.s : spacing.l;\n      const newChildren: JSX.Element[] = [];\n      // Get the Chakra-based styles for the custom elements in this component.\n      const styles = useMultiStyleConfig(\"RadioGroup\", { isFullWidth });\n      // Props for the `ChakraRadioGroup` component.\n      const radioGroupProps = {\n        name,\n        onChange: (selected: string) => {\n          setValue(selected);\n          onChange && onChange(selected);\n        },\n        ref,\n        value,\n      };\n\n      if (!id) {\n        console.warn(\n          \"NYPL Reservoir RadioGroup: This component's required `id` prop was not passed.\"\n        );\n      }\n\n      // Go through the Radio children and update them as needed.\n      React.Children.map(\n        children as JSX.Element,\n        (child: React.ReactElement, key) => {\n          if (child?.type !== Radio) {\n            // Special case for Storybook MDX documentation.\n            if (child.props?.mdxType && child.props?.mdxType === \"Radio\") {\n              noop();\n            } else {\n              console.warn(\n                \"NYPL Reservoir RadioGroup: Only `Radio` components are allowed \" +\n                  \"inside the `RadioGroup` component.\"\n              );\n            }\n          }\n\n          if (child !== undefined && child !== null) {\n            const newProps = {\n              key,\n              isDisabled,\n              isInvalid,\n              isRequired,\n            };\n            newChildren.push(React.cloneElement(child, newProps));\n          }\n        }\n      );\n\n      return (\n        <Fieldset\n          className={className}\n          id={`radio-group-${id}`}\n          isLegendHidden={!showLabel}\n          isRequired={isRequired}\n          legendText={labelText}\n          showRequiredLabel={showRequiredLabel}\n          {...rest}\n          __css={styles}\n        >\n          <ChakraRadioGroup {...radioGroupProps}>\n            <Stack direction={[layout]} spacing={spacingProp}>\n              {newChildren}\n            </Stack>\n          </ChakraRadioGroup>\n          <HelperErrorText\n            id={`${id}-helperErrorText`}\n            isInvalid={isInvalid}\n            isRenderedText={showHelperInvalidText}\n            text={footnote}\n            __css={styles.helperErrorText}\n          />\n        </Fieldset>\n      );\n    }\n  )\n);\n\nexport default RadioGroup;\n"],"names":["RadioGroup","chakra","forwardRef","props","ref","children","className","defaultValue","helperText","id","invalidText","isDisabled","isFullWidth","isInvalid","isRequired","labelText","layout","name","onChange","showHelperInvalidText","showLabel","showRequiredLabel","rest","value","setValue","React","footnote","spacingProp","spacing","newChildren","styles","useMultiStyleConfig","radioGroupProps","selected","child","key","Radio","_a","_b","newProps","jsxs","Fieldset","jsx","ChakraRadioGroup","Stack","HelperErrorText"],"mappings":"0XA+DO,MAAAA,EAAAC,EAAmBC,EAAA,WACxB,CAAAC,EAAAC,IAAA,CAEI,KAAA,CAAM,SAAAC,EACJ,UAAAC,EAAA,GACY,aAAAC,EACZ,WAAAC,EACA,GAAAC,EACA,YAAAC,EACA,WAAAC,EAAA,GACa,YAAAC,EAAA,GACC,UAAAC,EAAA,GACF,WAAAC,EAAA,GACC,UAAAC,EACb,OAAAC,EAAA,SACS,KAAAC,EACT,SAAAC,EACA,sBAAAC,EAAA,GACwB,UAAAC,EAAA,GACZ,kBAAAC,EAAA,GACQ,GAAAC,CACjB,EAAAnB,EAEL,CAAAoB,EAAAC,CAAA,EAAAC,EAAA,SAAAlB,CAAA,EACAmB,EAAAb,EAAAH,EAAAF,EAGAmB,EAAAX,IAAA,SAAAY,EAAA,EAAAA,EAAA,EACAC,EAAA,CAAA,EAEAC,EAAAC,EAAA,aAAA,CAAA,YAAAnB,CAAA,CAAA,EAEAoB,EAAA,CAAwB,KAAAf,EACtB,SAAAgB,GAAA,CAEET,EAAAS,CAAA,EACAf,GAAAA,EAAAe,CAAA,CAA6B,EAC/B,IAAA7B,EACA,MAAAmB,CACA,EAGF,OAAAd,GACE,QAAA,KAAQ,gFACN,EAKJgB,EAAA,SAAA,IAAepB,EACb,CAAA6B,EAAAC,IAAA,SAcE,IAZAD,GAAA,YAAAA,EAAA,QAAAE,KAEEC,EAAAH,EAAA,QAAA,MAAAG,EAAA,WAAAC,EAAAJ,EAAA,QAAA,YAAAI,EAAA,WAAA,SAGE,QAAA,KAAQ,mGACN,GAMNJ,GAAA,KAAA,CACE,MAAAK,EAAA,CAAiB,IAAAJ,EACf,WAAAxB,EACA,UAAAE,EACA,WAAAC,CACA,EAEFe,EAAA,KAAAJ,EAAA,aAAAS,EAAAK,CAAA,CAAA,EACF,CACF,EAGFC,EACEC,EAAC,CAAA,UAAAnC,EACC,GAAA,eAAAG,IACmB,eAAA,CAAAW,EACF,WAAAN,EACjB,WAAAC,EACY,kBAAAM,EACZ,GAAAC,EACI,MAAAQ,EACG,SAAA,CAEPY,EAAAC,EAAA,CAAA,GAAAX,EAAA,SAAAU,EAAAE,EAAA,CAAA,UAAA,CAAA5B,CAAA,EAAA,QAAAW,EAAA,SAAAE,CAAA,CAAA,EAAA,EAIAa,EACAG,EAAC,CAAA,GAAA,GAAApC,oBACQ,UAAAI,EACP,eAAAM,EACgB,KAAAO,EACV,MAAAI,EAAA,eACQ,CAAA,CAChB,CAAA,CAAA,CACF,CAEJ,CAEJ;;"}