{"version":3,"file":"Heading-2ec2ea62.js","sources":["../../../src/components/Heading/Heading.tsx"],"sourcesContent":["import {\n  chakra,\n  Heading as ChakraHeading,\n  useStyleConfig,\n} from \"@chakra-ui/react\";\nimport React, { forwardRef } from \"react\";\n\nimport Link from \"../Link/Link\";\n\nexport const headingSizesArray = [\n  \"primary\",\n  \"secondary\",\n  \"tertiary\",\n  \"callout\",\n] as const;\nexport const headingLevelsArray = [\n  \"one\",\n  \"two\",\n  \"three\",\n  \"four\",\n  \"five\",\n  \"six\",\n] as const;\n\nexport type HeadingSizes = typeof headingSizesArray[number];\nexport type HeadingLevels = typeof headingLevelsArray[number];\n\nexport interface HeadingProps {\n  /** Optional className that appears in addition to `heading` */\n  className?: string;\n  /** Optional ID that other components can cross reference for accessibility purposes */\n  id?: string;\n  /** Optional prop used to show capitalized text */\n  isCapitalized?: boolean;\n  /** Optional prop used to show upper case text */\n  isUppercase?: boolean;\n  /** Optional prop used to show lower case text */\n  isLowercase?: boolean;\n  /** Optional number 1-6 used to create the `<h*>` tag; if prop is not passed,\n   * `Heading` will default to `<h2>` */\n  level?: HeadingLevels;\n  /** Optional size used to override the default styles of the semantic HTM\n   * `<h>` elements */\n  size?: HeadingSizes;\n  /** Optional prop used to remove default spacing */\n  noSpace?: boolean;\n  /** Inner text of the `<h*>` element */\n  text?: string;\n  /** Optional URL that header points to; when `url` prop is passed to\n   * `Heading`, a child `<a>` element is created and the heading text becomes\n   * an active link */\n  url?: string;\n  /** Optional className for the URL when the `url` prop is passed */\n  urlClass?: string;\n}\n\n/** Map the word heading level to the number heading level. The default is 2. */\nconst getMappedLevel = (level = \"two\") => {\n  const levelMap = {\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n  };\n  return levelMap[level] || 2;\n};\n\nexport const Heading = chakra(\n  forwardRef<HTMLHeadingElement, React.PropsWithChildren<HeadingProps>>(\n    (props, ref?) => {\n      const {\n        className,\n        id,\n        isCapitalized,\n        isUppercase,\n        isLowercase,\n        level = \"two\",\n        noSpace,\n        size,\n        text,\n        url,\n        urlClass,\n        ...rest\n      } = props;\n      const finalLevel = getMappedLevel(level);\n      const variant = size ? size : `h${finalLevel}`;\n      const styles = useStyleConfig(\"Heading\", {\n        variant,\n        isCapitalized,\n        isUppercase,\n        isLowercase,\n        noSpace,\n      });\n      // Combine native base styles with any additional styles.\n      // This is used in the `Hero` and `Notification` components.\n      const asHeading: any = `h${finalLevel}`;\n\n      if (!props.children && !text) {\n        throw new Error(\n          \"NYPL Reservoir Heading: No children or value was passed to the `text` prop.\"\n        );\n      }\n\n      if (React.Children.count(props.children) > 1) {\n        // Catching the error because React's error isn't as helpful.\n        throw new Error(\n          \"NYPL Reservoir Heading: Only pass one child into Heading.\"\n        );\n      }\n\n      let textCase = 0;\n      if (isCapitalized) {\n        textCase++;\n      }\n      if (isUppercase) {\n        textCase++;\n      }\n      if (isLowercase) {\n        textCase++;\n      }\n\n      if (textCase > 1) {\n        console.warn(\n          \"NYPL Reservoir Heading: Multiple text case props have been passed \" +\n            \"and the component will not render properly.\"\n        );\n      }\n\n      const contentToRender = props.children ? props.children : text;\n      const content = url ? (\n        <Link className={urlClass} href={url} id={`${id}-link`}>\n          {contentToRender}\n        </Link>\n      ) : (\n        contentToRender\n      );\n\n      return (\n        <ChakraHeading\n          as={asHeading}\n          className={className}\n          id={id}\n          ref={ref}\n          sx={styles}\n          {...rest}\n        >\n          {content}\n        </ChakraHeading>\n      );\n    }\n  )\n);\n\nexport default Heading;\n"],"names":["headingSizesArray","headingLevelsArray","getMappedLevel","level","Heading","chakra","forwardRef","props","ref","className","id","isCapitalized","isUppercase","isLowercase","noSpace","size","text","url","urlClass","rest","finalLevel","variant","styles","useStyleConfig","asHeading","React","textCase","contentToRender","content","jsx","Link","ChakraHeading"],"mappings":"mOASO,MAAAA,EAAA,CAA0B,UAC/B,YACA,WACA,SAEF,EACOC,EAAA,CAA2B,MAChC,MACA,QACA,OACA,OACA,KAEF,EAmCAC,EAAA,CAAAC,EAAA,SACE,CAAiB,IAAA,EACV,IAAA,EACA,MAAA,EACE,KAAA,EACD,KAAA,EACA,IAAA,CACD,GAEPA,CAAA,GAAA,EAGKC,EAAAC,EAAgBC,EAAA,WACrB,CAAAC,EAAAC,IAAA,CAEI,KAAA,CAAM,UAAAC,EACJ,GAAAC,EACA,cAAAC,EACA,YAAAC,EACA,YAAAC,EACA,MAAAV,EAAA,MACQ,QAAAW,EACR,KAAAC,EACA,KAAAC,EACA,IAAAC,EACA,SAAAC,EACA,GAAAC,CACG,EAAAZ,EAELa,EAAAlB,EAAAC,CAAA,EACAkB,EAAAN,GAAA,IAAAK,IACAE,EAAAC,EAAA,UAAA,CAAyC,QAAAF,EACvC,cAAAV,EACA,YAAAC,EACA,YAAAC,EACA,QAAAC,CACA,CAAA,EAIFU,EAAA,IAAAJ,IAEA,GAAA,CAAAb,EAAA,UAAA,CAAAS,EACE,MAAA,IAAA,MAAU,6EACR,EAIJ,GAAAS,EAAA,SAAA,MAAAlB,EAAA,QAAA,EAAA,EAEE,MAAA,IAAA,MAAU,2DACR,EAIJ,IAAAmB,EAAA,EACAf,GACEe,IAEFd,GACEc,IAEFb,GACEa,IAGFA,EAAA,GACE,QAAA,KAAQ,+GACN,EAKJ,MAAAC,EAAApB,EAAA,SAAAA,EAAA,SAAAS,EACAY,EAAAX,EAAAY,EAAAC,EAAA,CAAA,UAAAZ,EAAA,KAAAD,EAAA,GAAA,GAAAP,SAAA,SAAAiB,CAAA,CAAA,EAAAA,EAQA,OAAAE,EACEE,EAAC,CAAA,GAAAP,EACK,UAAAf,EACJ,GAAAC,EACA,IAAAF,EACA,GAAAc,EACI,GAAAH,EACA,SAAAS,CAEH,CAAA,CACH,CAEJ,CAEJ"}