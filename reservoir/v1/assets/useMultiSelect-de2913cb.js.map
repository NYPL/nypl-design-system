{"version":3,"file":"useMultiSelect-de2913cb.js","sources":["../../../src/hooks/useMultiSelect.ts"],"sourcesContent":["import { useState } from \"react\";\nimport {\n  MultiSelectItem,\n  SelectedItems,\n} from \"../components/MultiSelect/MultiSelect\";\n\n/**\n * The useMultiSelect hook returns an object containing all the functions and state needed to handle the selectedItems of a `MultiSelect` component.\n * It can be used in conjunction with one single `MultiSelect` component as well as a group of `MultiSelect`s in the `MultiSelectGroup` component.\n * The returned object includes the functions onChange, onClear, onMixedStateChange for handling any changes to the selection of items\n * and the current state of the selection: selectedItems.\n */\n\nexport default function useMultiSelect(initialState?: SelectedItems) {\n  const [selectedItems, setSelectedItems] = useState<SelectedItems | {}>(\n    initialState !== undefined ? initialState : {}\n  );\n\n  /**\n   * handleChange is used for both MultiSelect variants. It handles the state for checkbox options that either have no child options or are child options themselves.\n   * It accepts two arguments - the id of the checkbox option and the id of the MultiSelect component.\n   */\n  const handleChange = (itemId: string, multiSelectId: string) => {\n    let itemIds;\n    // Check if the multiSelect already exists in the state.\n    if (selectedItems.hasOwnProperty(multiSelectId)) {\n      // Make a copy of the existing selected items.\n      itemIds = selectedItems[multiSelectId].items.slice();\n      // If itemId is in the selectedItems, remove it from the array.\n      if (selectedItems[multiSelectId].items.indexOf(itemId) > -1) {\n        itemIds = itemIds.filter((id) => id !== itemId);\n      } else {\n        // Add it to the array, but modify the copy, not the original.\n        itemIds.push(itemId);\n      }\n      // If there were no items from the multiSelect in the selectedItems before\n    } else {\n      // Add the itemId to the itemsIds\n      itemIds = [];\n      itemIds.push(itemId);\n    }\n    // Update selectedItems on state to reflect the new selection\n    setSelectedItems({\n      ...selectedItems,\n      [multiSelectId]: {\n        items: itemIds,\n      },\n    });\n  };\n\n  /**\n   * handleMixedStateChange is used only for the \"dialog\" variant. It handles the state for checkbox options with child options.\n   * It accepts three arguments - the id of the checkbox option (parentId), the id of the MultiSelect component and the items array of the MultiSelect.\n   */\n  const handleMixedStateChange = (\n    parentId: string,\n    multiSelectId: string,\n    items: MultiSelectItem[]\n  ) => {\n    // Build an array of child items.\n    const childItems = items\n      .filter((item: MultiSelectItem) => item.id === parentId)[0]\n      .children.map((child) => child.id);\n\n    let newItems;\n    // If some items of the multiSelect are already selected\n    if (selectedItems[multiSelectId] !== undefined) {\n      // If all children of the parent are already selected\n      if (\n        childItems.every((childItem) =>\n          selectedItems[multiSelectId].items.includes(childItem)\n        )\n      ) {\n        // Remove all children from the selectedItems array (unselect all child checkbox options)\n        newItems = selectedItems[multiSelectId].items.filter(\n          (stateItem) => !childItems.includes(stateItem)\n        );\n      } else {\n        // Else add missing childItems.\n        newItems = [\n          ...childItems.filter(\n            (childItem) =>\n              !selectedItems[multiSelectId].items.includes(childItem)\n          ),\n          ...selectedItems[multiSelectId].items,\n        ];\n      }\n      // If no items of this multiSelect were selected before\n    } else {\n      newItems = childItems;\n    }\n    // Update selectedItems on state to reflect the new selection\n    setSelectedItems({\n      ...selectedItems,\n      [multiSelectId]: {\n        items: newItems,\n      },\n    });\n  };\n\n  /**\n   * handleClear is used for both MultiSelect variants. It will remove all selected items of specific MultiSelect component from the selectedItems array.\n   * It accepts one argument - the id of the MultiSelect component.\n   */\n  const handleClear = (multiSelectId: string) => {\n    let newSelectedItems = {};\n    for (let key of Object.keys(selectedItems)) {\n      if (key !== multiSelectId) {\n        newSelectedItems[key] = selectedItems[key];\n      }\n    }\n    setSelectedItems(newSelectedItems);\n  };\n\n  /**\n   * handleClearAll is used to clear all MultiSelects of a group. It will remove all selected items.\n   */\n  const handleClearAll = () => setSelectedItems({});\n\n  return {\n    selectedItems,\n    setSelectedItems: (newState: SelectedItems) => setSelectedItems(newState),\n    onChange: handleChange,\n    onMixedStateChange: handleMixedStateChange,\n    onClear: handleClear,\n    onClearAll: handleClearAll,\n  };\n}\n"],"names":["useMultiSelect","initialState","selectedItems","setSelectedItems","useState","newState","itemId","multiSelectId","itemIds","id","parentId","items","childItems","item","child","newItems","childItem","stateItem","newSelectedItems","key"],"mappings":"wCAaA,SAAwBA,EAAeC,EAA8B,CAC7D,KAAA,CAACC,EAAeC,CAAgB,EAAIC,EAAA,SACxCH,IAAiB,OAAYA,EAAe,CAAC,CAAA,EAwGxC,MAAA,CACL,cAAAC,EACA,iBAAmBG,GAA4BF,EAAiBE,CAAQ,EACxE,SApGmB,CAACC,EAAgBC,IAA0B,CAC1D,IAAAC,EAEAN,EAAc,eAAeK,CAAa,GAE5CC,EAAUN,EAAcK,CAAa,EAAE,MAAM,MAAM,EAE/CL,EAAcK,CAAa,EAAE,MAAM,QAAQD,CAAM,EAAI,GACvDE,EAAUA,EAAQ,OAAQC,GAAOA,IAAOH,CAAM,EAG9CE,EAAQ,KAAKF,CAAM,IAKrBE,EAAU,CAAA,EACVA,EAAQ,KAAKF,CAAM,GAGJH,EAAA,CACf,GAAGD,EACH,CAACK,CAAa,EAAG,CACf,MAAOC,CACT,CAAA,CACD,CAAA,EA4ED,mBArE6B,CAC7BE,EACAH,EACAI,IACG,CAEH,MAAMC,EAAaD,EAChB,OAAQE,GAA0BA,EAAK,KAAOH,CAAQ,EAAE,CAAC,EACzD,SAAS,IAAKI,GAAUA,EAAM,EAAE,EAE/B,IAAAC,EAEAb,EAAcK,CAAa,IAAM,OAGjCK,EAAW,MAAOI,GAChBd,EAAcK,CAAa,EAAE,MAAM,SAASS,CAAS,CAAA,EAI5CD,EAAAb,EAAcK,CAAa,EAAE,MAAM,OAC3CU,GAAc,CAACL,EAAW,SAASK,CAAS,CAAA,EAIpCF,EAAA,CACT,GAAGH,EAAW,OACXI,GACC,CAACd,EAAcK,CAAa,EAAE,MAAM,SAASS,CAAS,CAC1D,EACA,GAAGd,EAAcK,CAAa,EAAE,KAAA,EAKzBQ,EAAAH,EAGIT,EAAA,CACf,GAAGD,EACH,CAACK,CAAa,EAAG,CACf,MAAOQ,CACT,CAAA,CACD,CAAA,EA2BD,QApBmBR,GAA0B,CAC7C,IAAIW,EAAmB,CAAA,EACvB,QAASC,KAAO,OAAO,KAAKjB,CAAa,EACnCiB,IAAQZ,IACOW,EAAAC,CAAG,EAAIjB,EAAciB,CAAG,GAG7ChB,EAAiBe,CAAgB,CAAA,EAcjC,WARqB,IAAMf,EAAiB,CAAA,CAAE,CAQlC,CAEhB"}