{"version":3,"file":"ProgressIndicator-3cc3149d.js","sources":["../../../node_modules/@chakra-ui/progress/dist/chakra-ui-progress.esm.js","../../../src/components/ProgressIndicator/ProgressIndicator.tsx"],"sourcesContent":["import { keyframes, chakra, useStyles, omitThemingProps, useMultiStyleConfig, StylesProvider } from '@chakra-ui/system';\nimport { valueToPercent, isFunction, isUndefined, __DEV__ } from '@chakra-ui/utils';\nimport * as React from 'react';\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar spin = keyframes({\n  \"0%\": {\n    strokeDasharray: \"1, 400\",\n    strokeDashoffset: \"0\"\n  },\n  \"50%\": {\n    strokeDasharray: \"400, 400\",\n    strokeDashoffset: \"-100\"\n  },\n  \"100%\": {\n    strokeDasharray: \"400, 400\",\n    strokeDashoffset: \"-260\"\n  }\n});\nvar rotate = keyframes({\n  \"0%\": {\n    transform: \"rotate(0deg)\"\n  },\n  \"100%\": {\n    transform: \"rotate(360deg)\"\n  }\n});\nvar progress = keyframes({\n  \"0%\": {\n    left: \"-40%\"\n  },\n  \"100%\": {\n    left: \"100%\"\n  }\n});\nvar stripe = keyframes({\n  from: {\n    backgroundPosition: \"1rem 0\"\n  },\n  to: {\n    backgroundPosition: \"0 0\"\n  }\n});\n\n/**\n * Get the common `aria-*` attributes for both the linear and circular\n * progress components.\n */\nfunction getProgressProps(options) {\n  var _options$value = options.value,\n      value = _options$value === void 0 ? 0 : _options$value,\n      min = options.min,\n      max = options.max,\n      valueText = options.valueText,\n      getValueText = options.getValueText,\n      isIndeterminate = options.isIndeterminate;\n  var percent = valueToPercent(value, min, max);\n\n  var getAriaValueText = function getAriaValueText() {\n    if (value == null) return undefined;\n    return isFunction(getValueText) ? getValueText(value, percent) : valueText;\n  };\n\n  return {\n    bind: {\n      \"data-indeterminate\": isIndeterminate ? \"\" : undefined,\n      \"aria-valuemax\": max,\n      \"aria-valuemin\": min,\n      \"aria-valuenow\": isIndeterminate ? undefined : value,\n      \"aria-valuetext\": getAriaValueText(),\n      role: \"progressbar\"\n    },\n    percent: percent,\n    value: value\n  };\n}\n\nvar _excluded$1 = [\"size\", \"isIndeterminate\"],\n    _excluded2$1 = [\"size\", \"max\", \"min\", \"valueText\", \"getValueText\", \"value\", \"capIsRound\", \"children\", \"thickness\", \"color\", \"trackColor\", \"isIndeterminate\"];\n\nvar Circle = function Circle(props) {\n  return /*#__PURE__*/React.createElement(chakra.circle, _extends({\n    cx: 50,\n    cy: 50,\n    r: 42,\n    fill: \"transparent\"\n  }, props));\n};\n\nif (__DEV__) {\n  Circle.displayName = \"Circle\";\n}\n\nvar Shape = function Shape(props) {\n  var size = props.size,\n      isIndeterminate = props.isIndeterminate,\n      rest = _objectWithoutPropertiesLoose(props, _excluded$1);\n\n  return /*#__PURE__*/React.createElement(chakra.svg, _extends({\n    viewBox: \"0 0 100 100\",\n    __css: {\n      width: size,\n      height: size,\n      animation: isIndeterminate ? rotate + \" 2s linear infinite\" : undefined\n    }\n  }, rest));\n};\n\nif (__DEV__) {\n  Shape.displayName = \"Shape\";\n}\n\n/**\n * CircularProgress is used to indicate the progress of an activity.\n * It is built using `svg` and `circle` components with support for\n * theming and `indeterminate` state\n *\n * @see Docs https://chakra-ui.com/circularprogress\n * @todo add theming support for circular progress\n */\nvar CircularProgress = function CircularProgress(props) {\n  var _progress$percent;\n\n  var _props$size = props.size,\n      size = _props$size === void 0 ? \"48px\" : _props$size,\n      _props$max = props.max,\n      max = _props$max === void 0 ? 100 : _props$max,\n      _props$min = props.min,\n      min = _props$min === void 0 ? 0 : _props$min,\n      valueText = props.valueText,\n      getValueText = props.getValueText,\n      value = props.value,\n      capIsRound = props.capIsRound,\n      children = props.children,\n      _props$thickness = props.thickness,\n      thickness = _props$thickness === void 0 ? \"10px\" : _props$thickness,\n      _props$color = props.color,\n      color = _props$color === void 0 ? \"#0078d4\" : _props$color,\n      _props$trackColor = props.trackColor,\n      trackColor = _props$trackColor === void 0 ? \"#edebe9\" : _props$trackColor,\n      isIndeterminate = props.isIndeterminate,\n      rest = _objectWithoutPropertiesLoose(props, _excluded2$1);\n\n  var progress = getProgressProps({\n    min: min,\n    max: max,\n    value: value,\n    valueText: valueText,\n    getValueText: getValueText,\n    isIndeterminate: isIndeterminate\n  });\n  var determinant = isIndeterminate ? undefined : ((_progress$percent = progress.percent) != null ? _progress$percent : 0) * 2.64;\n  var strokeDasharray = isUndefined(determinant) ? undefined : determinant + \" \" + (264 - determinant);\n  var indicatorProps = isIndeterminate ? {\n    css: {\n      animation: spin + \" 1.5s linear infinite\"\n    }\n  } : {\n    strokeDashoffset: 66,\n    strokeDasharray: strokeDasharray,\n    transitionProperty: \"stroke-dasharray, stroke\",\n    transitionDuration: \"0.6s\",\n    transitionTimingFunction: \"ease\"\n  };\n  var rootStyles = {\n    display: \"inline-block\",\n    position: \"relative\",\n    verticalAlign: \"middle\",\n    fontSize: size\n  };\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: \"chakra-progress\"\n  }, progress.bind, rest, {\n    __css: rootStyles\n  }), /*#__PURE__*/React.createElement(Shape, {\n    size: size,\n    isIndeterminate: isIndeterminate\n  }, /*#__PURE__*/React.createElement(Circle, {\n    stroke: trackColor,\n    strokeWidth: thickness,\n    className: \"chakra-progress__track\"\n  }), /*#__PURE__*/React.createElement(Circle, _extends({\n    stroke: color,\n    strokeWidth: thickness,\n    className: \"chakra-progress__indicator\",\n    strokeLinecap: capIsRound ? \"round\" : undefined\n    /**\n     * fix issue in Safari where indictor still shows when value is 0\n     * @see Issue https://github.com/chakra-ui/chakra-ui/issues/3754\n     */\n    ,\n    opacity: progress.value === 0 && !isIndeterminate ? 0 : undefined\n  }, indicatorProps))), children);\n};\n\nif (__DEV__) {\n  CircularProgress.displayName = \"CircularProgress\";\n}\n/**\n * CircularProgress component label. In most cases it is a numeric indicator\n * of the circular progress component's value\n */\n\n\nvar CircularProgressLabel = chakra(\"div\", {\n  baseStyle: {\n    fontSize: \"0.24em\",\n    top: \"50%\",\n    left: \"50%\",\n    width: \"100%\",\n    textAlign: \"center\",\n    position: \"absolute\",\n    transform: \"translate(-50%, -50%)\"\n  }\n});\n\nif (__DEV__) {\n  CircularProgressLabel.displayName = \"CircularProgressLabel\";\n}\n\nvar _excluded = [\"min\", \"max\", \"value\", \"isIndeterminate\"],\n    _excluded2 = [\"value\", \"min\", \"max\", \"hasStripe\", \"isAnimated\", \"children\", \"borderRadius\", \"isIndeterminate\", \"aria-label\", \"aria-labelledby\"];\n\n/**\n * ProgressLabel is used to show the numeric value of the progress.\n * @see Docs https://chakra-ui.com/progress\n */\nvar ProgressLabel = function ProgressLabel(props) {\n  var styles = useStyles();\n\n  var labelStyles = _extends({\n    top: \"50%\",\n    left: \"50%\",\n    width: \"100%\",\n    textAlign: \"center\",\n    position: \"absolute\",\n    transform: \"translate(-50%, -50%)\"\n  }, styles.label);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, props, {\n    __css: labelStyles\n  }));\n};\n\nif (__DEV__) {\n  ProgressLabel.displayName = \"ProgressLabel\";\n}\n\n/**\n * ProgressFilledTrack (Linear)\n *\n * The progress component that visually indicates the current level of the progress bar.\n * It applies `background-color` and changes its width.\n *\n * @see Docs https://chakra-ui.com/progress\n */\nvar ProgressFilledTrack = function ProgressFilledTrack(props) {\n  var min = props.min,\n      max = props.max,\n      value = props.value,\n      isIndeterminate = props.isIndeterminate,\n      rest = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var progress = getProgressProps({\n    value: value,\n    min: min,\n    max: max,\n    isIndeterminate: isIndeterminate\n  });\n  var styles = useStyles();\n\n  var trackStyles = _extends({\n    height: \"100%\"\n  }, styles.filledTrack);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    style: _extends({\n      width: progress.percent + \"%\"\n    }, rest.style)\n  }, progress.bind, rest, {\n    __css: trackStyles\n  }));\n};\n\n/**\n * Progress (Linear)\n *\n * Progress is used to display the progress status for a task that takes a long\n * time or consists of several steps.\n *\n * It includes accessible attributes to help assistive technologies understand\n * and speak the progress values.\n *\n * @see Docs https://chakra-ui.com/progress\n */\nvar Progress = function Progress(props) {\n  var _styles$track;\n\n  var _omitThemingProps = omitThemingProps(props),\n      value = _omitThemingProps.value,\n      _omitThemingProps$min = _omitThemingProps.min,\n      min = _omitThemingProps$min === void 0 ? 0 : _omitThemingProps$min,\n      _omitThemingProps$max = _omitThemingProps.max,\n      max = _omitThemingProps$max === void 0 ? 100 : _omitThemingProps$max,\n      hasStripe = _omitThemingProps.hasStripe,\n      isAnimated = _omitThemingProps.isAnimated,\n      children = _omitThemingProps.children,\n      propBorderRadius = _omitThemingProps.borderRadius,\n      isIndeterminate = _omitThemingProps.isIndeterminate,\n      ariaLabel = _omitThemingProps[\"aria-label\"],\n      ariaLabelledBy = _omitThemingProps[\"aria-labelledby\"],\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, _excluded2);\n\n  var styles = useMultiStyleConfig(\"Progress\", props);\n  var borderRadius = propBorderRadius != null ? propBorderRadius : (_styles$track = styles.track) == null ? void 0 : _styles$track.borderRadius;\n  var stripeAnimation = {\n    animation: stripe + \" 1s linear infinite\"\n  };\n  /**\n   * We should not use stripe if it is `indeterminate`\n   */\n\n  var shouldAddStripe = !isIndeterminate && hasStripe;\n  var shouldAnimateStripe = shouldAddStripe && isAnimated;\n  /**\n   * Generate styles for stripe and stripe animation\n   */\n\n  var css = _extends({}, shouldAnimateStripe && stripeAnimation, isIndeterminate && {\n    position: \"absolute\",\n    willChange: \"left\",\n    minWidth: \"50%\",\n    animation: progress + \" 1s ease infinite normal none running\"\n  });\n\n  var trackStyles = _extends({\n    overflow: \"hidden\",\n    position: \"relative\"\n  }, styles.track);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    borderRadius: borderRadius,\n    __css: trackStyles\n  }, rest), /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(ProgressFilledTrack, {\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    min: min,\n    max: max,\n    value: value,\n    isIndeterminate: isIndeterminate,\n    css: css,\n    borderRadius: borderRadius\n  }), children));\n};\n\nif (__DEV__) {\n  Progress.displayName = \"Progress\";\n}\n\nexport { CircularProgress, CircularProgressLabel, Progress, ProgressLabel };\n","import {\n  Box,\n  chakra,\n  CircularProgress as ChakraCircularProgress,\n  CircularProgressLabel as ChakraCircularProgressLabel,\n  Progress as ChakraProgress,\n  useMultiStyleConfig,\n} from \"@chakra-ui/react\";\nimport React, { forwardRef } from \"react\";\n\nimport Label from \"../Label/Label\";\n\nexport const progressIndicatorSizesArray = [\"default\", \"small\"] as const;\nexport const progressIndicatorTypesArray = [\"circular\", \"linear\"] as const;\n\nexport type ProgressIndicatorSizes = typeof progressIndicatorSizesArray[number];\nexport type ProgressIndicatorTypes = typeof progressIndicatorTypesArray[number];\n\nexport interface ProgressIndicatorProps {\n  /** The darkMode prop is deprecated and should no longer be used. */\n  darkMode?: boolean;\n  /** ID that other components can cross reference for accessibility purposes. */\n  id: string;\n  /** Whether the `ProgressIndicator` should be linear or circular. */\n  indicatorType?: ProgressIndicatorTypes;\n  /** Whether the progress animation should display because the `value` prop is\n   * not known. When this is set to `true`, the `value` prop will be ignored. */\n  isIndeterminate?: boolean;\n  /** The text to display in an HTML `label` element. */\n  labelText: string;\n  /** Visually show or hide the label text. When set to `false`, then the label\n   * text will be added to the parent component as its `aria-label` attribute. */\n  showLabel?: boolean;\n  /** The size of the linear or circular progress. */\n  size?: ProgressIndicatorSizes;\n  /** A number between 0 to 100 that defines the progress' value. */\n  value?: number;\n}\n\n/**\n * A component that displays a progress status for any task that takes a long\n * time to complete or consists of multiple steps. Examples include downloading,\n * uploading, or processing.\n */\nexport const ProgressIndicator = chakra(\n  forwardRef<HTMLDivElement, ProgressIndicatorProps>((props, ref?) => {\n    const {\n      darkMode = false,\n      id,\n      indicatorType = \"linear\",\n      isIndeterminate = false,\n      labelText,\n      showLabel = true,\n      size = \"default\",\n      value = 0,\n      ...rest\n    } = props;\n    const styles = useMultiStyleConfig(\"ProgressIndicator\", {\n      darkMode,\n      size,\n    });\n    let finalValue = value;\n    if (!id) {\n      console.warn(\n        \"NYPL Reservoir Progress Indicator: This component's required `id` prop was not passed.\"\n      );\n    }\n    if (finalValue < 0 || finalValue > 100) {\n      console.warn(\n        \"NYPL Reservoir ProgressIndicator: An invalid value was passed for the\" +\n          \" `value` prop, so 0 will be used. A valid value should be a number\" +\n          \" between 0 and 100.\"\n      );\n      finalValue = 0;\n    }\n    const progressProps = {\n      id,\n      // If the label is visually shown, associate it with the progress indicator.\n      // Otherwise, the `aria-label` will be added.\n      \"aria-label\": showLabel ? undefined : labelText,\n      \"aria-labelledby\": showLabel ? `${id}-label` : undefined,\n      // If `isIndeterminate` is true, then it overrides the `value` prop.\n      isIndeterminate: isIndeterminate || undefined,\n      value: isIndeterminate ? undefined : finalValue,\n    };\n    const progressComponent = (indicatorType: ProgressIndicatorTypes) => {\n      // Only display the percentage text for the default size, not in the\n      // indeterminate state, and when `showLabel` is true.\n      if (indicatorType === \"circular\") {\n        // For the small size, since the label won't be visible, we need to add\n        // it to the parent component's `aria-label` attribute.\n        if (size === \"small\") {\n          progressProps[\"aria-label\"] = labelText;\n        }\n        return (\n          <Box __css={styles.circularContainer}>\n            <ChakraCircularProgress {...progressProps} sx={styles.circular}>\n              {showLabel && !isIndeterminate && size !== \"small\" && (\n                <ChakraCircularProgressLabel>\n                  {finalValue}%\n                </ChakraCircularProgressLabel>\n              )}\n            </ChakraCircularProgress>\n            {showLabel && size !== \"small\" && (\n              <Label id={`${id}-label`} htmlFor={id}>\n                {labelText}\n              </Label>\n            )}\n          </Box>\n        );\n      }\n      // The Linear progress indicator is the default.\n      return (\n        <>\n          {showLabel && (\n            <Label id={`${id}-label`} htmlFor={id}>\n              {labelText}\n            </Label>\n          )}\n          <Box __css={styles.linearContainer}>\n            <ChakraProgress {...progressProps} sx={styles.linear} />\n            {showLabel && !isIndeterminate && (\n              <Box __css={styles.linearPercentage}>{finalValue}%</Box>\n            )}\n          </Box>\n        </>\n      );\n    };\n\n    return (\n      <Box ref={ref} __css={styles} {...rest}>\n        {progressComponent(indicatorType)}\n      </Box>\n    );\n  })\n);\n\nexport default ProgressIndicator;\n"],"names":["_objectWithoutPropertiesLoose","source","excluded","target","sourceKeys","key","_extends","i","spin","keyframes","rotate","progress","stripe","getProgressProps","options","_options$value","value","min","max","valueText","getValueText","isIndeterminate","percent","valueToPercent","getAriaValueText","isFunction","_excluded$1","_excluded2$1","Circle","props","React.createElement","chakra","Shape","size","rest","CircularProgress","_progress$percent","_props$size","_props$max","_props$min","capIsRound","children","_props$thickness","thickness","_props$color","color","_props$trackColor","trackColor","determinant","strokeDasharray","isUndefined","indicatorProps","rootStyles","CircularProgressLabel","_excluded","_excluded2","ProgressFilledTrack","styles","useStyles","trackStyles","Progress","_styles$track","_omitThemingProps","omitThemingProps","_omitThemingProps$min","_omitThemingProps$max","hasStripe","isAnimated","propBorderRadius","ariaLabel","ariaLabelledBy","useMultiStyleConfig","borderRadius","stripeAnimation","shouldAddStripe","shouldAnimateStripe","css","StylesProvider","progressIndicatorSizesArray","progressIndicatorTypesArray","ProgressIndicator","forwardRef","ref","darkMode","id","indicatorType","labelText","showLabel","finalValue","progressProps","jsx","Box","indicatorType2","jsxs","ChakraCircularProgress","ChakraCircularProgressLabel","Label","Fragment","ChakraProgress"],"mappings":"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","x_google_ignoreList":[0]}