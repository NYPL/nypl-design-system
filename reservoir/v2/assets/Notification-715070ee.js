import{j as o,a as y}from"./emotion-react-jsx-runtime.browser.esm-49aea89b.js";import{R as x,r as q}from"./index-0cbcd92a.js";import{u as A}from"./useDSHeading-94e72700.js";import{B as L}from"./Button-948e9be8.js";import{H as $}from"./Heading-7eebc756.js";import{I}from"./Icon-4eeffe51.js";import{a as _,u as C,B as f,f as P,b as j}from"./chakra-ui-layout.esm-e0dbb94e.js";const X=["standard","announcement","warning"],b=_(i=>{const{children:t,icon:a,id:s,isCentered:l,notificationType:r,...e}=i,n=C("NotificationHeading",{icon:a,isCentered:l,notificationType:r}),c=t?typeof t=="string"?o($,{id:`${s}-heading`,level:"h4",noSpace:!0,size:"heading6",__css:n.heading,children:t}):x.cloneElement(t,{__css:n.heading,noSpace:!0,size:"heading6"}):void 0,g=A({title:c,id:s});return y(f,{as:"header",__css:n,...e,children:[a,t&&g]})}),N=_(i=>{const{alignText:t,children:a,isCentered:s,notificationHeading:l,notificationType:r,showIcon:e,...n}=i,c=C("NotificationContent",{alignText:t,isCentered:s,notificationHeading:l,notificationType:r,showIcon:e});return o(f,{__css:c,...n,children:a&&o(f,{__css:c.content,children:a})})}),w=_(q.forwardRef((i,t)=>{const{ariaLabel:a,className:s,dismissible:l=!1,icon:r,id:e,isCentered:n=!1,noMargin:c=!1,notificationContent:g,notificationHeading:u,notificationType:d="standard",showIcon:p=!0,...T}=i,[O,v]=q.useState(!0),{colorMode:h}=P(),k=()=>v(!1),m=C("Notification",{isCentered:n,noMargin:c,notificationHeading:u,notificationType:d,showIcon:p}),E=()=>{const V={size:"large",__css:m.icon};if(!p)return;if(r)return x.cloneElement(r,{id:`${e}-custom-notification-icon`,...V});const B={announcement:{color:h==="dark"?"dark.ui.success.primary":"section.research.secondary",name:"speakerNotes",title:"Notification announcement icon"},standard:{color:h==="dark"?"ui.status.primary":"ui.black",name:"alertNotificationImportant",title:"Notification standard icon"},warning:{color:h==="dark"?"dark.ui.error.primary":"brand.primary",name:"errorFilled",title:"Notification warning icon"}};return o(I,{className:"notification-icon",id:`${e}-notification-icon`,...B[d],...V})},D=j("ui.black","dark.ui.typography.heading"),M=l&&o(L,{"aria-label":"Close the notification",buttonType:"text",id:`${e}-notification-dismissible-button`,onClick:k,__css:m.dismissibleButton,children:o(I,{fill:D,id:`${e}-dismissible-notification-icon`,name:"close",size:"large",title:"Notification close icon"})}),S=E(),H=(u||p)&&o(b,{icon:S,id:e,isCentered:n,notificationType:d,children:u}),z=o(N,{alignText:!!(H&&p&&(r||!n)),isCentered:n,notificationHeading:u,notificationType:d,showIcon:p,children:g});return O?y(f,{"aria-label":a,as:"aside",className:s,"data-type":d,id:e,ref:t,__css:m,...T,children:[y(f,{__css:m.container,children:[H,z]}),M]}):null}));try{b.displayName="NotificationHeading",b.__docgenInfo={description:"NotificationHeading child-component.",displayName:"NotificationHeading",props:{id:{defaultValue:null,description:"ID that other components can cross reference for accessibility purposes.",name:"id",required:!1,type:{name:"string"}},isCentered:{defaultValue:null,description:"Optional prop to control horizontal alignment of the `Notification` content",name:"isCentered",required:!1,type:{name:"boolean"}},icon:{defaultValue:null,description:"Optional custom `Icon` that will override the default `Icon`.",name:"icon",required:!1,type:{name:"Element"}},notificationHeading:{defaultValue:null,description:"Optional content to be rendered in a `NotificationHeading` component. A\nstring value is used to set the text for a `Heading` component, or\na DS Heading component that can be passed in.",name:"notificationHeading",required:!1,type:{name:"string | Element"}},notificationType:{defaultValue:null,description:"Optional prop to control the coloring of the `Notification` text and the\nvisibility of an applicable icon.",name:"notificationType",required:!1,type:{name:'"standard" | "announcement" | "warning"'}}}}}catch{}try{N.displayName="NotificationContent",N.__docgenInfo={description:"NotificationContent child-component.",displayName:"NotificationContent",props:{id:{defaultValue:null,description:"ID that other components can cross reference for accessibility purposes.",name:"id",required:!1,type:{name:"string"}},isCentered:{defaultValue:null,description:"Optional prop to control horizontal alignment of the `Notification` content",name:"isCentered",required:!1,type:{name:"boolean"}},alignText:{defaultValue:null,description:"Optional prop to control text alignment in `NotificationContent`",name:"alignText",required:!1,type:{name:"boolean"}},notificationHeading:{defaultValue:null,description:"Optional content to be rendered in a `NotificationHeading` component. A\nstring value is used to set the text for a `Heading` component, or\na DS Heading component that can be passed in.",name:"notificationHeading",required:!1,type:{name:"string | Element"}},notificationType:{defaultValue:null,description:"Optional prop to control the coloring of the `Notification` text and the\nvisibility of an applicable icon.",name:"notificationType",required:!1,type:{name:'"standard" | "announcement" | "warning"'}},showIcon:{defaultValue:null,description:"Prop to display the `Notification` icon. Defaults to `true`.",name:"showIcon",required:!1,type:{name:"boolean"}}}}}catch{}try{w.displayName="Notification",w.__docgenInfo={description:`Component used to present users with three different levels of notifications:
standard, announcement, and warning.`,displayName:"Notification",props:{className:{defaultValue:null,description:"Additional `className` to add.",name:"className",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"ID that other components can cross reference for accessibility purposes.",name:"id",required:!1,type:{name:"string"}},isCentered:{defaultValue:null,description:"Optional prop to control horizontal alignment of the `Notification` content",name:"isCentered",required:!1,type:{name:"boolean"}},icon:{defaultValue:null,description:"Optional custom `Icon` that will override the default `Icon`.",name:"icon",required:!1,type:{name:"Element"}},notificationHeading:{defaultValue:null,description:"Optional content to be rendered in a `NotificationHeading` component. A\nstring value is used to set the text for a `Heading` component, or\na DS Heading component that can be passed in.",name:"notificationHeading",required:!1,type:{name:"string | Element"}},notificationType:{defaultValue:null,description:"Optional prop to control the coloring of the `Notification` text and the\nvisibility of an applicable icon.",name:"notificationType",required:!1,type:{name:'"standard" | "announcement" | "warning"'}},showIcon:{defaultValue:null,description:"Prop to display the `Notification` icon. Defaults to `true`.",name:"showIcon",required:!1,type:{name:"boolean"}},ariaLabel:{defaultValue:null,description:"Label used to describe the `Notification`'s aside HTML element.",name:"ariaLabel",required:!1,type:{name:"string"}},dismissible:{defaultValue:null,description:"Optional prop to control whether a `Notification` can be dismissed\n(closed) by a user.",name:"dismissible",required:!1,type:{name:"boolean"}},noMargin:{defaultValue:null,description:"Optional prop to control the margin around the `Notification` component.",name:"noMargin",required:!1,type:{name:"boolean"}},notificationContent:{defaultValue:null,description:"Content to be rendered in a `NotificationContent` component.",name:"notificationContent",required:!0,type:{name:"string | Element"}}}}}catch{}export{w as N,X as n};
//# sourceMappingURL=Notification-715070ee.js.map
