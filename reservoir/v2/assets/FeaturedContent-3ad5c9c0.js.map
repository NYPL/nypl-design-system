{"version":3,"file":"FeaturedContent-3ad5c9c0.js","sources":["../../../src/components/FeaturedContent/FeaturedContent.tsx"],"sourcesContent":["import { Box, chakra, useMultiStyleConfig } from \"@chakra-ui/react\";\nimport React, { forwardRef } from \"react\";\nimport Image, { ImageProps } from \"../Image/Image\";\n\nexport const featuredContentWidthArray = [\n  \"oneQuarter\",\n  \"oneThird\",\n  \"oneHalf\",\n  \"twoThirds\",\n  \"threeQuarters\",\n];\nexport type featuredContentWidthType = typeof featuredContentWidthArray[number];\n\nexport const featuredContentPositionArray = [\"start\", \"end\"] as const;\nexport type featuredContentPositionType =\n  typeof featuredContentPositionArray[number];\n\ninterface FeaturedContentImageProps extends ImageProps {\n  /** String value that specifies the width of the image rendered within the component. */\n  width?: featuredContentWidthType;\n  /** String value that specifies the position of the image rendered within the component. */\n  position?: featuredContentPositionType;\n}\n\nexport interface FeaturedContentProps {\n  /** Optional CSS class name to add. */\n  className?: string;\n  /** ID that other components can cross reference for accessibility purposes. */\n  id?: string;\n  /** The text content rendered in the component.  DS components and native HTML can be passed in this prop. */\n  textContent: string | JSX.Element;\n  /** Whether component will fill the full width of the browser window, instead of just its parent element.\n   * False by default. */\n  isFullWidth: boolean;\n  /** Data object that contains the props related to the image element: alt, position, src, width.  */\n  imageProps: FeaturedContentImageProps;\n}\n\n/**\n * The FeaturedContentImage component is used internally in the `FeaturedContent` component. It\n * renders an 'Image' component but with overriding styles specific to the\n * `FeaturedContent` component (see featuredContent.ts).\n */\nfunction FeaturedContentImage(props: FeaturedContentImageProps) {\n  const { alt, src } = props;\n  return <Image alt={alt} src={src} />;\n}\n\nexport const FeaturedContent = chakra(\n  forwardRef<HTMLDivElement, React.PropsWithChildren<FeaturedContentProps>>(\n    (props, ref?) => {\n      const {\n        textContent,\n        isFullWidth,\n        imageProps = {\n          alt: \"\",\n          position: \"end\",\n          width: \"oneHalf\",\n          src: \"\",\n        },\n        ...rest\n      } = props;\n      const styles = useMultiStyleConfig(\"FeaturedContent\", {\n        imagePosition: imageProps.position,\n        imageWidth: imageProps.width,\n        isFullWidth,\n      });\n\n      if (!imageProps.src) {\n        console.warn(\n          `NYPL Reservoir FeaturedContent: A value for 'imageProps.src' is required.`\n        );\n      }\n      if (!imageProps.alt) {\n        console.warn(\n          `NYPL Reservoir FeaturedContent: A value for 'imageProps.alt' is required.`\n        );\n      }\n      if (!textContent) {\n        console.warn(\n          `NYPL Reservoir FeaturedContent: The 'textContent' prop is required.`\n        );\n      }\n\n      return (\n        <Box data-testid=\"featuredcontent\" __css={styles} ref={ref} {...rest}>\n          <Box __css={styles.wrapper}>\n            <Box\n              data-testid=\"featuredcontent-bg-image\"\n              __css={{\n                ...styles.imgWrapper,\n                backgroundImage: `url(${imageProps.src})`,\n              }}\n            >\n              <FeaturedContentImage\n                alt={imageProps.alt}\n                src={imageProps.src ? imageProps.src : undefined}\n              />\n            </Box>\n            <Box __css={styles.text}>{textContent}</Box>\n          </Box>\n        </Box>\n      );\n    }\n  )\n);\n\nexport default FeaturedContent;\n"],"names":["featuredContentWidthArray","featuredContentPositionArray","FeaturedContentImage","props","alt","src","jsx","Image","FeaturedContent","chakra","forwardRef","ref","textContent","isFullWidth","imageProps","rest","styles","useMultiStyleConfig","Box","jsxs"],"mappings":"oOAIO,MAAAA,EAAA,CAAkC,aACvC,WACA,UACA,YACA,eAEF,EAGOC,EAAA,CAAA,QAAA,KAAA,EA8BP,SAAAC,EAAAC,EAAA,CACE,KAAA,CAAA,IAAAC,EAAA,IAAAC,CAAA,EAAAF,EACA,OAAAG,EAAAC,EAAA,CAAA,IAAAH,EAAA,IAAAC,CAAA,CAAA,CACF,CAEO,MAAAG,EAAAC,EAAwBC,EAAA,WAC7B,CAAAP,EAAAQ,IAAA,CAEI,KAAA,CAAM,YAAAC,EACJ,YAAAC,EACA,WAAAC,EAAA,CACa,IAAA,GACN,SAAA,MACK,MAAA,UACH,IAAA,EACF,EACP,GAAAC,CACG,EAAAZ,EAELa,EAAAC,EAAA,kBAAA,CAAsD,cAAAH,EAAA,SAC1B,WAAAA,EAAA,MACH,YAAAD,CACvB,CAAA,EAGF,OAAAC,EAAA,KACE,QAAA,KAAQ,2EACN,EAGJA,EAAA,KACE,QAAA,KAAQ,2EACN,EAGJF,GACE,QAAA,KAAQ,qEACN,EAIJN,EAAAY,EAAA,CAAA,cAAA,kBAAA,MAAAF,EAAA,IAAAL,EAAA,GAAAI,EAAA,SAAAI,EAAAD,EAAA,CAAA,MAAAF,EAAA,QAAA,SAAA,CAGMV,EAAAY,EAAC,CAAA,cAAA,2BACa,MAAA,CACL,GAAAF,EAAA,WACK,gBAAA,OAAAF,EAAA,GAAA,GAC4B,EACxC,SAAAR,EAEAJ,EAAC,CAAA,IAAAY,EAAA,IACiB,IAAAA,EAAA,IAAAA,EAAA,IAAA,MACuB,CAAA,CACzC,CAAA,EACFR,EAAAY,EAAA,CAAA,MAAAF,EAAA,KAAA,SAAAJ,EAAA,CACsC,CAAA,CAAA,CAAA,CAAA,CAE1C,CAEJ,CAEJ;"}