{"version":3,"file":"Modal-0e03a3bb.js","sources":["../../../src/components/Modal/Modal.tsx"],"sourcesContent":["import {\n  chakra,\n  Modal as ChakraModal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport React, { forwardRef } from \"react\";\n\nimport Button from \"../Button/Button\";\nimport ButtonGroup from \"../ButtonGroup/ButtonGroup\";\nimport useNYPLBreakpoints from \"../../hooks/useNYPLBreakpoints\";\n\ninterface BaseModalProps {\n  bodyContent?: string | JSX.Element;\n  closeButtonLabel?: string;\n  headingText?: string | JSX.Element;\n  /** ID that other components can cross reference for accessibility purposes */\n  id?: string;\n  isOpen?: boolean;\n  onClose?: () => void;\n}\n\nexport interface ModalProps {\n  buttonText?: string;\n  /** ID that other components can cross reference for accessibility purposes */\n  id?: string;\n  modalProps: BaseModalProps;\n}\n\nconst BaseModal = chakra(\n  ({\n    bodyContent,\n    closeButtonLabel = \"Close\",\n    headingText,\n    id,\n    isOpen,\n    onClose,\n    ...rest\n  }: React.PropsWithChildren<BaseModalProps>) => {\n    const xlarge = \"xl\";\n    const fullSize = \"full\";\n    const { isLargerThanMobile } = useNYPLBreakpoints();\n    // For larger screens, set the size to xl, otherwise set it to full.\n    const size = isLargerThanMobile ? xlarge : fullSize;\n\n    return (\n      <ChakraModal\n        id={id}\n        isOpen={isOpen}\n        onClose={onClose}\n        scrollBehavior=\"inside\"\n        size={size}\n        {...rest}\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>{headingText}</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>{bodyContent}</ModalBody>\n\n          <ModalFooter>\n            <ButtonGroup>\n              <Button id=\"modal-close-btn\" onClick={onClose}>\n                {closeButtonLabel}\n              </Button>\n            </ButtonGroup>\n          </ModalFooter>\n        </ModalContent>\n      </ChakraModal>\n    );\n  }\n);\n\n/**\n * The `ModalTrigger` component renders a button that you click to open the\n * internal `Modal` component. Note that props to update the internal `Modal`\n * component are passed through to the `modalProps` prop.\n */\nexport const ModalTrigger = chakra(\n  forwardRef<HTMLButtonElement, React.PropsWithChildren<ModalProps>>(\n    ({ buttonText, id, modalProps, ...rest }, ref?) => {\n      const { isOpen, onOpen, onClose } = useDisclosure();\n      const finalOnCloseHandler = () => {\n        modalProps.onClose && modalProps.onClose();\n        onClose();\n      };\n      return (\n        <>\n          <Button id=\"modal-open-btn\" onClick={onOpen} ref={ref}>\n            {buttonText}\n          </Button>\n\n          <BaseModal\n            bodyContent={modalProps.bodyContent}\n            closeButtonLabel={modalProps.closeButtonLabel}\n            headingText={modalProps.headingText}\n            id={id}\n            isOpen={isOpen}\n            onClose={finalOnCloseHandler}\n            {...rest}\n          />\n        </>\n      );\n    }\n  )\n);\n\n/**\n * This hook function can be used to render the `Modal` component with a custom\n * open button(s) and optional custom close button(s). You must render your own\n * button and pass the appropriate `onOpen` and ` handler for the modal to open.\n */\nexport function useModal() {\n  const { isOpen, onClose, onOpen } = useDisclosure();\n  const Modal = chakra(\n    ({\n      bodyContent,\n      closeButtonLabel,\n      headingText,\n      id,\n      ...rest\n    }: React.PropsWithChildren<BaseModalProps>) => {\n      return (\n        <BaseModal\n          bodyContent={bodyContent}\n          closeButtonLabel={closeButtonLabel}\n          headingText={headingText}\n          id={id}\n          isOpen={isOpen}\n          onClose={onClose}\n          {...rest}\n        />\n      );\n    }\n  );\n\n  return { onClose, onOpen, Modal };\n}\n"],"names":["BaseModal","chakra","bodyContent","closeButtonLabel","headingText","id","isOpen","onClose","rest","xlarge","fullSize","isLargerThanMobile","useNYPLBreakpoints","jsxs","ChakraModal","jsx","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","ModalFooter","ButtonGroup","Button","ModalTrigger","forwardRef","buttonText","modalProps","ref","onOpen","useDisclosure","finalOnCloseHandler","Fragment","useModal","Modal"],"mappings":"udAkCA,MAAAA,EAAAC,EAAkB,CAAA,CACf,YAAAC,EACC,iBAAAC,EAAA,QACmB,YAAAC,EACnB,GAAAC,EACA,OAAAC,EACA,QAAAC,EACA,GAAAC,CACG,IAAA,CAEH,MAAAC,EAAA,KACAC,EAAA,OACA,CAAA,mBAAAC,GAAAC,IAIA,OAAAC,EACEC,EAAC,CAAA,GAAAT,EACC,OAAAC,EACA,QAAAC,EACA,eAAA,SACe,KAPnBI,EAAAF,EAAAC,EAQI,GAAAF,EACI,SAAA,CAEJO,EAAAC,EAAA,EAAA,EAAcH,EAAAI,EAAA,CAAA,SAAA,CAEZF,EAAAG,EAAA,CAAA,SAAAd,CAAA,CAAA,EAA0BW,EAAAI,EAAA,EAAA,EACRJ,EAAAK,EAAA,CAAA,SAAAlB,CAAA,CAAA,EACMa,EAAAM,EAAA,CAAA,SAAAN,EAAAO,EAAA,CAAA,SAAAP,EAAAQ,EAAA,CAAA,GAAA,kBAAA,QAAAhB,EAAA,SAAAJ,CAAA,CAAA,CAAA,CAAA,EAAA,CAQxB,EAAA,CACF,CAAA,CAAA,CACF,CAGN,EAOOqB,EAAAvB,EAAqBwB,EAAA,WAC1B,CAAA,CAAA,WAAAC,EAAA,GAAArB,EAAA,WAAAsB,EAAA,GAAAnB,CAAA,EAAAoB,IAAA,CAEI,KAAA,CAAA,OAAAtB,EAAA,OAAAuB,EAAA,QAAAtB,CAAA,EAAAuB,EAAA,EACAC,EAAA,IAAA,CACEJ,EAAA,SAAAA,EAAA,UACApB,GAAQ,EAEV,OAAAM,EAAAmB,EAAA,CAAA,SAAA,CAEIjB,EAAAQ,EAAA,CAAA,GAAA,iBAAA,QAAAM,EAAA,IAAAD,EAAA,SAAAF,EAAA,EAEAX,EAEAf,EAAC,CAAA,YAAA2B,EAAA,YACyB,iBAAAA,EAAA,iBACK,YAAAA,EAAA,YACL,GAAAtB,EACxB,OAAAC,EACA,QAAAyB,EACS,GAAAvB,CACL,CAAA,CACN,CAAA,CAAA,CACF,CAEJ,CAEJ,EAOO,SAAAyB,GAAA,CACL,KAAA,CAAA,OAAA3B,EAAA,QAAAC,EAAA,OAAAsB,CAAA,EAAAC,EAAA,EACAI,EAAAjC,EAAc,CAAA,CACX,YAAAC,EACC,iBAAAC,EACA,YAAAC,EACA,GAAAC,EACA,GAAAG,CACG,IAEHO,EACEf,EAAC,CAAA,YAAAE,EACC,iBAAAC,EACA,YAAAC,EACA,GAAAC,EACA,OAAAC,EACA,QAAAC,EACA,GAAAC,CACI,CAAA,CAGV,EAGF,MAAA,CAAA,QAAAD,EAAA,OAAAsB,EAAA,MAAAK,EACF"}