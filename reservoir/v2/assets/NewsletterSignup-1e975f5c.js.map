{"version":3,"file":"NewsletterSignup-1e975f5c.js","sources":["../../../src/components/NewsletterSignup/NewsletterSignup.tsx"],"sourcesContent":["import {\n  Box,\n  chakra,\n  Stack,\n  useColorModeValue,\n  useMultiStyleConfig,\n  VStack,\n} from \"@chakra-ui/react\";\nimport React, { forwardRef } from \"react\";\n\nimport Button from \"../Button/Button\";\nimport Form, { FormField } from \"../Form/Form\";\nimport Icon from \"../Icons/Icon\";\nimport Link from \"../Link/Link\";\nimport Text from \"../Text/Text\";\nimport TextInput from \"../TextInput/TextInput\";\nimport Heading from \"../Heading/Heading\";\nimport useDSHeading from \"../../hooks/useDSHeading\";\nimport useNYPLBreakpoints from \"../../hooks/useNYPLBreakpoints\";\nimport { SectionTypes } from \"../../helpers/types\";\n\ninterface NewsletterSignupProps {\n  /** Additional class name to add. */\n  className?: string;\n  /** Text displayed next to the confirmation icon after a successful email submission */\n  confirmationHeading: string;\n  /** Detail text for the confirmation view */\n  confirmationText: string;\n  /** Appears below the title to provide details about the newsletter. Accepts a string or an element. */\n  descriptionText?: string | JSX.Element;\n  /** Text displayed next to the error icon in case of an error in the email submission process*/\n  errorHeading?: string;\n  /** Appears below the title to provide details about next steps in case of an error. Accepts a string or an element. */\n  errorText?: string | JSX.Element;\n  /** Appears below the input field's example text to provide any additional instructions. Accepts a string or\n   *  an element. */\n  formHelperText?: string | JSX.Element;\n  /** ID that other components can cross-reference for accessibility purposes */\n  id?: string;\n  /** Toggles the invalid state for the email field. */\n  isInvalidEmail?: boolean;\n  /** Value to determine the section color highlight. The default is set to \"blogs\" as it uses the\n   * \"ui.border.deafult\" color.\n   */\n  newsletterSignupType?: SectionTypes;\n  /** A handler function that will be called when the form is submitted. */\n  onSubmit: (event: React.FormEvent<any>) => void;\n  /** A handler function that will be called when the text input changes. */\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  /** Link to the relevant privacy policy page. */\n  privacyPolicyLink?: string;\n  /** Optional string value used to set the text for a `Heading` component, or\n   * a DS Heading component that can be passed in.\n   */\n  title?: JSX.Element | string;\n  /** The value of the email text input field. */\n  valueEmail?: string;\n  /** Used to specify what is displayed in the component form/feedback area. */\n  view?: NewsletterSignupViewType;\n}\n\nexport type NewsletterSignupViewType =\n  | \"form\"\n  | \"submitting\"\n  | \"confirmation\"\n  | \"error\";\n\nconst defaultDescriptionText =\n  \"Stay connected with the latest research news from NYPL, including information about our events, programs, \" +\n  \"exhibitions, and collections.\";\nconst defaultTitle = (\n  <Heading noSpace size=\"heading3\" text=\"Sign Up for Our Newsletter\" />\n);\n\n/**\n * The NewsletterSignup component provides a way for patrons to register for an\n * email-based newsletter distribution list.\n */\nexport const NewsletterSignup = chakra(\n  forwardRef<HTMLDivElement, NewsletterSignupProps>(\n    (\n      {\n        className,\n        confirmationHeading,\n        confirmationText,\n        descriptionText = defaultDescriptionText,\n        errorHeading = \"Oops! Something went wrong.\",\n        errorText,\n        formHelperText,\n        id,\n        isInvalidEmail = false,\n        newsletterSignupType = \"blogs\",\n        onChange,\n        onSubmit,\n        privacyPolicyLink = \"https://www.nypl.org/help/about-nypl/legal-notices/privacy-policy\",\n        valueEmail,\n        title,\n        view = \"form\",\n        ...rest\n      },\n      ref?\n    ) => {\n      const { isLargerThanMobile } = useNYPLBreakpoints();\n      const styles = useMultiStyleConfig(\"NewsletterSignup\", {\n        newsletterSignupType,\n      });\n      const iconColor = useColorModeValue(null, \"dark.ui.typography.body\");\n      const errorColor = useColorModeValue(\n        \"ui.error.primary\",\n        \"dark.ui.error.primary\"\n      );\n      const isFormView = view === \"form\" || view === \"submitting\";\n      const finalTitle = useDSHeading({\n        title,\n        id,\n        customDefaultHeading: defaultTitle,\n      });\n\n      // Manage focus to ensure accessibility when confirmation or error message is rendered.\n      const focusRef = React.useRef<HTMLDivElement>(null);\n      // When view prop changes, set focus to the confirmation or error content element.\n      React.useEffect(() => {\n        focusRef.current?.focus();\n      }, [view]);\n      return (\n        <Stack\n          direction={isLargerThanMobile ? \"row\" : \"column\"}\n          ref={ref}\n          __css={styles}\n          {...rest}\n        >\n          <VStack __css={styles.pitch} alignItems=\"flex-start\">\n            {finalTitle}\n            {descriptionText ? (\n              typeof descriptionText === \"string\" ? (\n                <Text noSpace size=\"body2\">\n                  {descriptionText}\n                </Text>\n              ) : (\n                descriptionText\n              )\n            ) : null}\n\n            <Link\n              href={privacyPolicyLink}\n              type=\"external\"\n              isUnderlined={false}\n              __css={styles.privacy}\n            >\n              Privacy Policy\n            </Link>\n          </VStack>\n          <VStack __css={styles.action}>\n            {isFormView && (\n              <Form id=\"newsletter-form\" onSubmit={onSubmit}>\n                <FormField key=\"formfield-input\">\n                  <TextInput\n                    id=\"email-input\"\n                    isDisabled={view === \"submitting\"}\n                    isRequired\n                    invalidText=\"Please enter a valid email address.\"\n                    isInvalid={isInvalidEmail}\n                    labelText=\"Email Address\"\n                    helperText={formHelperText}\n                    name=\"email\"\n                    onChange={onChange}\n                    placeholder=\"Enter your email address\"\n                    type=\"email\"\n                    value={valueEmail}\n                  />\n                </FormField>\n                <FormField key=\"formfield-button\">\n                  <Button\n                    id=\"submit\"\n                    isDisabled={view === \"submitting\"}\n                    type=\"submit\"\n                  >\n                    Submit\n                  </Button>\n                </FormField>\n              </Form>\n            )}\n            {view === \"confirmation\" && (\n              <Box\n                className=\"feedback-body response\"\n                margin=\"auto\"\n                ref={focusRef}\n                tabIndex={-1}\n                width=\"100%\"\n              >\n                <Box\n                  display=\"flex\"\n                  marginBottom=\"xs\"\n                  alignItems={{ md: \"center\" }}\n                >\n                  <Icon\n                    color={iconColor}\n                    name=\"actionCheckCircleFilled\"\n                    size=\"large\"\n                  />\n                  <Text\n                    size=\"subtitle1\"\n                    marginStart=\"xs\"\n                    marginBottom=\"unset\"\n                    fontWeight=\"medium\"\n                  >\n                    {confirmationHeading}\n                  </Text>\n                </Box>\n                <Text noSpace size=\"body2\">\n                  {confirmationText}\n                </Text>\n              </Box>\n            )}\n            {view === \"error\" && (\n              <Box\n                className=\"feedback-body response\"\n                margin=\"auto\"\n                ref={focusRef}\n                tabIndex={-1}\n                width=\"100%\"\n              >\n                <Box\n                  display=\"flex\"\n                  marginBottom=\"xs\"\n                  alignItems={{ md: \"center\" }}\n                >\n                  <Icon color={errorColor} name=\"errorFilled\" size=\"large\" />\n                  <Text\n                    color={errorColor}\n                    size=\"subtitle1\"\n                    marginStart=\"xs\"\n                    marginBottom=\"unset\"\n                    fontWeight=\"medium\"\n                  >\n                    {errorHeading}\n                  </Text>\n                </Box>\n                {errorText ? (\n                  typeof errorText === \"string\" ? (\n                    <Text noSpace size=\"body2\">\n                      {errorText}\n                    </Text>\n                  ) : (\n                    errorText\n                  )\n                ) : null}\n              </Box>\n            )}\n          </VStack>\n        </Stack>\n      );\n    }\n  )\n);\n\nexport default NewsletterSignup;\n"],"names":["defaultDescriptionText","defaultTitle","jsx","Heading","NewsletterSignup","chakra","forwardRef","className","confirmationHeading","confirmationText","descriptionText","errorHeading","errorText","formHelperText","id","isInvalidEmail","newsletterSignupType","onChange","onSubmit","privacyPolicyLink","valueEmail","title","view","rest","ref","isLargerThanMobile","useNYPLBreakpoints","styles","useMultiStyleConfig","iconColor","useColorModeValue","errorColor","isFormView","finalTitle","useDSHeading","focusRef","React","_a","jsxs","Stack","VStack","Text","Link","Form","FormField","TextInput","Button","Box","Icon"],"mappings":"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"}