import{j as I,a as V,F as Z}from"./emotion-react-jsx-runtime.browser.esm-49aea89b.js";import{r as c}from"./index-0cbcd92a.js";import{I as ee}from"./Icon-4eeffe51.js";import{i as q,j as O,u as ne,o as oe,M as ae,a as P,l as E,N as $,O as re,P as te,s as ie,r as S,Q as le,R as N,w as F,n as se,U as ce,t as k,f as de,B as ue}from"./chakra-ui-layout.esm-e0dbb94e.js";import{C as fe}from"./chakra-ui-transition.esm-3069754e.js";import{c as me}from"./chakra-ui-descendant.esm-f106b18c.js";import{h as pe,b as ge,i as he}from"./chakra-ui-hooks.esm-539e7d47.js";function b(){return b=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var o=arguments[n];for(var a in o)Object.prototype.hasOwnProperty.call(o,a)&&(e[a]=o[a])}return e},b.apply(this,arguments)}function _(e,n){if(e==null)return{};var o={},a=Object.keys(e),r,i;for(i=0;i<a.length;i++)r=a[i],!(n.indexOf(r)>=0)&&(o[r]=e[r]);return o}var ve=["onChange","defaultIndex","index","allowMultiple","allowToggle"],be=["isDisabled","isFocusable","id"],H=me(),ye=H[0],xe=H[2],Ae=H[3];function we(e){var n=e.onChange,o=e.defaultIndex,a=e.index,r=e.allowMultiple,i=e.allowToggle,d=_(e,ve);_e(e),Pe(e);var s=xe(),t=c.useState(-1),l=t[0],m=t[1];pe(function(){m(-1)});var p=ge({value:a,defaultValue:function(){return r?o??[]:o??-1},onChange:n}),u=p[0],w=p[1],g=function(y){var h=!1;y!==null&&(h=N(u)?u.includes(y):u===y);var x=function(D){if(y!==null)if(r&&N(u)){var M=D?se(u,y):ce(u,y);w(M)}else D?w(y):i&&w(-1)};return{isOpen:h,onChange:x}};return{index:u,setIndex:w,htmlProps:d,getAccordionItemProps:g,focusedIndex:l,setFocusedIndex:m,descendants:s}}var z=q({name:"AccordionContext",errorMessage:"useAccordionContext: `context` is undefined. Seems you forgot to wrap the accordion components in `<Accordion />`"}),Ce=z[0],L=z[1];function Ie(e){var n=e.isDisabled,o=e.isFocusable,a=e.id,r=_(e,be),i=L(),d=i.getAccordionItemProps,s=i.setFocusedIndex,t=c.useRef(null),l=he(a,"accordion-button","accordion-panel"),m=l[0],p=l[1];De(e);var u=Ae({disabled:n&&!o}),w=u.register,g=u.index,C=u.descendants,y=d(g===-1?null:g),h=y.isOpen,x=y.onChange;Me({isOpen:h,isDisabled:n});var R=function(){x==null||x(!0)},D=function(){x==null||x(!1)},M=c.useCallback(function(){x==null||x(!h),s(g)},[g,s,h,x]),j=c.useCallback(function(f){var A=te(f),X={ArrowDown:function(){var v=C.nextEnabled(g);v&&k(v.node)},ArrowUp:function(){var v=C.prevEnabled(g);v&&k(v.node)},Home:function(){var v=C.firstEnabled();v&&k(v.node)},End:function(){var v=C.lastEnabled();v&&k(v.node)}},U=X[A];U&&(f.preventDefault(),U(f))},[C,g]),B=c.useCallback(function(){s(g)},[s,g]),G=c.useCallback(function(f,A){return f===void 0&&(f={}),A===void 0&&(A=null),b({},f,{type:"button",ref:ie(w,t,A),id:m,disabled:!!n,"aria-expanded":!!h,"aria-controls":p,onClick:S(f.onClick,M),onFocus:S(f.onFocus,B),onKeyDown:S(f.onKeyDown,j)})},[m,n,h,M,B,j,p,w]),J=c.useCallback(function(f,A){return f===void 0&&(f={}),A===void 0&&(A=null),b({},f,{ref:A,role:"region",id:p,"aria-labelledby":m,hidden:!h})},[m,h,p]);return{isOpen:h,isDisabled:n,isFocusable:o,onOpen:R,onClose:D,getButtonProps:G,getPanelProps:J,htmlProps:r}}function _e(e){var n=e.index||e.defaultIndex,o=!le(n)&&!N(n)&&e.allowMultiple;F({condition:!!o,message:"If 'allowMultiple' is passed, then 'index' or 'defaultIndex' must be an array. You passed: "+typeof n+","})}function Pe(e){F({condition:!!(e.allowMultiple&&e.allowToggle),message:"If 'allowMultiple' is passed, 'allowToggle' will be ignored. Either remove 'allowToggle' or 'allowMultiple' depending on whether you want multiple accordions visible or not"})}function De(e){F({condition:!!(e.isFocusable&&!e.isDisabled),message:`Using only 'isFocusable', this prop is reserved for situations where you pass 'isDisabled' but you still want the element to receive focus (A11y). Either remove it or pass 'isDisabled' as well.
    `})}function Me(e){F({condition:e.isOpen&&!!e.isDisabled,message:"Cannot open a disabled accordion item"})}var ke=["children","reduceMotion"],Oe=["htmlProps","descendants"],Ee=["htmlProps"],Fe=O(function(e,n){var o=e.children,a=e.reduceMotion,r=_(e,ke),i=ne("Accordion",r),d=oe(r),s=we(d),t=s.htmlProps,l=s.descendants,m=_(s,Oe),p=c.useMemo(function(){return b({},m,{reduceMotion:!!a})},[m,a]);return c.createElement(ye,{value:l},c.createElement(Ce,{value:p},c.createElement(ae,{value:i},c.createElement(P.div,b({ref:n},t,{className:E("chakra-accordion",r.className),__css:i.root}),o))))}),Q=q({name:"AccordionItemContext",errorMessage:"useAccordionItemContext: `context` is undefined. Seems you forgot to wrap the accordion item parts in `<AccordionItem />` "}),Te=Q[0],Y=Q[1],Se=O(function(e,n){var o=e.children,a=e.className,r=Ie(e),i=r.htmlProps,d=_(r,Ee),s=$(),t=b({},s.container,{overflowAnchor:"none"}),l=c.useMemo(function(){return d},[d]);return c.createElement(Te,{value:l},c.createElement(P.div,b({ref:n},i,{className:E("chakra-accordion__item",a),__css:t}),re(o,{isExpanded:!!d.isOpen,isDisabled:!!d.isDisabled})))}),Ne=O(function(e,n){var o=Y(),a=o.getButtonProps,r=a(e,n),i=$(),d=b({display:"flex",alignItems:"center",width:"100%",outline:0},i.button);return c.createElement(P.button,b({},r,{className:E("chakra-accordion__button",e.className),__css:d}))}),K=O(function(e,n){var o=L(),a=o.reduceMotion,r=Y(),i=r.getPanelProps,d=r.isOpen,s=i(e,n),t=E("chakra-accordion__panel",e.className),l=$();a||delete s.hidden;var m=c.createElement(P.div,b({},s,{__css:l.panel,className:t}));return a?m:c.createElement(fe,{in:d},m)});const $e=(e=!1,n,o,a)=>{const r=e?"minus":"plus";return I(ee,{id:`accordion-${o}-icon-${n}`,name:r,size:"small",color:a})},He=(e=[],n,o=!1,a,r)=>{const i=a?{default:"ui.white",warning:"ui.status.primary",error:"dark.ui.error.primary"}:{default:"ui.white",warning:"ui.status.primary",error:"ui.status.secondary"},d=(e==null?void 0:e.length)>1?"desktop.body.body1":"desktop.body.body2",s=(e==null?void 0:e.length)>1?"s":"xs s";return e.map((t,l)=>{const m=typeof t.panel=="string"?I(K,{id:`${n}-panel-${l}`,dangerouslySetInnerHTML:{__html:t.panel},maxHeight:r,overflow:"auto"},l):I(K,{id:`${n}-panel-${l}`,maxHeight:r,overflow:"auto",children:t.panel},l);return I(Se,{id:`${n}-item-${l}`,children:({isExpanded:p})=>{const u=i[t.accordionType];return V(Z,{children:[V(Ne,{id:`${n}-button-${l}`,borderColor:a?"dark.ui.border.default":"ui.gray.medium",padding:s,bg:t.accordionType?u:i.default,_expanded:{bg:!t.accordionType||t.accordionType==="default"?"ui.gray.light-cool":u},_hover:{bg:!t.accordionType||t.accordionType==="default"?"transparent":u,borderColor:"ui.gray.dark"},_dark:{_expanded:{bg:"dark.ui.bg.active"},bg:"dark.ui.bg.default",color:"dark.ui.typography.heading",borderStart:"4px solid",borderStartColor:!t.accordionType||t.accordionType==="default"?"dark.ui.border.hover":u},children:[I(ue,{as:"span",flex:"1",fontSize:d,textAlign:"start",children:t.label}),$e(p,l,n,a?"dark.ui.typography.heading":"ui.black")]}),(o||p)&&m]})}},l)})},W=P(c.forwardRef((e,n)=>{const{accordionData:o,id:a,isDefaultOpen:r=!1,isAlwaysRendered:i=!1,panelMaxHeight:d,...s}=e,t=de().colorMode==="dark";return I(Fe,{allowMultiple:!0,defaultIndex:r?[0]:void 0,id:a,ref:n,...s,children:He(o,a,i,t,d)})}));try{W.displayName="Accordion",W.__docgenInfo={description:`Accordion component that shows content on toggle. Can be used to display
multiple accordion items together.`,displayName:"Accordion",props:{id:{defaultValue:null,description:"ID that other components can cross reference for accessibility purposes",name:"id",required:!1,type:{name:"string"}},accordionData:{defaultValue:null,description:"Array of data to display, and an optional accordionType",name:"accordionData",required:!0,type:{name:"AccordionDataProps[]"}},isDefaultOpen:{defaultValue:null,description:"Whether the accordion is open by default only on its initial rendering",name:"isDefaultOpen",required:!1,type:{name:"boolean"}},isAlwaysRendered:{defaultValue:null,description:"Whether the contents of the Accordion should always be rendered.\nUseful for form-components. `false` by default.",name:"isAlwaysRendered",required:!1,type:{name:"boolean"}},panelMaxHeight:{defaultValue:null,description:`Sets max height of accordion panel. This value should be entered with the
formatting of a CSS height attribute (ex. 100px, 8rem). If height of content
within accordion panel is greater than height set by panelMaxHeight, a
scrollbar will appear for accordion panel.`,name:"panelMaxHeight",required:!1,type:{name:"string"}}}}}catch{}export{W as A};
//# sourceMappingURL=Accordion-ddc955e7.js.map
