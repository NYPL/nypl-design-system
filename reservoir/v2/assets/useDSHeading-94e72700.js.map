{"version":3,"file":"useDSHeading-94e72700.js","sources":["../../../src/hooks/useDSHeading.tsx"],"sourcesContent":["import React from \"react\";\n\nimport Heading from \"../components/Heading/Heading\";\n\ninterface UseDSHeadingProps {\n  title: string | JSX.Element;\n  id?: string;\n  customDefaultHeading?: string | JSX.Element;\n  additionalStyles?: { [key: string]: any };\n}\n\nconst headingList = [\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"];\n\n/**\n * DS internal helper hook to render a default `h2` heading element if the\n * passed title is a string. Otherwise, it will return the title as is if it\n * is a JSX element.\n */\nfunction useDSHeading({\n  title = \"\",\n  id = \"\",\n  customDefaultHeading,\n  additionalStyles,\n}: UseDSHeadingProps) {\n  const headingID = id ? `${id}-heading` : undefined;\n  let updatedTitle: null | JSX.Element | string = null;\n\n  if (title) {\n    if (typeof title === \"string\") {\n      // Use the DS default h2 heading element if the title is a string.\n      updatedTitle = (\n        <Heading id={headingID} __css={additionalStyles}>\n          {title}\n        </Heading>\n      );\n    } else if (typeof title === \"object\") {\n      // Use the passed JSX element if it is passed. If additional styles are\n      // passed, clone the element and add the styles to the cloned element.\n      // This is to account for base default styles for a component that may\n      // be ignored in a custom heading.\n      if (title.type === Heading) {\n        updatedTitle = additionalStyles\n          ? React.cloneElement(title, { __css: additionalStyles })\n          : title;\n      } else if (headingList.includes(title.type)) {\n        // If the user passed in an HTML heading element, just use that.\n        // They will not get any DS styling.\n        updatedTitle = title;\n        console.warn(\n          \"NYPL Reservoir useDSHeading: An HTML heading element was passed \" +\n            \"for the `title` or `headingText` prop in a Reservoir component. \" +\n            \"The heading will render without DS-specific styling.\"\n        );\n      } else {\n        console.warn(\n          \"NYPL Reservoir useDSHeading: An unsupported heading element was \" +\n            \"passed to the `title` or `headingText` prop in a Reservoir \" +\n            \"component, so that component's title will not be rendered. \" +\n            \"Instead, a DS `Heading` component or an HTML heading element \" +\n            \"should be passed.\"\n        );\n      }\n    }\n  } else if (customDefaultHeading) {\n    // If no title is passed and the component has a custom default heading,\n    // use that instead of the DS default h2 heading element.\n    updatedTitle = customDefaultHeading;\n  }\n\n  return updatedTitle;\n}\n\nexport default useDSHeading;\n"],"names":["headingList","useDSHeading","title","id","customDefaultHeading","additionalStyles","headingID","updatedTitle","jsx","Heading","React"],"mappings":"0JAWA,MAAAA,EAAA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,IAAA,EAOA,SAAAC,EAAA,CAAsB,MAAAC,EAAA,GACZ,GAAAC,EAAA,GACH,qBAAAC,EACL,iBAAAC,CAEF,EAAA,CACE,MAAAC,EAAAH,EAAA,GAAAA,CAAA,WAAA,OACA,IAAAI,EAAA,KAEA,OAAAL,EACE,OAAAA,GAAA,SAEEK,EAAAC,EAAAC,EAAA,CAAA,GAAAH,EAAA,MAAAD,EAAA,SAAAH,CAAA,CAAA,EAGE,OAAAA,GAAA,WAOFA,EAAA,OAAAO,EACEF,EAAAF,EAAAK,EAAA,aAAAR,EAAA,CAAA,MAAAG,EAAA,EAAAH,EAEIF,EAAA,SAAAE,EAAA,IAAA,GAIJK,EAAAL,EACA,QAAA,KAAQ,sLACN,GAKF,QAAA,KAAQ,sQACN,GAONE,IAIAG,EAAAH,GAGFG,CACF"}