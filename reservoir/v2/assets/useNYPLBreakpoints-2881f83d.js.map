{"version":3,"file":"useNYPLBreakpoints-2881f83d.js","sources":["../../../node_modules/@chakra-ui/media-query/dist/chakra-ui-media-query.esm.js","../../../src/hooks/useNYPLBreakpoints.ts"],"sourcesContent":["import { useTheme } from '@chakra-ui/system';\nimport { isBrowser, __DEV__, memoizedGet, breakpoints, isArray, fromEntries, arrayToObjectNotation } from '@chakra-ui/utils';\nimport * as React from 'react';\nimport React__default from 'react';\nimport { useEnvironment } from '@chakra-ui/react-env';\n\nvar useSafeLayoutEffect = isBrowser ? React.useLayoutEffect : React.useEffect;\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query the media query to match\n */\n\nfunction useMediaQuery(query) {\n  var env = useEnvironment();\n  var queries = Array.isArray(query) ? query : [query];\n  var isSupported = isBrowser && \"matchMedia\" in env.window;\n\n  var _React$useState = React.useState(queries.map(function (query) {\n    return isSupported ? !!env.window.matchMedia(query).matches : false;\n  })),\n      matches = _React$useState[0],\n      setMatches = _React$useState[1]; // Specifying matches in the dependency list will cause the event listeners\n  // to unload and then load each time the dependency changes. This causes\n  // Media Query Events to be missed. The event listeners should only be unloaded\n  // when the component unloads.\n\n\n  useSafeLayoutEffect(function () {\n    if (!isSupported) return undefined;\n    var mediaQueryList = queries.map(function (query) {\n      return env.window.matchMedia(query);\n    });\n    var listenerList = mediaQueryList.map(function (_, index) {\n      var listener = function listener(mqlEvent) {\n        var queryIndex = mediaQueryList.findIndex(function (mediaQuery) {\n          return mediaQuery.media === mqlEvent.media;\n        }); // As the event listener is on the media query list, any time the\n        // listener is called, we know there is a change. There's no need\n        // to compare the previous matches with current. Using\n        // setMatches(matches => {...}) provides access to the current matches\n        // state.  Trying to access matches outside the setMatches function\n        // would provide data from the the time of instantiation (stale).\n\n        setMatches(function (matches) {\n          var currentMatches = matches.map(function (x) {\n            return x;\n          });\n          currentMatches[queryIndex] = mqlEvent.matches;\n          return currentMatches;\n        });\n      }; // Listening to the 'change' event on the Media Query List Object\n      // is more performant as the callback is only invoked when a specified\n      // media query is matched. Using addEventListener on the window object\n      // to listen for the resize event will call the callback on every\n      // viewport resize.\n\n\n      if (typeof mediaQueryList[index].addEventListener === \"function\") {\n        mediaQueryList[index].addEventListener(\"change\", listener);\n      } else {\n        mediaQueryList[index].addListener(listener);\n      }\n\n      return listener;\n    });\n    return function () {\n      mediaQueryList.forEach(function (_, index) {\n        if (typeof mediaQueryList[index].removeEventListener === \"function\") {\n          mediaQueryList[index].removeEventListener(\"change\", listenerList[index]);\n        } else {\n          mediaQueryList[index].removeListener(listenerList[index]);\n        }\n      });\n    };\n  }, []);\n  return matches;\n}\n\n/**\n * Visibility\n *\n * React component to control the visibility of its\n * children based on the current breakpoint\n */\nvar Visibility = function Visibility(props) {\n  var breakpoint = props.breakpoint,\n      hide = props.hide,\n      children = props.children;\n\n  var _useMediaQuery = useMediaQuery(breakpoint),\n      show = _useMediaQuery[0];\n\n  var isVisible = hide ? !show : show;\n  var rendered = isVisible ? children : null;\n  return rendered;\n};\n\nvar Hide = function Hide(props) {\n  var children = props.children;\n  var query = useQuery(props);\n  return /*#__PURE__*/React.createElement(Visibility, {\n    breakpoint: query,\n    hide: true\n  }, children);\n};\n\nif (__DEV__) {\n  Hide.displayName = \"Hide\";\n}\n\nvar Show = function Show(props) {\n  var children = props.children;\n  var query = useQuery(props);\n  return /*#__PURE__*/React.createElement(Visibility, {\n    breakpoint: query\n  }, children);\n};\n\nif (__DEV__) {\n  Show.displayName = \"Show\";\n}\n\nvar getBreakpoint = function getBreakpoint(theme, value) {\n  return memoizedGet(theme, \"breakpoints.\" + value, value);\n};\n\nfunction useQuery(props) {\n  var _props$breakpoint = props.breakpoint,\n      breakpoint = _props$breakpoint === void 0 ? \"\" : _props$breakpoint,\n      below = props.below,\n      above = props.above;\n  var theme = useTheme();\n  var bpBelow = getBreakpoint(theme, below);\n  var bpAbove = getBreakpoint(theme, above);\n  var query = breakpoint;\n\n  if (bpBelow) {\n    query = \"(max-width: \" + bpBelow + \")\";\n  } else if (bpAbove) {\n    query = \"(min-width: \" + bpAbove + \")\";\n  }\n\n  return query;\n}\n\n/**\n * React hook used to get the user's animation preference.\n */\n\nfunction usePrefersReducedMotion() {\n  var _useMediaQuery = useMediaQuery(\"(prefers-reduced-motion: reduce)\"),\n      prefersReducedMotion = _useMediaQuery[0];\n\n  return prefersReducedMotion;\n}\n/**\n * React hook for getting the user's color mode preference.\n */\n\nfunction useColorModePreference() {\n  var _useMediaQuery2 = useMediaQuery([\"(prefers-color-scheme: light)\", \"(prefers-color-scheme: dark)\"]),\n      isLight = _useMediaQuery2[0],\n      isDark = _useMediaQuery2[1];\n\n  if (isLight) return \"light\";\n  if (isDark) return \"dark\";\n  return undefined;\n}\n\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * @param [defaultBreakpoint=\"base\"] default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n */\n\nfunction useBreakpoint(defaultBreakpoint // default value ensures SSR+CSR consistency\n) {\n  if (defaultBreakpoint === void 0) {\n    defaultBreakpoint = \"base\";\n  }\n\n  var _useTheme = useTheme(),\n      __breakpoints = _useTheme.__breakpoints;\n\n  var env = useEnvironment();\n  var queries = React__default.useMemo(function () {\n    var _breakpoints$details;\n\n    return (_breakpoints$details = __breakpoints == null ? void 0 : __breakpoints.details.map(function (_ref) {\n      var minMaxQuery = _ref.minMaxQuery,\n          breakpoint = _ref.breakpoint;\n      return {\n        breakpoint: breakpoint,\n        query: minMaxQuery.replace(\"@media screen and \", \"\")\n      };\n    })) != null ? _breakpoints$details : [];\n  }, [__breakpoints]);\n\n  var _React$useState = React__default.useState(function () {\n    if (defaultBreakpoint) {\n      // use default breakpoint to ensure render consistency in SSR + CSR environments\n      // => first render on the client has to match the render on the server\n      var fallbackBreakpointDetail = queries.find(function (_ref2) {\n        var breakpoint = _ref2.breakpoint;\n        return breakpoint === defaultBreakpoint;\n      });\n\n      if (fallbackBreakpointDetail) {\n        return fallbackBreakpointDetail.breakpoint;\n      }\n    }\n\n    if (env.window.matchMedia) {\n      // set correct breakpoint on first render if no default breakpoint was provided\n      var matchingBreakpointDetail = queries.find(function (_ref3) {\n        var query = _ref3.query;\n        return env.window.matchMedia(query).matches;\n      });\n\n      if (matchingBreakpointDetail) {\n        return matchingBreakpointDetail.breakpoint;\n      }\n    }\n\n    return undefined;\n  }),\n      currentBreakpoint = _React$useState[0],\n      setCurrentBreakpoint = _React$useState[1];\n\n  React__default.useEffect(function () {\n    var allUnregisterFns = queries.map(function (_ref4) {\n      var breakpoint = _ref4.breakpoint,\n          query = _ref4.query;\n      var mediaQueryList = env.window.matchMedia(query);\n\n      if (mediaQueryList.matches) {\n        setCurrentBreakpoint(breakpoint);\n      }\n\n      var handleChange = function handleChange(ev) {\n        if (ev.matches) {\n          setCurrentBreakpoint(breakpoint);\n        }\n      }; // add media query listener\n\n\n      if (typeof mediaQueryList.addEventListener === \"function\") {\n        mediaQueryList.addEventListener(\"change\", handleChange);\n      } else {\n        mediaQueryList.addListener(handleChange);\n      } // return unregister fn\n\n\n      return function () {\n        if (typeof mediaQueryList.removeEventListener === \"function\") {\n          mediaQueryList.removeEventListener(\"change\", handleChange);\n        } else {\n          mediaQueryList.removeListener(handleChange);\n        }\n      };\n    });\n    return function () {\n      allUnregisterFns.forEach(function (unregister) {\n        return unregister();\n      });\n    };\n  }, [queries, __breakpoints, env.window]);\n  return currentBreakpoint;\n}\n\nfunction getClosestValue(values, breakpoint, breakpoints$1) {\n  if (breakpoints$1 === void 0) {\n    breakpoints$1 = breakpoints;\n  }\n\n  var index = Object.keys(values).indexOf(breakpoint);\n\n  if (index !== -1) {\n    return values[breakpoint];\n  }\n\n  var stopIndex = breakpoints$1.indexOf(breakpoint);\n\n  while (stopIndex >= 0) {\n    var key = breakpoints$1[stopIndex];\n\n    if (values[key] != null) {\n      index = stopIndex;\n      break;\n    }\n\n    stopIndex -= 1;\n  }\n\n  if (index !== -1) {\n    var _key = breakpoints$1[index];\n    return values[_key];\n  }\n\n  return undefined;\n}\n\n/**\n * React hook for getting the value for the current breakpoint from the\n * provided responsive values object.\n *\n * @param values\n * @param [defaultBreakpoint] default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n *\n * @example\n * const width = useBreakpointValue({ base: '150px', md: '250px' })\n */\n\nfunction useBreakpointValue(values, defaultBreakpoint) {\n  var _theme$__breakpoints;\n\n  var breakpoint = useBreakpoint(defaultBreakpoint);\n  var theme = useTheme();\n  if (!breakpoint) return undefined;\n  /**\n   * Get the sorted breakpoint keys from the provided breakpoints\n   */\n\n  var breakpoints = Array.from(((_theme$__breakpoints = theme.__breakpoints) == null ? void 0 : _theme$__breakpoints.keys) || []);\n  var obj = isArray(values) ? fromEntries(Object.entries(arrayToObjectNotation(values, breakpoints)).map(function (_ref) {\n    var key = _ref[0],\n        value = _ref[1];\n    return [key, value];\n  })) : values;\n  return getClosestValue(obj, breakpoint, breakpoints);\n}\n\nexport { Hide, Show, useBreakpoint, useBreakpointValue, useColorModePreference, useMediaQuery, usePrefersReducedMotion, useQuery };\n","import { useMediaQuery } from \"@chakra-ui/react\";\nimport { useEffect, useState } from \"react\";\n\n/**\n * This hook is used to determine if the current screen size is larger than\n * the specific NYPL breakpoint values. The returned value is an object with\n * boolean values for each breakpoint.\n */\nconst useNYPLBreakpoints = () => {\n  // Local state is used and updated with the `useEffect` hook so that the\n  // initial breakpoint values are the same on the server and client side.\n  const [layoutSize, setLayoutSize] = useState<any>({\n    isLargerThanSmall: false,\n    isLargerThanMedium: false,\n    isLargerThanLarge: false,\n    isLargerThanXLarge: false,\n  });\n  const [\n    isLargerThanSmall,\n    isLargerThanMedium,\n    isLargerThanLarge,\n    isLargerThanXLarge,\n  ] = useMediaQuery([\n    \"(min-width: 320px)\",\n    \"(min-width: 600px)\",\n    \"(min-width: 960px)\",\n    \"(min-width: 1280px)\",\n  ]);\n\n  useEffect(() => {\n    setLayoutSize({\n      isLargerThanSmall,\n      isLargerThanMedium,\n      isLargerThanLarge,\n      isLargerThanXLarge,\n    });\n  }, [\n    isLargerThanSmall,\n    isLargerThanMedium,\n    isLargerThanLarge,\n    isLargerThanXLarge,\n  ]);\n\n  return {\n    isLargerThanSmall: layoutSize.isLargerThanSmall,\n    isLargerThanMedium: layoutSize.isLargerThanMedium,\n    // NYPL uses the medium 600px breakpoint to determine if the screen is\n    // in the mobile view. This is the recommended boolean value to use.\n    isLargerThanMobile: layoutSize.isLargerThanMedium,\n    isLargerThanLarge: layoutSize.isLargerThanLarge,\n    isLargerThanXLarge: layoutSize.isLargerThanXLarge,\n  };\n};\n\nexport default useNYPLBreakpoints;\n"],"names":["useSafeLayoutEffect","isBrowser","React.useLayoutEffect","React.useEffect","useMediaQuery","query","env","useEnvironment","queries","isSupported","_React$useState","React.useState","matches","setMatches","mediaQueryList","listenerList","_","index","listener","mqlEvent","queryIndex","mediaQuery","currentMatches","x","useNYPLBreakpoints","layoutSize","setLayoutSize","useState","isLargerThanSmall","isLargerThanMedium","isLargerThanLarge","isLargerThanXLarge","useEffect"],"mappings":"uGAMA,IAAIA,EAAsBC,EAAYC,EAAqB,gBAAGC,YAO9D,SAASC,EAAcC,EAAO,CAC5B,IAAIC,EAAMC,IACNC,EAAU,MAAM,QAAQH,CAAK,EAAIA,EAAQ,CAACA,CAAK,EAC/CI,EAAcR,GAAa,eAAgBK,EAAI,OAE/CI,EAAkBC,EAAc,SAACH,EAAQ,IAAI,SAAUH,EAAO,CAChE,OAAOI,EAAc,CAAC,CAACH,EAAI,OAAO,WAAWD,CAAK,EAAE,QAAU,EAClE,CAAG,CAAC,EACEO,EAAUF,EAAgB,CAAC,EAC3BG,EAAaH,EAAgB,CAAC,EAMlC,OAAAV,EAAoB,UAAY,CAC9B,GAAKS,EACL,KAAIK,EAAiBN,EAAQ,IAAI,SAAUH,EAAO,CAChD,OAAOC,EAAI,OAAO,WAAWD,CAAK,CACxC,CAAK,EACGU,EAAeD,EAAe,IAAI,SAAUE,EAAGC,EAAO,CACxD,IAAIC,EAAW,SAAkBC,EAAU,CACzC,IAAIC,EAAaN,EAAe,UAAU,SAAUO,EAAY,CAC9D,OAAOA,EAAW,QAAUF,EAAS,KAC/C,CAAS,EAODN,EAAW,SAAUD,EAAS,CAC5B,IAAIU,EAAiBV,EAAQ,IAAI,SAAUW,EAAG,CAC5C,OAAOA,CACnB,CAAW,EACD,OAAAD,EAAeF,CAAU,EAAID,EAAS,QAC/BG,CACjB,CAAS,CACT,EAOM,OAAI,OAAOR,EAAeG,CAAK,EAAE,kBAAqB,WACpDH,EAAeG,CAAK,EAAE,iBAAiB,SAAUC,CAAQ,EAEzDJ,EAAeG,CAAK,EAAE,YAAYC,CAAQ,EAGrCA,CACb,CAAK,EACD,OAAO,UAAY,CACjBJ,EAAe,QAAQ,SAAUE,EAAGC,EAAO,CACrC,OAAOH,EAAeG,CAAK,EAAE,qBAAwB,WACvDH,EAAeG,CAAK,EAAE,oBAAoB,SAAUF,EAAaE,CAAK,CAAC,EAEvEH,EAAeG,CAAK,EAAE,eAAeF,EAAaE,CAAK,CAAC,CAElE,CAAO,CACP,EACG,EAAE,CAAE,CAAA,EACEL,CACT,CCrEA,MAAMY,EAAqB,IAAM,CAG/B,KAAM,CAACC,EAAYC,CAAa,EAAIC,WAAc,CAChD,kBAAmB,GACnB,mBAAoB,GACpB,kBAAmB,GACnB,mBAAoB,EAAA,CACrB,EACK,CACJC,EACAC,EACAC,EACAC,GACE3B,EAAc,CAChB,qBACA,qBACA,qBACA,qBAAA,CACD,EAED4B,OAAAA,EAAAA,UAAU,IAAM,CACAN,EAAA,CACZ,kBAAAE,EACA,mBAAAC,EACA,kBAAAC,EACA,mBAAAC,CAAA,CACD,CAAA,EACA,CACDH,EACAC,EACAC,EACAC,CAAA,CACD,EAEM,CACL,kBAAmBN,EAAW,kBAC9B,mBAAoBA,EAAW,mBAG/B,mBAAoBA,EAAW,mBAC/B,kBAAmBA,EAAW,kBAC9B,mBAAoBA,EAAW,kBAAA,CAEnC","x_google_ignoreList":[0]}