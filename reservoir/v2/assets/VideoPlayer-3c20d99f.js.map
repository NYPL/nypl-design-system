{"version":3,"file":"VideoPlayer-3c20d99f.js","sources":["../../../src/components/VideoPlayer/VideoPlayer.tsx"],"sourcesContent":["import { Box, chakra, useMultiStyleConfig } from \"@chakra-ui/react\";\nimport React, { forwardRef } from \"react\";\n\nimport ComponentWrapper from \"../ComponentWrapper/ComponentWrapper\";\nimport { HelperErrorTextType } from \"../HelperErrorText/HelperErrorText\";\n\nexport const VideoPlayerAspectRatiosArray = [\n  \"fourByThree\",\n  \"sixteenByNine\",\n  \"square\",\n] as const;\nexport const VideoPlayerTypesArray = [\"vimeo\", \"youtube\"] as const;\nexport type VideoPlayerAspectRatios =\n  typeof VideoPlayerAspectRatiosArray[number];\nexport type VideoPlayerTypes = typeof VideoPlayerTypesArray[number];\nexport interface VideoPlayerProps {\n  /** Optional aspect ratio prop to control the sizing of the video player; if\n   * omitted, the video player defaults to `sixteen-by-nine` */\n  aspectRatio?: VideoPlayerAspectRatios;\n  /** Optional className you can add in addition to `video-player` */\n  className?: string;\n  /** Optional string to set the text for a video description */\n  descriptionText?: string;\n  /** Optional string to set a code snippet provided by YouTube or Vimeo; the\n   * `videoPlayer` component will accept the `embedCode` prop or the `videoId`\n   * and `videoType` props */\n  embedCode?: string;\n  /** Optional string value used to set the text for a `Heading` component, or\n   * a DS Heading component that can be passed in.\n   */\n  headingText?: string | JSX.Element;\n  /** Optional string to set the text for a `HelperErrorText` component */\n  helperText?: HelperErrorTextType;\n  /** ID that other components can cross reference for accessibility purposes */\n  id?: string;\n  /** Optional title to be added to the `<iframe>` element for improved\n   * accessibility; this title should describe in a few words the content of\n   * the video; if omitted, a generic title will be added; if a `title`\n   * attribute is already present in the `embedCode` prop, this prop will be\n   * ignored */\n  iframeTitle?: string;\n  /** Offers the ability to hide the helper/invalid text. */\n  showHelperInvalidText?: boolean;\n  /** Required YouTube or Vimeo video ID. This value can be pulled from a\n   * video's YouTube or Vimeo URL. */\n  videoId?: string;\n  /** Required. Used to specify which video service is being used. */\n  videoType?: VideoPlayerTypes;\n}\n\nexport const VideoPlayer = chakra(\n  forwardRef<HTMLDivElement, React.PropsWithChildren<VideoPlayerProps>>(\n    (props, ref?) => {\n      const {\n        aspectRatio,\n        className,\n        descriptionText,\n        embedCode,\n        headingText,\n        helperText,\n        id,\n        iframeTitle,\n        showHelperInvalidText = true,\n        videoId,\n        videoType,\n        ...rest\n      } = props;\n\n      const iframeTitleFinal =\n        videoType === \"vimeo\"\n          ? iframeTitle || \"Vimeo video player\"\n          : iframeTitle || \"YouTube video player\";\n\n      const videoSrc =\n        videoType === \"vimeo\"\n          ? `https://player.vimeo.com/video/${videoId}?autoplay=0&loop=0`\n          : `https://www.youtube.com/embed/${videoId}?disablekb=1&autoplay=0&fs=1&modestbranding=0`;\n\n      const iFrameTitleEmbedCode = iframeTitle\n        ? `${iframeTitle}`\n        : `Video player`;\n\n      const embedCodeFinal =\n        embedCode &&\n        embedCode.includes(\"<iframe\") &&\n        !embedCode.includes(\"title=\")\n          ? embedCode.replace(\n              `<iframe `,\n              `<iframe title=\"${iFrameTitleEmbedCode}\" `\n            )\n          : embedCode;\n\n      const errorMessage =\n        \"<strong>Error:</strong> This video player has not been configured \" +\n        \"properly. Please contact the site administrator.\";\n\n      let isInvalid = false;\n      if (!embedCodeFinal && !videoType && !videoId) {\n        console.warn(\n          \"NYPL Reservoir VideoPlayer: Pass in either the `embedCode` prop or \" +\n            \"both the `videoType` and `videoId` props; none were passed.\"\n        );\n        isInvalid = true;\n      } else if (!embedCodeFinal && !videoType) {\n        console.warn(\n          \"NYPL Reservoir VideoPlayer: The `videoType` prop is also required. \" +\n            \"Only the `videoId` prop was set.\"\n        );\n        isInvalid = true;\n      } else if (!embedCodeFinal && !videoId) {\n        console.warn(\n          \"NYPL Reservoir VideoPlayer: The `videoId` prop is also required. \" +\n            \"Only the `videoType` prop was set.\"\n        );\n        isInvalid = true;\n      } else if (embedCodeFinal && (videoType || videoId)) {\n        console.warn(\n          \"NYPL Reservoir VideoPlayer: Pass in either the `embedCode` prop or \" +\n            \"both the `videoType` and `videoId` props; all were set.\"\n        );\n        isInvalid = true;\n      }\n\n      if (\n        videoId &&\n        (videoId.includes(\"://\") ||\n          videoId.includes(\"http\") ||\n          videoId.includes(\".\") ||\n          videoId.includes(\"youtube\") ||\n          videoId.includes(\"vimeo\"))\n      ) {\n        console.warn(\n          \"NYPL Reservoir VideoPlayer: The `videoId` prop is not configured properly.\"\n        );\n        isInvalid = true;\n      }\n\n      if (\n        embedCodeFinal &&\n        ((!embedCodeFinal.includes(\"vimeo.com\") &&\n          !embedCodeFinal.includes(\"youtube.com\")) ||\n          !embedCodeFinal.includes(\"<iframe\") ||\n          !embedCodeFinal.includes(\"</iframe\"))\n      ) {\n        console.warn(\n          \"NYPL Reservoir VideoPlayer: The `embedCode` prop is not configured properly.\"\n        );\n        isInvalid = true;\n      }\n\n      const variant = isInvalid ? \"invalid\" : aspectRatio;\n      const styles = useMultiStyleConfig(\"VideoPlayer\", { variant });\n\n      const embedElement = embedCodeFinal ? (\n        <span dangerouslySetInnerHTML={{ __html: embedCodeFinal }} />\n      ) : (\n        <Box\n          as=\"iframe\"\n          src={videoSrc}\n          title={iframeTitleFinal}\n          frameBorder=\"0\"\n          allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; fullscreen; gyroscope; picture-in-picture\"\n          allowFullScreen\n          __css={styles.iframe}\n        />\n      );\n\n      return (\n        <Box\n          className={className}\n          data-testid=\"video-player-component\"\n          id={id}\n          ref={ref}\n          __css={styles}\n          {...rest}\n        >\n          {isInvalid ? (\n            <span dangerouslySetInnerHTML={{ __html: errorMessage }} />\n          ) : (\n            <ComponentWrapper\n              headingText={headingText ? headingText : undefined}\n              descriptionText={descriptionText ? descriptionText : undefined}\n              helperText={\n                helperText && showHelperInvalidText ? helperText : undefined\n              }\n              id={`${id}-componentWrapper`}\n            >\n              <Box __css={styles.inside}>{embedElement}</Box>\n            </ComponentWrapper>\n          )}\n        </Box>\n      );\n    }\n  )\n);\n\nexport default VideoPlayer;\n"],"names":["VideoPlayerAspectRatiosArray","VideoPlayerTypesArray","VideoPlayer","chakra","forwardRef","props","ref","aspectRatio","className","descriptionText","embedCode","headingText","helperText","id","iframeTitle","showHelperInvalidText","videoId","videoType","rest","iframeTitleFinal","videoSrc","iFrameTitleEmbedCode","embedCodeFinal","errorMessage","isInvalid","styles","useMultiStyleConfig","embedElement","jsx","Box","ComponentWrapper"],"mappings":"wOAMO,MAAAA,EAAA,CAAqC,cAC1C,gBACA,QAEF,EACOC,EAAA,CAAA,QAAA,SAAA,EAuCAC,EAAAC,EAAoBC,EAAA,WACzB,CAAAC,EAAAC,IAAA,CAEI,KAAA,CAAM,YAAAC,EACJ,UAAAC,EACA,gBAAAC,EACA,UAAAC,EACA,YAAAC,EACA,WAAAC,EACA,GAAAC,EACA,YAAAC,EACA,sBAAAC,EAAA,GACwB,QAAAC,EACxB,UAAAC,EACA,GAAAC,CACG,EAAAb,EAGLc,EAAAF,IAAA,QAAAH,GAAA,qBAAAA,GAAA,uBAKAM,EAAAH,IAAA,QAAA,kCAAAD,CAAA,qBAAA,iCAAAA,CAAA,gDAKAK,EAAAP,EAAA,GAAAA,CAAA,GAAA,eAIAQ,EAAAZ,GAAAA,EAAA,SAAA,SAAA,GAAA,CAAAA,EAAA,SAAA,QAAA,EAAAA,EAAA,QAIgB,WACR,kBAAAW,CAAA,IACsC,EAAAX,EAI9Ca,EAAA,qHAIA,IAAAC,EAAA,GACA,CAAAF,GAAA,CAAAL,GAAA,CAAAD,GACE,QAAA,KAAQ,gIACN,EAGFQ,EAAA,IAAY,CAAAF,GAAA,CAAAL,GAEZ,QAAA,KAAQ,qGACN,EAGFO,EAAA,IAAY,CAAAF,GAAA,CAAAN,GAEZ,QAAA,KAAQ,qGACN,EAGFQ,EAAA,IAAYF,IAAAL,GAAAD,KAEZ,QAAA,KAAQ,4HACN,EAGFQ,EAAA,IAGFR,IAAAA,EAAA,SAAA,KAAA,GAAAA,EAAA,SAAA,MAAA,GAAAA,EAAA,SAAA,GAAA,GAAAA,EAAA,SAAA,SAAA,GAAAA,EAAA,SAAA,OAAA,KAQE,QAAA,KAAQ,4EACN,EAEFQ,EAAA,IAGFF,IAAA,CAAAA,EAAA,SAAA,WAAA,GAAA,CAAAA,EAAA,SAAA,aAAA,GAAA,CAAAA,EAAA,SAAA,SAAA,GAAA,CAAAA,EAAA,SAAA,UAAA,KAOE,QAAA,KAAQ,8EACN,EAEFE,EAAA,IAIF,MAAAC,EAAAC,EAAA,cAAA,CAAA,QADAF,EAAA,UAAAjB,CACA,CAAA,EAEAoB,EAAAL,EAAAM,EAAA,OAAA,CAAA,wBAAA,CAAA,OAAAN,EAAA,CAAA,EAAAM,EAGEC,EAAC,CAAA,GAAA,SACI,IAAAT,EACE,MAAAD,EACE,YAAA,IACK,MAAA,uGACN,gBAAA,GACS,MAAAM,EAAA,MACD,CAAA,EAIlB,OAAAG,EACEC,EAAC,CAAA,UAAArB,EACC,cAAA,yBACY,GAAAK,EACZ,IAAAP,EACA,MAAAmB,EACO,GAAAP,EACH,SAAAM,EAAAI,EAAA,OAAA,CAAA,wBAAA,CAAA,OAAAL,EAAA,CAAA,EAAAK,EAKFE,EAAC,CAAA,YAAAnB,GAAA,OAC0C,gBAAAF,GAAA,OACY,WAAAG,GAAAG,EAAAH,EAAA,OAEA,GAAA,GAAAC,CAAA,oBAE5C,SAAAe,EAAAC,EAAA,CAAA,MAAAJ,EAAA,OAAA,SAAAE,EAAA,CAEgC,CAAA,CAC3C,CAAA,CAEJ,CAEJ,CAEJ;"}