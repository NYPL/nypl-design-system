{"version":3,"file":"Template-004c0517.js","sources":["../../../src/components/Template/Template.tsx"],"sourcesContent":["import { Box, chakra, useStyleConfig } from \"@chakra-ui/react\";\nimport React, { forwardRef } from \"react\";\n\nimport SkipNavigation from \"../SkipNavigation/SkipNavigation\";\n\nexport interface TemplateProps {}\nexport interface TemplateHeaderProps {\n  /** Flag to render an HTML header element. True by default. */\n  renderHeaderElement?: boolean;\n}\nexport interface TemplateFooterProps {\n  /** Flag to render an HTML footer element. True by default. */\n  renderFooterElement?: boolean;\n}\nexport interface TemplateSidebarProps {\n  /** Renders the `TemplateContentSidebar` component either on the left or\n   * right side of the `TemplateContentPrimary` component. */\n  sidebar?: \"none\" | \"left\" | \"right\";\n}\nexport interface TemplateContentProps extends TemplateSidebarProps {\n  /** ID used for the `main` HTML element. Defaults to \"mainContent\". Useful\n   * anchor for the application skip navigation. */\n  id?: string;\n}\n\nexport interface TemplateAppContainerProps\n  extends TemplateFooterProps,\n    TemplateHeaderProps,\n    TemplateSidebarProps {\n  /** DOM that will be rendered before the rest of the components in\n   * `TemplateAppContainer` and immediately before the `TemplateHeader` component. */\n  aboveHeader?: React.ReactElement;\n  /** DOM that will be rendered in the `TemplateBreakout` component section. */\n  breakout?: React.ReactElement;\n  /** DOM that will be rendered in the `TemplateContentBottom` component section. */\n  contentBottom?: React.ReactElement;\n  /** ID used for the `main` HTML element. Defaults to \"mainContent\". Useful\n   * anchor for the application skip navigation. */\n  contentId?: string;\n  /** DOM that will be rendered in the `TemplateContentPrimary` component section. */\n  contentPrimary?: React.ReactElement;\n  /** DOM that will be rendered in the `TemplateContentSidebar` component section. */\n  contentSidebar?: React.ReactElement;\n  /** DOM that will be rendered in the `TemplateContentTop` component section. */\n  contentTop?: React.ReactElement;\n  /** DOM that will be rendered in the `TemplateFooter` component section. */\n  footer?: React.ReactElement;\n  /** DOM that will be rendered in the `TemplateHeader` component section. */\n  header?: React.ReactElement;\n  /** Render the `SkipNavigation` component or not. False by default. */\n  renderSkipNavigation?: boolean;\n}\n\n/**\n * The main top-level parent component that wraps all template-related\n * components.\n */\nconst Template = chakra(\n  forwardRef<HTMLDivElement, React.PropsWithChildren<TemplateProps>>(\n    (props, ref?) => {\n      const styles = useStyleConfig(\"Template\", {});\n      return (\n        <Box ref={ref} __css={styles} {...props}>\n          {props.children}\n        </Box>\n      );\n    }\n  )\n);\n\n/**\n * This optional component renders its children from edge-to-edge and should\n * be used for alerts or notifications that are typically site-wide. This must\n * be rendered immediately before the `TemplateHeader` component. This is meant\n * for components that render an `aside` HTML element or HTML element with the\n * `role=\"complementary\"` attribute. These elements should *not* be rendered\n * in the `header` HTML section since that's an accessibility violation.\n */\nconst TemplateAboveHeader = (props: React.PropsWithChildren<TemplateProps>) => {\n  const styles = useStyleConfig(\"TemplateBreakout\", {});\n  return <Box __css={styles}>{props.children}</Box>;\n};\n\n/**\n * This optional component should be the first child of the `Template`\n * component. This is rendered as an HTML `<header>` element. If an HTML\n * `<header>` element is already passed in a custom component as the children,\n * set `renderFooterElement` to `false`. Otherwise, the parent wrapper will\n * render an HTML `<header>` element.\n */\nconst TemplateHeader = ({\n  children,\n  renderHeaderElement = true,\n}: React.PropsWithChildren<TemplateHeaderProps>) => {\n  const styles = useStyleConfig(\"TemplateBreakout\", {});\n  let headerElement = <Box __css={styles}>{children}</Box>;\n\n  // The user wants to render the `header` HTML element.\n  if (renderHeaderElement) {\n    // But if they passed in a component that renders an HTML `<header>`,\n    // then log a warning.\n    React.Children.map(children as JSX.Element, (child: React.ReactElement) => {\n      if (child?.type === \"header\" || child?.props?.mdxType === \"header\") {\n        console.warn(\n          \"NYPL Reservoir TemplateHeader: An HTML `header` element was passed \" +\n            \"in. Set `renderHeaderElement` to `false` to avoid nested HTML \" +\n            \"`header` elements.\"\n        );\n      }\n    });\n    headerElement = (\n      <Box as=\"header\" __css={styles}>\n        {children}\n      </Box>\n    );\n  }\n  return headerElement;\n};\n\n/**\n * This component should be used inside the `Template` component to contain both\n * the `TemplateAboveHeader` and `TemplateHeader` components. This is meant to\n * render its children from edge to edge and is most useful for the headers,\n * `Breadcrumbs`, and `Hero` components or other banner-like components.\n */\nconst TemplateBreakout = (props: React.PropsWithChildren<TemplateProps>) => {\n  const styles = useStyleConfig(\"TemplateBreakout\", {});\n  return <Box __css={styles}>{props.children}</Box>;\n};\n\n/**\n * This component is most useful to render content on the page. This renders an\n * HTML `<main>` element with an id of \"mainContent\". The \"mainContent\" id should\n * be used as the consuming application's skip navigation link. The `TemplateContent`\n * component also takes a `sidebar` prop with optional \"left\" or \"right\" values.\n * This will set the correct *styling* needed for the `TemplateContentPrimary`\n * and `TemplateContentSidebar` components. Note that `TemplateContentPrimary`\n * and `TemplateContentSidebar` must be ordered correctly as children elements\n * for the appropriate styles to take effect.\n */\nconst TemplateContent = (\n  props: React.PropsWithChildren<TemplateContentProps>\n) => {\n  const { children, id = \"mainContent\", sidebar = \"none\" } = props;\n  const styles = useStyleConfig(\"TemplateContent\", {\n    variant: sidebar,\n  });\n  // Manually pass in the `sidebar` prop to the `TemplateContentPrimary` and\n  // `TemplateContentSidebar` components.\n  const newChildren = React.Children.map(\n    children as JSX.Element,\n    (child: React.ReactElement) => {\n      let newChild = child;\n      if (\n        (child && child?.type === TemplateContentPrimary) ||\n        (child?.props && child.props?.mdxType === \"TemplateContentPrimary\") ||\n        child?.type === TemplateContentSidebar ||\n        (child?.props && child.props?.mdxType === \"TemplateContentSidebar\")\n      ) {\n        newChild = React.cloneElement(child, { sidebar });\n      }\n\n      return newChild;\n    }\n  );\n\n  return (\n    <Box as=\"main\" id={id} __css={styles}>\n      {newChildren}\n    </Box>\n  );\n};\n\n/**\n * This optional component must be used inside the `TemplateContent` component.\n * This renders content in the main width of the container and will always render\n * above the primary component and the sidebar component (if any).\n */\nconst TemplateContentTop = (props: React.PropsWithChildren<TemplateProps>) => {\n  const styles = useStyleConfig(\"TemplateContentTopBottom\", {});\n  return <Box __css={styles}>{props.children}</Box>;\n};\n\n/**\n * This optional component must be used inside the `TemplateContent` component\n * and after the `TemplateContentPrimary` or `TemplateContentSidebar` component.\n * This renders content in the main width of the container and should always\n * render below the primary component and the sidebar component (if any).\n */\nconst TemplateContentBottom = (\n  props: React.PropsWithChildren<TemplateProps>\n) => {\n  const styles = useStyleConfig(\"TemplateContentTopBottom\", {});\n  return <Box __css={styles}>{props.children}</Box>;\n};\n\n/**\n * This component is used to render content in a column when there must be a\n * sidebar component on either its left or right side. It must go inside the\n * `TemplateContent` component. An optional `sidebar` prop value of \"left\" or\n * \"right\" can be passed to render the correct CSS styles. If the `sidebar`\n * prop is used in the `TemplateContent` component, there is no need to pass\n * the `sidebar` prop to this component -- `TemplateContent` will handle it.\n */\nconst TemplateContentPrimary = (\n  props: React.PropsWithChildren<TemplateContentProps>\n) => {\n  const { sidebar } = props;\n  const styles = useStyleConfig(\"TemplateContentPrimary\", {\n    variant: sidebar,\n  });\n  return <Box __css={styles}>{props.children}</Box>;\n};\n\n/**\n * This component is used to render content in a sidebar column. It must go\n * inside the `TemplateContent` component and must be paired with the\n * `TemplateContentPrimary` component. If this is a left sidebar, it needs to be\n * rendered before the `TemplateContentPrimary` component. If this is a right\n * sidebar, it needs to be rendered after the `TemplateContentPrimary` component.\n * An optional `sidebar` prop value of \"left\" or \"right\" can be passed to render\n * the correct CSS styles. If the `sidebar` prop is used in the `TemplateContent`\n * component, there is no need to pass the `sidebar` prop to this component --\n * `TemplateContent` will handle it.\n */\nconst TemplateContentSidebar = (\n  props: React.PropsWithChildren<TemplateContentProps>\n) => {\n  const { sidebar } = props;\n  const styles = useStyleConfig(\"TemplateContentSidebar\", {\n    variant: sidebar,\n  });\n  return <Box __css={styles}>{props.children}</Box>;\n};\n\n/**\n * This optional component should be the last child of the `Template`\n * component. This is rendered as an HTML `<footer>` element and spans the full\n * width of the page. If an HTML `<footer>` element is already passed in a\n * custom component, set `renderFooterElement` to `false`.\n */\nconst TemplateFooter = ({\n  children,\n  renderFooterElement = true,\n}: React.PropsWithChildren<TemplateFooterProps>) => {\n  const styles = useStyleConfig(\"TemplateBreakout\", {});\n  let footerElement = <Box __css={styles}>{children}</Box>;\n\n  // The user wants to render the `footer` HTML element.\n  if (renderFooterElement) {\n    // But give a warning if one was passed.\n    React.Children.map(children as JSX.Element, (child: React.ReactElement) => {\n      if (child?.type === \"footer\" || child?.props?.mdxType === \"footer\") {\n        console.warn(\n          \"NYPL Reservoir TemplateFooter: An HTML `footer` element was passed \" +\n            \"in. Set `renderFooterElement` to `false` to avoid nested HTML \" +\n            \"`footer` elements.\"\n        );\n      }\n    });\n    footerElement = (\n      <Box as=\"footer\" __css={styles}>\n        {children}\n      </Box>\n    );\n  }\n  return footerElement;\n};\n\n/**\n * This single component can be used instead of all the individual template\n * components. Instead of importing and rendering the needed \"template\"\n * components, each section is passed as a prop to the section where it should\n * be rendered. For example, if you want to render content in the\n * `TemplateContentPrimary` section, then pass it as a prop to `contentPrimary`.\n */\nexport const TemplateAppContainer = chakra(\n  forwardRef<\n    HTMLDivElement,\n    React.PropsWithChildren<TemplateAppContainerProps>\n  >((props, ref?) => {\n    const {\n      aboveHeader,\n      breakout,\n      contentId = \"mainContent\",\n      contentBottom,\n      contentPrimary,\n      contentSidebar,\n      contentTop,\n      footer,\n      header,\n      sidebar = \"none\",\n      renderFooterElement = true,\n      renderHeaderElement = true,\n      renderSkipNavigation = false,\n      ...rest\n    } = props;\n    const aboveHeaderElem = aboveHeader && (\n      <TemplateAboveHeader>{aboveHeader}</TemplateAboveHeader>\n    );\n    const contentTopElem = contentTop && (\n      <TemplateContentTop>{contentTop}</TemplateContentTop>\n    );\n    const contentPrimaryElem = contentPrimary && (\n      <TemplateContentPrimary>{contentPrimary}</TemplateContentPrimary>\n    );\n    const contentBottomElem = contentBottom && (\n      <TemplateContentBottom>{contentBottom}</TemplateContentBottom>\n    );\n    const contentSidebarElem = contentSidebar && (\n      <TemplateContentSidebar>{contentSidebar}</TemplateContentSidebar>\n    );\n    return (\n      <>\n        {renderSkipNavigation ? <SkipNavigation /> : null}\n        <Template ref={ref} {...rest}>\n          <TemplateBreakout>\n            {aboveHeaderElem}\n            {(header || breakout) && (\n              <TemplateHeader renderHeaderElement={renderHeaderElement}>\n                {header}\n                {breakout}\n              </TemplateHeader>\n            )}\n          </TemplateBreakout>\n          {/* Note that setting `sidebar` as a prop here affects the\n          TemplateContentSidebar and TemplateContentPrimary components. */}\n          <TemplateContent id={contentId} sidebar={sidebar}>\n            {contentTopElem}\n\n            {sidebar === \"left\" && contentSidebarElem}\n\n            {contentPrimaryElem}\n\n            {sidebar === \"right\" && contentSidebarElem}\n\n            {contentBottomElem}\n          </TemplateContent>\n          {footer && (\n            <TemplateFooter renderFooterElement={renderFooterElement}>\n              {footer}\n            </TemplateFooter>\n          )}\n        </Template>\n      </>\n    );\n  })\n);\n\nexport {\n  Template,\n  TemplateAboveHeader,\n  TemplateBreakout,\n  TemplateContent,\n  TemplateContentBottom,\n  TemplateContentPrimary,\n  TemplateContentSidebar,\n  TemplateContentTop,\n  TemplateFooter,\n  TemplateHeader,\n};\nexport default TemplateAppContainer;\n"],"names":["Template","chakra","forwardRef","props","ref","styles","useStyleConfig","jsx","Box","TemplateAboveHeader","TemplateHeader","children","renderHeaderElement","headerElement","React","child","_a","TemplateBreakout","TemplateContent","id","sidebar","newChildren","newChild","TemplateContentPrimary","TemplateContentSidebar","_b","TemplateContentTop","TemplateContentBottom","TemplateFooter","renderFooterElement","footerElement","TemplateAppContainer","aboveHeader","breakout","contentId","contentBottom","contentPrimary","contentSidebar","contentTop","footer","header","renderSkipNavigation","rest","aboveHeaderElem","contentTopElem","contentPrimaryElem","contentBottomElem","contentSidebarElem","jsxs","Fragment","SkipNavigation"],"mappings":"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"}