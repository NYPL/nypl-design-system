{"version":3,"file":"Table-64c6aa77.js","sources":["../../../node_modules/@chakra-ui/table/dist/chakra-ui-table.esm.js","../../../src/hooks/useWindowSize.ts","../../../src/components/Table/Table.tsx"],"sourcesContent":["import { forwardRef, chakra, useMultiStyleConfig, omitThemingProps, StylesProvider, useStyles } from '@chakra-ui/system';\nimport { cx, __DEV__ } from '@chakra-ui/utils';\nimport * as React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar _excluded = [\"overflow\", \"overflowX\", \"className\"],\n    _excluded2 = [\"className\"],\n    _excluded3 = [\"placement\"],\n    _excluded4 = [\"isNumeric\"],\n    _excluded5 = [\"isNumeric\"];\nvar TableContainer = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _ref;\n\n  var overflow = props.overflow,\n      overflowX = props.overflowX,\n      className = props.className,\n      rest = _objectWithoutPropertiesLoose(props, _excluded);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    className: cx(\"chakra-table__container\", className)\n  }, rest, {\n    __css: {\n      display: \"block\",\n      whiteSpace: \"nowrap\",\n      WebkitOverflowScrolling: \"touch\",\n      overflowX: (_ref = overflow != null ? overflow : overflowX) != null ? _ref : \"auto\",\n      overflowY: \"hidden\",\n      maxWidth: \"100%\"\n    }\n  }));\n});\nvar Table = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useMultiStyleConfig(\"Table\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      className = _omitThemingProps.className,\n      tableProps = _objectWithoutPropertiesLoose(_omitThemingProps, _excluded2);\n\n  return /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.table, _extends({\n    role: \"table\",\n    ref: ref,\n    __css: styles.table,\n    className: cx(\"chakra-table\", className)\n  }, tableProps)));\n});\n\nif (__DEV__) {\n  Table.displayName = \"Table\";\n}\n\nvar TableCaption = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _props$placement = props.placement,\n      placement = _props$placement === void 0 ? \"bottom\" : _props$placement,\n      rest = _objectWithoutPropertiesLoose(props, _excluded3);\n\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.caption, _extends({}, rest, {\n    ref: ref,\n    __css: _extends({}, styles.caption, {\n      captionSide: placement\n    })\n  }));\n});\n\nif (__DEV__) {\n  TableCaption.displayName = \"TableCaption\";\n}\n\nvar Thead = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.thead, _extends({}, props, {\n    ref: ref,\n    __css: styles.thead\n  }));\n});\nvar Tbody = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.tbody, _extends({}, props, {\n    ref: ref,\n    __css: styles.tbody\n  }));\n});\nvar Tfoot = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.tfoot, _extends({}, props, {\n    ref: ref,\n    __css: styles.tfoot\n  }));\n});\nvar Th = /*#__PURE__*/forwardRef(function (_ref2, ref) {\n  var isNumeric = _ref2.isNumeric,\n      rest = _objectWithoutPropertiesLoose(_ref2, _excluded4);\n\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.th, _extends({}, rest, {\n    ref: ref,\n    __css: styles.th,\n    \"data-is-numeric\": isNumeric\n  }));\n});\nvar Tr = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.tr, _extends({\n    role: \"row\"\n  }, props, {\n    ref: ref,\n    __css: styles.tr\n  }));\n});\nvar Td = /*#__PURE__*/forwardRef(function (_ref3, ref) {\n  var isNumeric = _ref3.isNumeric,\n      rest = _objectWithoutPropertiesLoose(_ref3, _excluded5);\n\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.td, _extends({\n    role: \"gridcell\"\n  }, rest, {\n    ref: ref,\n    __css: styles.td,\n    \"data-is-numeric\": isNumeric\n  }));\n});\n\nexport { Table, TableCaption, TableContainer, Tbody, Td, Tfoot, Th, Thead, Tr };\n","import React from \"react\";\n\ninterface WindowSize {\n  width: number;\n  height: number;\n}\n\n/**\n * React hook used to get the window size on device resizing.\n * Based on https://usehooks-typescript.com/react-hook/use-window-size\n */\nfunction useWindowSize(): WindowSize {\n  const [windowSize, setWindowSize] = React.useState<WindowSize>({\n    width: 0,\n    height: 0,\n  });\n\n  React.useEffect(() => {\n    const handler = () => {\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    };\n\n    // Set size at the first client-side load\n    handler();\n\n    window.addEventListener(\"resize\", handler);\n\n    // Remove event listener on cleanup\n    return () => {\n      window.removeEventListener(\"resize\", handler);\n    };\n  }, []);\n\n  return windowSize;\n}\n\nexport default useWindowSize;\n","import {\n  chakra,\n  Table as ChakraTable,\n  TableCaption as ChakraTableCaption,\n  Tbody as ChakraTbody,\n  Thead as ChakraTHead,\n  Td as ChakraTd,\n  Th as ChakraTh,\n  Tr as ChakraTr,\n  useMultiStyleConfig,\n} from \"@chakra-ui/react\";\nimport React, { forwardRef } from \"react\";\nimport useWindowSize from \"../../hooks/useWindowSize\";\n\ninterface CustomColors {\n  backgroundColor?: string;\n  color?: string;\n}\nexport interface TableProps {\n  /** Additional class name for the `Table` component. */\n  className?: string;\n  /** Array of string values used to populate the `Table` column headers.\n   * For improved accessibility, column headers are required. */\n  columnHeaders: string[];\n  /** Hex value to set the background color of the column headers. */\n  columnHeadersBackgroundColor?: string;\n  /** Hex value to set the text color of the column headers. */\n  columnHeadersTextColor?: string;\n  /** ID that other components can cross reference for accessibility purposes. */\n  id?: string;\n  /** If true, a border will be displayed between each row in the `Table`\n   * component. The default value is false. */\n  showRowDividers?: boolean;\n  /** Two-dimensional array used to populate the table rows. */\n  tableData: (string | JSX.Element)[][];\n  /** Displays `Table` title element. */\n  titleText?: string;\n  /** If true, the first cell of each row in the `Table` component will be\n   * visually styled as a header. The default value is false */\n  useRowHeaders?: boolean;\n}\n\n/**\n * Basic `Table` component used to organize and display tabular data in\n * rows and columns.\n */\nexport const Table = chakra(\n  forwardRef<HTMLTableElement, React.PropsWithChildren<TableProps>>(\n    (props, ref?) => {\n      const {\n        className,\n        columnHeaders = [],\n        columnHeadersBackgroundColor,\n        columnHeadersTextColor,\n        id,\n        showRowDividers = false,\n        tableData,\n        titleText,\n        useRowHeaders = false,\n        ...rest\n      } = props;\n      const customColors: CustomColors = {};\n\n      columnHeadersBackgroundColor &&\n        (customColors[\"backgroundColor\"] = columnHeadersBackgroundColor);\n      columnHeadersTextColor &&\n        (customColors[\"color\"] = columnHeadersTextColor);\n\n      const styles = useMultiStyleConfig(\"CustomTable\", {\n        columnHeadersBackgroundColor,\n        columnHeadersTextColor,\n        showRowDividers,\n        useRowHeaders,\n      });\n\n      // Based on --nypl-breakpoint-medium\n      const breakpointMedium = 600;\n      const windowDimensions = useWindowSize();\n\n      const tableCaption = titleText && (\n        <ChakraTableCaption>{titleText}</ChakraTableCaption>\n      );\n\n      const columnHeadersElems =\n        columnHeaders.length > 0 ? (\n          <ChakraTHead>\n            <ChakraTr>\n              {columnHeaders.map((child, key) => (\n                <ChakraTh key={key} scope=\"col\" sx={customColors}>\n                  {child}\n                </ChakraTh>\n              ))}\n            </ChakraTr>\n          </ChakraTHead>\n        ) : (\n          console.warn(\n            \"NYPL Reservoir Table: Column headers have not been set. For improved accessibility, \" +\n              \"column headers are required.\"\n          )\n        );\n\n      /**\n       * This renders a normal `tbody` DOM element structure if the `tableData`\n       * passed is a two-dimensional array. This is to render the appropriate\n       * row and column structure for a table.\n       */\n      const tableBodyElems = () => {\n        if (\n          !Array.isArray(tableData) ||\n          tableData.length <= 0 ||\n          tableData[0].constructor !== Array\n        ) {\n          console.warn(\n            \"NYPL Reservoir Table: Data in the `tableData` prop must be a two dimensional array.\"\n          );\n          return null;\n        }\n\n        for (let i = 1; i < tableData.length; i++) {\n          if (tableData[0].length !== tableData[i].length) {\n            console.warn(\n              \"NYPL Reservoir Table: The number of columns in each row of the data table are not identical. \" +\n                \"The `Table` component may not render properly.\"\n            );\n            break;\n          }\n        }\n\n        const cellContent = (key: number, column: string | JSX.Element) => {\n          return windowDimensions.width <= breakpointMedium ? (\n            <>\n              <span>{columnHeaders[key]}</span>\n              <span>{column}</span>\n            </>\n          ) : (\n            column\n          );\n        };\n\n        return (\n          <ChakraTbody>\n            {tableData.map((row, index) => (\n              <ChakraTr key={index}>\n                {row.map((column, key) =>\n                  key === 0 && useRowHeaders ? (\n                    <ChakraTh scope=\"row\" key={key}>\n                      {cellContent(key, column)}\n                    </ChakraTh>\n                  ) : (\n                    <ChakraTd key={key}>{cellContent(key, column)}</ChakraTd>\n                  )\n                )}\n              </ChakraTr>\n            ))}\n          </ChakraTbody>\n        );\n      };\n\n      for (let j = 0; j < tableData.length; j++) {\n        if (\n          columnHeaders.length &&\n          columnHeaders.length !== tableData[j].length\n        ) {\n          console.warn(\n            \"NYPL Reservoir Table: The number of column headers in the `columnHeaders` prop is not equal \" +\n              \"to the number of columns in the data table. \" +\n              \"The `Table` component may not render properly.\"\n          );\n          break;\n        }\n      }\n\n      return (\n        <ChakraTable\n          className={className}\n          id={id}\n          ref={ref}\n          sx={styles}\n          {...rest}\n        >\n          {tableCaption}\n          {columnHeadersElems}\n          {tableBodyElems()}\n        </ChakraTable>\n      );\n    }\n  )\n);\n\nexport default Table;\n"],"names":["_extends","target","i","source","key","_objectWithoutPropertiesLoose","excluded","sourceKeys","_excluded2","_excluded3","_excluded4","_excluded5","Table","forwardRef","props","ref","styles","useMultiStyleConfig","_omitThemingProps","omitThemingProps","className","tableProps","React.createElement","StylesProvider","chakra","cx","TableCaption","_props$placement","placement","rest","useStyles","Thead","Tbody","Th","_ref2","isNumeric","Tr","Td","_ref3","useWindowSize","windowSize","setWindowSize","React","handler","columnHeaders","columnHeadersBackgroundColor","columnHeadersTextColor","id","showRowDividers","tableData","titleText","useRowHeaders","customColors","breakpointMedium","windowDimensions","tableCaption","jsx","ChakraTableCaption","columnHeadersElems","ChakraTHead","ChakraTr","child","ChakraTh","tableBodyElems","cellContent","column","jsxs","Fragment","ChakraTbody","row","index","ChakraTd","j","ChakraTable"],"mappings":"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","x_google_ignoreList":[0]}