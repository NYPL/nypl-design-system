{"version":3,"file":"FeedbackBox-9e7be7e7.js","sources":["../../../src/components/FeedbackBox/useFeedbackBoxReducer.ts","../../../src/components/FeedbackBox/FeedbackBox.tsx"],"sourcesContent":["import { useReducer } from \"react\";\n\ntype Action = {\n  // The fields that we are updating or reset them all at once.\n  type: \"category\" | \"comment\" | \"email\" | \"clear\";\n  payload?: string;\n};\ninterface FeedbackBoxState {\n  category?: string;\n  comment: string;\n  email?: string;\n}\n\nconst initialState: FeedbackBoxState = {\n  category: \"comment\",\n  comment: \"\",\n  email: \"\",\n};\n\n/**\n * Simple reducer to manage the internal state of the form\n * fields in the FeedbackBox component.\n */\nfunction reducer(state: FeedbackBoxState, action: Action) {\n  switch (action.type) {\n    case \"category\":\n      return {\n        ...state,\n        category: action.payload,\n      };\n    case \"comment\":\n      return {\n        ...state,\n        comment: action.payload,\n      };\n    case \"email\":\n      return {\n        ...state,\n        email: action.payload,\n      };\n    case \"clear\":\n    default:\n      return initialState;\n  }\n}\n\n/**\n * DS internal helper reducer hook to manage internal state for the FeedbackBox\n * component. Note: this custom hook is not tested directly as it's an\n * implementation detail of the FeedbackBox component, following the guidance\n * of RTL: https://testing-library.com/docs/example-react-hooks-useReducer\n */\nfunction useFeedbackBoxReducer() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const setCategory = (category: string) =>\n    dispatch({ type: \"category\", payload: category });\n  const setComment = (comment: string) =>\n    dispatch({ type: \"comment\", payload: comment });\n  const setEmail = (email: string) =>\n    dispatch({ type: \"email\", payload: email });\n  const clearValues = () => dispatch({ type: \"clear\" });\n\n  return { state, setCategory, setComment, setEmail, clearValues };\n}\n\nexport default useFeedbackBoxReducer;\n","import {\n  Box,\n  chakra,\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n  useColorModeValue,\n  useDisclosure,\n  useMultiStyleConfig,\n  VStack,\n} from \"@chakra-ui/react\";\nimport { forwardRef, useEffect, useRef, useState } from \"react\";\n\nimport Button from \"../Button/Button\";\nimport ButtonGroup from \"../ButtonGroup/ButtonGroup\";\nimport Form, { FormField } from \"../Form/Form\";\nimport Icon from \"../Icons/Icon\";\nimport Link from \"../Link/Link\";\nimport Notification from \"../Notification/Notification\";\nimport Radio from \"../Radio/Radio\";\nimport RadioGroup from \"../RadioGroup/RadioGroup\";\nimport Text from \"../Text/Text\";\nimport TextInput, { TextInputRefType } from \"../TextInput/TextInput\";\nimport useStateWithDependencies from \"../../hooks/useStateWithDependencies\";\nimport useNYPLBreakpoints from \"../../hooks/useNYPLBreakpoints\";\nimport useFeedbackBoxReducer from \"./useFeedbackBoxReducer\";\n\nexport const feedbackBoxViewTypeArray = [\n  \"form\",\n  \"confirmation\",\n  \"error\",\n] as const;\nexport type FeedbackBoxViewType = typeof feedbackBoxViewTypeArray[number];\n\ninterface FeedbackBoxProps {\n  /** Additional class name to add. */\n  className?: string;\n  /** Used to add additional information to the default confirmation message in\n   * the confirmation view. */\n  confirmationText?: string | JSX.Element;\n  /** Used to add description text above the form input fields in\n   * the initial/form view. */\n  descriptionText?: string | JSX.Element;\n  /** A data object containing key/value pairs that will be added to the form\n   * field submitted data. */\n  hiddenFields?: any;\n  /** ID that other components can cross reference for accessibility purposes */\n  id?: string;\n  /** Toggles the invalid state for the comment field. */\n  isInvalidComment?: boolean;\n  /** Toggles the invalid state for the email field. */\n  isInvalidEmail?: boolean;\n  /** Only used for internal purposes. */\n  isOpen?: boolean;\n  /** Used to add a notification above the description in the\n   * initial/form view.*/\n  notificationText?: string | JSX.Element;\n  /** Only used for internal purposes. */\n  onClose?: any;\n  /** Only used for internal purposes. */\n  onOpen?: any;\n  /** Callback function that will be invoked when the form is submitted.\n   * The returned data object contains key/value pairs including the\n   * values from the `hiddenFields` prop.\n   */\n  onSubmit: (values: { [key: string]: string }) => any;\n  /** Toggles the category radio group field. */\n  showCategoryField?: boolean;\n  /** Toggles the email input field. When set to `true`, an additional\n   * confirmation message will be rendered. */\n  showEmailField?: boolean;\n  /** Used to populate the label on the open button and the `Drawer`'s\n   * header title. */\n  title: string;\n  /** Used to specify what screen should be displayed. */\n  view?: FeedbackBoxViewType;\n}\n\n/**\n * The `FeedbackBox` component renders a fixed-positioned button on the bottom\n * right corner of a page that opens a Chakra `Drawer` popup component. Inside\n * of the popup, a form is rendered with fields that allows users to provide\n * feedback. The `FeedbackBox` component does *not* call any API with the\n * submitted data; that feature is the responsibility of the consuming\n * application.\n */\nexport const FeedbackBox = chakra(\n  forwardRef<any, FeedbackBoxProps>(\n    (\n      {\n        className,\n        confirmationText,\n        descriptionText,\n        hiddenFields,\n        id = \"feedbackbox\",\n        isInvalidComment = false,\n        isInvalidEmail = false,\n        notificationText,\n        onSubmit,\n        showCategoryField = false,\n        showEmailField = false,\n        title,\n        view = \"form\",\n        isOpen,\n        onOpen,\n        onClose,\n        ...rest\n      },\n      ref?\n    ) => {\n      // We want to keep internal state for the view but also\n      // update if the consuming app updates it, based on API\n      // success and failure responses.\n      const [viewType, setViewType] = useStateWithDependencies(view);\n      const [finalIsInvalidComment, setFinalIsInvalidComment] =\n        useStateWithDependencies(isInvalidComment);\n      const [isSubmitted, setIsSubmitted] = useState<boolean>(false);\n      // Helps keep track of form field state values.\n      const { state, setCategory, setComment, setEmail, clearValues } =\n        useFeedbackBoxReducer();\n      // Hook into NYPL breakpoint\n      const { isLargerThanMobile } = useNYPLBreakpoints();\n      // Chakra's hook to control Drawer's actions.\n      const disclosure = useDisclosure();\n      const finalIsOpen = isOpen ? isOpen : disclosure.isOpen;\n      const finalOnOpen = onOpen ? onOpen : disclosure.onOpen;\n      const finalOnClose = onClose ? onClose : disclosure.onClose;\n      const focusRef = useRef<HTMLDivElement>();\n      const openButtonRef = useRef<HTMLButtonElement>();\n      const commentInputRef = useRef<TextInputRefType>();\n      const styles = useMultiStyleConfig(\"FeedbackBox\", {});\n      const isFormView = viewType === \"form\";\n      const isConfirmationView = viewType === \"confirmation\";\n      const isErrorView = viewType === \"error\";\n      const confirmationTimeout = 3000;\n      const maxCommentCharacters = 500;\n      const initMinHeight = 165;\n      const initTemplateRows = \"auto 1fr\";\n      const iconColor = useColorModeValue(null, \"dark.ui.typography.body\");\n      const minHeightWithCategory = 235;\n      const minHeightWithEmail = 275;\n      const minHeightWithCategoryAndEmail = 345;\n      const notificationHeightAdjustment = 37;\n      const descriptionHeightAdjustment = 24;\n      let drawerMinHeight = initMinHeight;\n      const closeAndResetForm = () => {\n        finalOnClose();\n        setViewType(\"form\");\n        clearValues();\n        setFinalIsInvalidComment(false);\n\n        // Leave some time after closing before focusing on the open button.\n        setTimeout(() => {\n          openButtonRef?.current?.focus();\n        }, 250);\n      };\n      const internalOnSubmit = (e) => {\n        e.preventDefault();\n        let submittedValues = { ...state };\n        if (hiddenFields) {\n          submittedValues = { ...submittedValues, ...hiddenFields };\n        }\n\n        // Set the invalid state if the comment text field is empty.\n        if (submittedValues.comment.length === 0) {\n          commentInputRef?.current?.focus();\n          setFinalIsInvalidComment(true);\n          return;\n        }\n\n        onSubmit && onSubmit(submittedValues);\n        setFinalIsInvalidComment(false);\n        setIsSubmitted(true);\n      };\n      const notificationElement =\n        isFormView && notificationText ? (\n          <Notification\n            isCentered\n            noMargin\n            notificationContent={notificationText}\n            showIcon={false}\n            p=\"0\"\n            sx={{\n              // The padding of the Notification is smaller than\n              // the initial one.\n              \"> div\": {\n                py: \"xs\",\n              },\n            }}\n            width=\"100%\"\n          />\n        ) : undefined;\n      const descriptionColor = useColorModeValue(\n        \"ui.typography.heading\",\n        \"dark.ui.typography.heading\"\n      );\n      const descriptionElement =\n        isFormView && descriptionText ? (\n          <Text color={descriptionColor} fontWeight=\"medium\" noSpace>\n            {descriptionText}\n          </Text>\n        ) : undefined;\n      const privacyPolicyField = (\n        <FormField>\n          <Link\n            href=\"https://www.nypl.org/help/about-nypl/legal-notices/privacy-policy\"\n            type=\"external\"\n            fontSize=\"text.tag\"\n            isUnderlined={false}\n            width=\"fit-content\"\n          >\n            Privacy Policy\n          </Link>\n        </FormField>\n      );\n\n      // When the submit button is clicked, set a timeout before displaying\n      // the confirmation or error screen. This automatically goes to the\n      // confirmation view after three (3) seconds, but the consuming app\n      // can set the error view if there are any issues.\n      useEffect(() => {\n        let timer;\n        if (isSubmitted) {\n          // If the consuming app does not provide any updates based\n          // on its API response, go to confirmation screen.\n          timer = setTimeout(() => {\n            setIsSubmitted(false);\n            if (isErrorView) {\n              setViewType(\"error\");\n            } else {\n              setViewType(\"confirmation\");\n            }\n            clearValues();\n          }, confirmationTimeout);\n\n          // If the consuming app does pass the API response to the\n          // component, then cancel the timeout above and display the\n          // appropriate screen.\n          if (view !== viewType) {\n            setIsSubmitted(false);\n            setViewType(view);\n            clearTimeout(timer);\n          }\n        }\n\n        return () => clearTimeout(timer);\n      }, [clearValues, isErrorView, isSubmitted, setViewType, view, viewType]);\n\n      // Delay focusing on the confirmation or error message\n      // because it's an element that dynamically gets rendered,\n      // so it is not always available in the DOM.\n      useEffect(() => {\n        let timer;\n        if (viewType === \"error\" || viewType === \"confirmation\") {\n          timer = setTimeout(() => {\n            focusRef?.current?.focus();\n          }, 250);\n        }\n        return () => clearTimeout(timer);\n      }, [focusRef, viewType]);\n      if (showCategoryField) {\n        drawerMinHeight = minHeightWithCategory;\n      }\n      if (showEmailField) {\n        drawerMinHeight = minHeightWithEmail;\n      }\n      if (showCategoryField && showEmailField) {\n        drawerMinHeight = minHeightWithCategoryAndEmail;\n      }\n      if (notificationText) {\n        drawerMinHeight += notificationHeightAdjustment;\n      }\n      if (descriptionText) {\n        drawerMinHeight += descriptionHeightAdjustment;\n      }\n      if (notificationText && descriptionText) {\n        drawerMinHeight += 16;\n      }\n      let finalDrawerMinHeight = drawerMinHeight + \"px\";\n\n      return (\n        <Box className={className} id={id} ref={ref} sx={styles} {...rest}>\n          <Button\n            id=\"open\"\n            onClick={finalOnOpen}\n            sx={styles.openButton}\n            ref={openButtonRef}\n          >\n            {title}\n          </Button>\n\n          <Drawer\n            blockScrollOnMount={false}\n            isOpen={finalIsOpen}\n            onClose={closeAndResetForm}\n            placement=\"bottom\"\n          >\n            {/* Adds the opaque background. */}\n            <DrawerOverlay />\n\n            <DrawerContent sx={styles.drawerContent}>\n              <Button\n                buttonType=\"text\"\n                id=\"close-btn\"\n                onClick={closeAndResetForm}\n                sx={styles.closeButton}\n              >\n                <Icon color=\"ui.black\" name=\"minus\" size=\"medium\" />\n                <span>Close {title}</span>\n              </Button>\n              <DrawerHeader sx={styles.drawerHeader}>\n                <Text data-testid=\"title\">{title}</Text>\n              </DrawerHeader>\n\n              <DrawerBody sx={styles.drawerBody}>\n                <Form\n                  gap=\"grid.s\"\n                  id=\"feedback-form\"\n                  onSubmit={internalOnSubmit}\n                  sx={{\n                    \".feedback-body\": {\n                      alignItems: \"flex-start\",\n                      minHeight: finalDrawerMinHeight,\n                      gridTemplateRows: initTemplateRows,\n                    },\n                    \".feedback-body.response\": {\n                      alignItems: \"center\",\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                      justifyContent: \"center\",\n                    },\n                  }}\n                >\n                  {/* Initial form Screen */}\n                  {isFormView && (\n                    <>\n                      <VStack className=\"feedback-body\" spacing=\"s\">\n                        {(notificationElement || descriptionElement) && (\n                          <>\n                            {notificationElement}\n                            {descriptionElement}\n                          </>\n                        )}\n                        {showCategoryField && (\n                          <FormField>\n                            <RadioGroup\n                              defaultValue={state.category}\n                              id={`${id}-category`}\n                              isDisabled={isSubmitted}\n                              labelText=\"What is your feedback about?\"\n                              layout={isLargerThanMobile ? \"row\" : \"column\"}\n                              name={`${id}-category`}\n                              onChange={(selected) => setCategory(selected)}\n                            >\n                              <Radio\n                                id=\"comment\"\n                                labelText=\"Comment\"\n                                value=\"comment\"\n                              />\n                              <Radio\n                                id=\"correction\"\n                                labelText=\"Correction\"\n                                value=\"correction\"\n                              />\n                              <Radio id=\"bug\" labelText=\"Bug\" value=\"bug\" />\n                            </RadioGroup>\n                          </FormField>\n                        )}\n                        <FormField width=\"100%\">\n                          <TextInput\n                            defaultValue={state.comment}\n                            helperText={`${\n                              maxCommentCharacters - state.comment.length\n                            } characters remaining`}\n                            id={`${id}-comment`}\n                            invalidText=\"There was a problem. Please fill out this field.\"\n                            isDisabled={isSubmitted}\n                            isInvalid={finalIsInvalidComment}\n                            labelText=\"Comment (Required)\"\n                            maxLength={maxCommentCharacters}\n                            name={`${id}-comment`}\n                            onChange={(e) => setComment(e.target.value)}\n                            placeholder=\"Enter your question or feedback here\"\n                            ref={commentInputRef}\n                            type=\"textarea\"\n                          />\n                        </FormField>\n                        {showEmailField && (\n                          <FormField width=\"100%\">\n                            <TextInput\n                              id={`${id}-email`}\n                              invalidText=\"There was a problem. Please enter a valid email address.\"\n                              isDisabled={isSubmitted}\n                              isInvalid={isInvalidEmail}\n                              labelText=\"Email\"\n                              name={`${id}-email`}\n                              onChange={(e) => setEmail(e.target.value)}\n                              placeholder=\"Enter your email address here\"\n                              type=\"email\"\n                              value={state.email}\n                            />\n                          </FormField>\n                        )}\n                      </VStack>\n                      {privacyPolicyField}\n                      <FormField>\n                        <ButtonGroup buttonWidth=\"full\" id=\"submit-cancel\">\n                          <Button\n                            buttonType=\"secondary\"\n                            id=\"cancel\"\n                            isDisabled={isSubmitted}\n                            key=\"cancel\"\n                            onClick={closeAndResetForm}\n                          >\n                            Cancel\n                          </Button>\n                          <Button\n                            id=\"submit\"\n                            isDisabled={isSubmitted}\n                            key=\"submit\"\n                            type=\"submit\"\n                          >\n                            Submit\n                          </Button>\n                        </ButtonGroup>\n                      </FormField>\n                    </>\n                  )}\n\n                  {/* Confirmation Screen */}\n                  {isConfirmationView && (\n                    <>\n                      <Box\n                        className=\"feedback-body response\"\n                        key=\"confirmationWrapper\"\n                        margin=\"auto\"\n                        tabIndex={-1}\n                        textAlign=\"center\"\n                        ref={focusRef}\n                      >\n                        <Icon\n                          color={iconColor}\n                          name=\"actionCheckCircleFilled\"\n                          size=\"large\"\n                        />\n                        <Text fontWeight=\"medium\">\n                          Thank you for submitting your feedback.\n                        </Text>\n                        {showEmailField && (\n                          <Text>\n                            If you provided an email address and require a\n                            response, our service staff will reach out to you\n                            via email.\n                          </Text>\n                        )}\n                        {confirmationText ? (\n                          <Text>{confirmationText}</Text>\n                        ) : undefined}\n                      </Box>\n                      {privacyPolicyField}\n                      <FormField>\n                        <ButtonGroup buttonWidth=\"full\" id=\"submit-cancel\">\n                          <Button\n                            id=\"return-browsing\"\n                            buttonType=\"secondary\"\n                            onClick={closeAndResetForm}\n                          >\n                            Return to Browsing\n                          </Button>\n                        </ButtonGroup>\n                      </FormField>\n                    </>\n                  )}\n\n                  {/* Error Screen */}\n                  {isErrorView && (\n                    <>\n                      <Box\n                        className=\"feedback-body response\"\n                        color=\"ui.error.primary\"\n                        key=\"errorWrapper\"\n                        margin=\"auto\"\n                        tabIndex={-1}\n                        textAlign=\"center\"\n                        ref={focusRef}\n                      >\n                        <Icon\n                          color=\"ui.error.primary\"\n                          name=\"errorFilled\"\n                          size=\"large\"\n                        />\n                        <Text fontWeight=\"medium\">\n                          Oops! Something went wrong. An error occured while\n                          processing your feedback.\n                        </Text>\n                      </Box>\n                      {privacyPolicyField}\n                      <FormField>\n                        <ButtonGroup buttonWidth=\"full\" id=\"submit-cancel\">\n                          <Button\n                            id=\"return-browsing2\"\n                            key=\"return-browsing2\"\n                            buttonType=\"secondary\"\n                            onClick={closeAndResetForm}\n                          >\n                            Return to Browsing\n                          </Button>\n                          <Button\n                            id=\"try-again\"\n                            key=\"try-again\"\n                            onClick={() => setViewType(\"form\")}\n                          >\n                            Try Again\n                          </Button>\n                        </ButtonGroup>\n                      </FormField>\n                    </>\n                  )}\n                </Form>\n              </DrawerBody>\n            </DrawerContent>\n          </Drawer>\n        </Box>\n      );\n    }\n  )\n);\n\nexport function useFeedbackBox() {\n  const { isOpen, onClose, onOpen } = useDisclosure();\n  const InternalFeedbackBox = chakra((props) => {\n    return (\n      <FeedbackBox\n        isOpen={isOpen}\n        onClose={onClose}\n        onOpen={onOpen}\n        {...props}\n      />\n    );\n  });\n\n  return { isOpen, onClose, onOpen, FeedbackBox: InternalFeedbackBox };\n}\n\nexport default FeedbackBox;\n"],"names":["initialState","reducer","state","action","useFeedbackBoxReducer","dispatch","useReducer","category","comment","email","feedbackBoxViewTypeArray","FeedbackBox","chakra","forwardRef","className","confirmationText","descriptionText","hiddenFields","id","isInvalidComment","isInvalidEmail","notificationText","onSubmit","showCategoryField","showEmailField","title","view","isOpen","onOpen","onClose","rest","ref","viewType","setViewType","useStateWithDependencies","finalIsInvalidComment","setFinalIsInvalidComment","isSubmitted","setIsSubmitted","useState","setCategory","setComment","setEmail","clearValues","isLargerThanMobile","useNYPLBreakpoints","disclosure","useDisclosure","finalIsOpen","finalOnOpen","finalOnClose","focusRef","useRef","openButtonRef","commentInputRef","styles","useMultiStyleConfig","isFormView","isConfirmationView","isErrorView","confirmationTimeout","maxCommentCharacters","initMinHeight","initTemplateRows","iconColor","useColorModeValue","minHeightWithCategory","minHeightWithEmail","minHeightWithCategoryAndEmail","notificationHeightAdjustment","descriptionHeightAdjustment","drawerMinHeight","closeAndResetForm","_a","internalOnSubmit","e","submittedValues","notificationElement","jsx","Notification","descriptionColor","descriptionElement","Text","privacyPolicyField","FormField","Link","useEffect","timer","finalDrawerMinHeight","jsxs","Box","Button","Drawer","DrawerOverlay","DrawerContent","Icon","DrawerHeader","DrawerBody","Form","Fragment","VStack","RadioGroup","selected","Radio","TextInput","ButtonGroup"],"mappings":"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"}