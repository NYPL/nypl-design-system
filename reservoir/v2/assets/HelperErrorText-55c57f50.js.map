{"version":3,"file":"HelperErrorText-55c57f50.js","sources":["../../../src/components/HelperErrorText/HelperErrorText.tsx"],"sourcesContent":["import { Box, chakra, useMultiStyleConfig } from \"@chakra-ui/react\";\nimport { forwardRef } from \"react\";\n\nexport type AriaLiveValues = \"assertive\" | \"off\" | \"polite\" | undefined;\nexport type HelperErrorTextType = string | JSX.Element;\n\ninterface HelperErrorTextProps {\n  /** Aria attribute. When true, assistive technologies will read the entire\n   * DOM element. When false, only changes (additionals or removals) will be\n   * read. True by default. */\n  ariaAtomic?: boolean;\n  /** Aria attribute used to handle live updates for the helper and error text.\n   * This indicates the priority of the text and when it should be presented to\n   * users using screen readers; \"off\" indicates that the content should not be\n   * presented, \"polite\" that it will be announced at the next available time\n   * slot, and \"assertive\" that it should be announced immediately. This is set\n   * to \"polite\" by default. */\n  ariaLive?: AriaLiveValues;\n  /** Additional className to add. */\n  className?: string;\n  /** Unique ID for accessibility purposes. */\n  id?: string;\n  /** Toggles between helper and invalid styling. */\n  isInvalid?: boolean;\n  /** Offers the ability to render or not render the content passed in\n   * the `text` prop; `true` by default. */\n  isRenderedText?: boolean;\n  /** The text to display. */\n  text: HelperErrorTextType;\n}\n\n/**\n * Component that always renders a div even if the text content is not passed.\n * This pattern guarantees accessibility guidelines are met if the text content\n * is dynamically updated by the app or component that implements it.\n */\nexport const HelperErrorText = chakra(\n  forwardRef<HTMLDivElement, HelperErrorTextProps>(\n    (\n      {\n        ariaAtomic = true,\n        ariaLive = \"polite\",\n        className = \"\",\n        id,\n        isInvalid = false,\n        isRenderedText = true,\n        text,\n        ...rest\n      },\n      ref?\n    ) => {\n      const styles = useMultiStyleConfig(\"HelperErrorText\", { isInvalid });\n      const props = {\n        \"aria-atomic\": ariaAtomic,\n        \"aria-live\": ariaLive === \"off\" ? undefined : ariaLive,\n        className,\n        \"data-isinvalid\": isInvalid,\n        id,\n        ref,\n        __css: styles,\n        ...rest,\n      };\n\n      // Always render the wrapper div element with the proper aria attributes.\n      return (\n        <Box {...props}>\n          {isRenderedText ? (\n            typeof text === \"string\" ? (\n              <Box\n                dangerouslySetInnerHTML={{ __html: text }}\n                __css={styles.innerChild}\n              />\n            ) : (\n              text\n            )\n          ) : null}\n        </Box>\n      );\n    }\n  )\n);\n\nexport default HelperErrorText;\n"],"names":["HelperErrorText","chakra","forwardRef","ariaAtomic","ariaLive","className","id","isInvalid","isRenderedText","text","rest","ref","styles","useMultiStyleConfig","props","jsx","Box"],"mappings":"qLAoCO,MAAAA,EAAAC,EAAwBC,EAAA,WAC7B,CAAA,CAEI,WAAAC,EAAA,GACe,SAAAC,EAAA,SACF,UAAAC,EAAA,GACC,GAAAC,EACZ,UAAAC,EAAA,GACY,eAAAC,EAAA,GACK,KAAAC,EACjB,GAAAC,CACG,EAAAC,IAAA,CAIL,MAAAC,EAAAC,EAAA,kBAAA,CAAA,UAAAN,CAAA,CAAA,EACAO,EAAA,CAAc,cAAAX,EACG,YAAAC,IAAA,MAAA,OAAAA,EAC+B,UAAAC,EAC9C,iBAAAE,EACkB,GAAAD,EAClB,IAAAK,EACA,MAAAC,EACO,GAAAF,CACJ,EAIL,OAAAK,EAAAC,EAAA,CAAA,GAAAF,EAAA,SAAAN,EAAA,OAAAC,GAAA,SAAAM,EAIQC,EAAC,CAAA,wBAAA,CAAA,OAAAP,CAAA,EACyC,MAAAG,EAAA,UAC1B,CAAA,EAAAH,EAAA,IAAA,CAAA,CAMtB,CAEJ,CAEJ;;;;;;;;;"}