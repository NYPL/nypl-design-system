{"version":3,"file":"Image-ed70f474.js","sources":["../../../node_modules/@charlietango/use-native-lazy-loading/lib/useNativeLazyLoading.esm.js","../../../node_modules/react-intersection-observer/react-intersection-observer.m.js","../../../src/components/Image/Image.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nvar isSupported = undefined;\n\nfunction useNativeLazyLoading() {\n  var _useState = useState(isSupported),\n      supported = _useState[0],\n      setSupported = _useState[1];\n\n  useEffect(function () {\n    if (isSupported === undefined) {\n      // Cache the value so it's ready for the initial render the next time the hook is used\n      isSupported = 'loading' in HTMLImageElement.prototype;\n    }\n\n    setSupported(isSupported);\n\n    if (process.env.NODE_ENV === 'test') {\n      // If running in a test env, make sure to clean the value between runs\n      isSupported = undefined;\n    }\n  }, []);\n  return supported;\n}\n\nexport default useNativeLazyLoading;\n","import * as React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar observerMap = new Map();\nvar RootIds = new WeakMap();\nvar rootId = 0;\nvar unsupportedValue = undefined;\n/**\r\n * What should be the default behavior if the IntersectionObserver is unsupported?\r\n * Ideally the polyfill has been loaded, you can have the following happen:\r\n * - `undefined`: Throw an error\r\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\r\n * **/\n\nfunction defaultFallbackInView(inView) {\n  unsupportedValue = inView;\n}\n/**\r\n * Generate a unique ID for the root element\r\n * @param root\r\n */\n\nfunction getRootId(root) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n/**\r\n * Convert the options to a string Id, based on the values.\r\n * Ensures we can reuse the same observer when observing elements with the same options.\r\n * @param options\r\n */\n\n\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(function (key) {\n    return options[key] !== undefined;\n  }).map(function (key) {\n    return key + \"_\" + (key === 'root' ? getRootId(options.root) : options[key]);\n  }).toString();\n}\n\nfunction createObserver(options) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  var id = optionsToId(options);\n  var instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    var elements = new Map();\n    var thresholds;\n    var observer = new IntersectionObserver(function (entries) {\n      entries.forEach(function (entry) {\n        var _elements$get;\n\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        var inView = entry.isIntersecting && thresholds.some(function (threshold) {\n          return entry.intersectionRatio >= threshold;\n        }); // @ts-ignore support IntersectionObserver v2\n\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        (_elements$get = elements.get(entry.target)) == null ? void 0 : _elements$get.forEach(function (callback) {\n          callback(inView, entry);\n        });\n      });\n    }, options); // Ensure we have a valid thresholds array. If not, use the threshold from the options\n\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id: id,\n      observer: observer,\n      elements: elements\n    };\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n/**\r\n * @param element - DOM Element to observe\r\n * @param callback - Callback function to trigger when intersection status changes\r\n * @param options - Intersection Observer options\r\n * @param fallbackInView - Fallback inView value.\r\n * @return Function - Cleanup function that should be triggered to unregister the observer\r\n */\n\n\nfunction observe(element, callback, options, fallbackInView) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (fallbackInView === void 0) {\n    fallbackInView = unsupportedValue;\n  }\n\n  if (typeof window.IntersectionObserver === 'undefined' && fallbackInView !== undefined) {\n    var bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio: typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds\n    });\n    return function () {// Nothing to cleanup\n    };\n  } // An observer with the same options can be reused, so lets use this fact\n\n\n  var _createObserver = createObserver(options),\n      id = _createObserver.id,\n      observer = _createObserver.observer,\n      elements = _createObserver.elements; // Register the callback listener for this element\n\n\n  var callbacks = elements.get(element) || [];\n\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements[\"delete\"](element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap[\"delete\"](id);\n    }\n  };\n}\n\nvar _excluded = [\"children\", \"as\", \"triggerOnce\", \"threshold\", \"root\", \"rootMargin\", \"onChange\", \"skip\", \"trackVisibility\", \"delay\", \"initialInView\", \"fallbackInView\"];\n\nfunction isPlainChildren(props) {\n  return typeof props.children !== 'function';\n}\n/**\r\n ## Render props\r\n\n To use the `<InView>` component, you pass it a function. It will be called\r\n whenever the state changes, with the new value of `inView`. In addition to the\r\n `inView` prop, children also receive a `ref` that should be set on the\r\n containing DOM element. This is the element that the IntersectionObserver will\r\n monitor.\r\n\n If you need it, you can also access the\r\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\r\n on `entry`, giving you access to all the details about the current intersection\r\n state.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView>\r\n {({ inView, ref, entry }) => (\r\n      <div ref={ref}>\r\n        <h2>{`Header inside viewport ${inView}.`}</h2>\r\n      </div>\r\n    )}\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n\n ## Plain children\r\n\n You can pass any element to the `<InView />`, and it will handle creating the\r\n wrapping DOM element. Add a handler to the `onChange` method, and control the\r\n state in your own component. Any extra props you add to `<InView>` will be\r\n passed to the HTML element, allowing you set the `className`, `style`, etc.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\r\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n */\n\n\nvar InView = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(InView, _React$Component);\n\n  function InView(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.node = null;\n    _this._unobserveCb = null;\n\n    _this.handleNode = function (node) {\n      if (_this.node) {\n        // Clear the old observer, before we start observing a new element\n        _this.unobserve();\n\n        if (!node && !_this.props.triggerOnce && !_this.props.skip) {\n          // Reset the state if we get a new node, and we aren't ignoring updates\n          _this.setState({\n            inView: !!_this.props.initialInView,\n            entry: undefined\n          });\n        }\n      }\n\n      _this.node = node ? node : null;\n\n      _this.observeNode();\n    };\n\n    _this.handleChange = function (inView, entry) {\n      if (inView && _this.props.triggerOnce) {\n        // If `triggerOnce` is true, we should stop observing the element.\n        _this.unobserve();\n      }\n\n      if (!isPlainChildren(_this.props)) {\n        // Store the current State, so we can pass it to the children in the next render update\n        // There's no reason to update the state for plain children, since it's not used in the rendering.\n        _this.setState({\n          inView: inView,\n          entry: entry\n        });\n      }\n\n      if (_this.props.onChange) {\n        // If the user is actively listening for onChange, always trigger it\n        _this.props.onChange(inView, entry);\n      }\n    };\n\n    _this.state = {\n      inView: !!props.initialInView,\n      entry: undefined\n    };\n    return _this;\n  }\n\n  var _proto = InView.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n      this.unobserve();\n      this.observeNode();\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  };\n\n  _proto.observeNode = function observeNode() {\n    if (!this.node || this.props.skip) return;\n    var _this$props = this.props,\n        threshold = _this$props.threshold,\n        root = _this$props.root,\n        rootMargin = _this$props.rootMargin,\n        trackVisibility = _this$props.trackVisibility,\n        delay = _this$props.delay,\n        fallbackInView = _this$props.fallbackInView;\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold: threshold,\n      root: root,\n      rootMargin: rootMargin,\n      // @ts-ignore\n      trackVisibility: trackVisibility,\n      // @ts-ignore\n      delay: delay\n    }, fallbackInView);\n  };\n\n  _proto.unobserve = function unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n\n      this._unobserveCb = null;\n    }\n  };\n\n  _proto.render = function render() {\n    if (!isPlainChildren(this.props)) {\n      var _this$state = this.state,\n          inView = _this$state.inView,\n          entry = _this$state.entry;\n      return this.props.children({\n        inView: inView,\n        entry: entry,\n        ref: this.handleNode\n      });\n    }\n\n    var _this$props2 = this.props,\n        children = _this$props2.children,\n        as = _this$props2.as,\n        props = _objectWithoutPropertiesLoose(_this$props2, _excluded);\n\n    return React.createElement(as || 'div', _extends({\n      ref: this.handleNode\n    }, props), children);\n  };\n\n  return InView;\n}(React.Component);\n\n/**\r\n * React Hooks make it easy to monitor the `inView` state of your components. Call\r\n * the `useInView` hook with the (optional) [options](#options) you need. It will\r\n * return an array containing a `ref`, the `inView` status and the current\r\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\r\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\r\n * report the status.\r\n *\r\n * @example\r\n * ```jsx\r\n * import React from 'react';\r\n * import { useInView } from 'react-intersection-observer';\r\n *\r\n * const Component = () => {\r\n *   const { ref, inView, entry } = useInView({\r\n *       threshold: 0,\r\n *   });\r\n *\r\n *   return (\r\n *     <div ref={ref}>\r\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\r\n *     </div>\r\n *   );\r\n * };\r\n * ```\r\n */\n\nfunction useInView(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      threshold = _ref.threshold,\n      delay = _ref.delay,\n      trackVisibility = _ref.trackVisibility,\n      rootMargin = _ref.rootMargin,\n      root = _ref.root,\n      triggerOnce = _ref.triggerOnce,\n      skip = _ref.skip,\n      initialInView = _ref.initialInView,\n      fallbackInView = _ref.fallbackInView,\n      onChange = _ref.onChange;\n\n  var unobserve = React.useRef();\n  var callback = React.useRef();\n\n  var _React$useState = React.useState({\n    inView: !!initialInView\n  }),\n      state = _React$useState[0],\n      setState = _React$useState[1]; // Store the onChange callback in a `ref`, so we can access the latest instance inside the `useCallback`.\n\n\n  callback.current = onChange;\n  var setRef = React.useCallback(function (node) {\n    if (unobserve.current !== undefined) {\n      unobserve.current();\n      unobserve.current = undefined;\n    } // Skip creating the observer\n\n\n    if (skip) return;\n\n    if (node) {\n      unobserve.current = observe(node, function (inView, entry) {\n        setState({\n          inView: inView,\n          entry: entry\n        });\n        if (callback.current) callback.current(inView, entry);\n\n        if (entry.isIntersecting && triggerOnce && unobserve.current) {\n          // If it should only trigger once, unobserve the element after it's inView\n          unobserve.current();\n          unobserve.current = undefined;\n        }\n      }, {\n        root: root,\n        rootMargin: rootMargin,\n        threshold: threshold,\n        // @ts-ignore\n        trackVisibility: trackVisibility,\n        // @ts-ignore\n        delay: delay\n      }, fallbackInView);\n    }\n  }, // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [// If the threshold is an array, convert it to a string so it won't change between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  Array.isArray(threshold) ? threshold.toString() : threshold, root, rootMargin, triggerOnce, skip, trackVisibility, fallbackInView, delay]);\n  /* eslint-disable-next-line */\n\n  React.useEffect(function () {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView\n      });\n    }\n  });\n  var result = [setRef, state.inView, state.entry]; // Support object destructuring, by adding the specific values.\n\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\n\nexport { InView, defaultFallbackInView, observe, useInView };\n//# sourceMappingURL=react-intersection-observer.m.js.map\n","import useNativeLazyLoading from \"@charlietango/use-native-lazy-loading\";\nimport {\n  Box,\n  chakra,\n  useMergeRefs,\n  useMultiStyleConfig,\n} from \"@chakra-ui/react\";\nimport React, { forwardRef, ImgHTMLAttributes } from \"react\";\nimport { useInView } from \"react-intersection-observer\";\nimport HelperErrorText from \"../HelperErrorText/HelperErrorText\";\nimport { DimensionTypes } from \"../../helpers/types\";\n\nexport const imageRatiosArray = [\n  \"fourByThree\",\n  \"oneByTwo\",\n  \"original\",\n  \"sixteenByNine\",\n  \"square\",\n  \"threeByFour\",\n  \"threeByTwo\",\n  \"twoByOne\",\n] as const;\nexport const imageSizesArray = [\n  \"default\",\n  \"xxxsmall\",\n  \"xxsmall\",\n  \"xsmall\",\n  \"small\",\n  \"medium\",\n  \"large\",\n] as const;\nexport const imageTypesArray = [\"default\", \"circle\"] as const;\nexport type ImageRatios = typeof imageRatiosArray[number];\nexport type ImageSizes = typeof imageSizesArray[number];\nexport type ImageTypes = typeof imageTypesArray[number];\n\n// Used for components that have an `imageProps` prop.\nexport interface ComponentImageProps extends Partial<HTMLImageElement> {\n  /** String value used to populate the `alt` attribute of the internal `Image`\n   * component's `img` element. @NOTE if an image is used, this value must be passed. */\n  alt?: string;\n  /** Optional value to control the aspect ratio of the internal `Image` component.\n   * Defaults to `ImageRatios.Square`. */\n  aspectRatio?: ImageRatios;\n  /** Optional value to render as a caption for the internal `Image` component. */\n  caption?: string;\n  /** Optional DOM element to use instead of the DS `Image` component. */\n  component?: JSX.Element;\n  /** Optional value to render as a credit for the internal `Image` component. */\n  credit?: string;\n  /** Flag to set the internal `Image` component to `isLazy` mode. */\n  isLazy?: boolean;\n  /** Optional value to control the size of the internal `Image` component.\n   * Defaults to `ImageSizes.Default`. */\n  size?: ImageSizes;\n  /** Optional value that contains the path to an image. If omitted, the internal\n   * DS `Image` component will not render. */\n  src?: string;\n}\n\ninterface ImageWrapperProps {\n  /** Optionally pass in additional Chakra-based styles. */\n  additionalWrapperStyles?: { [key: string]: any };\n  /** ClassName you can add in addition to 'image' */\n  className?: string;\n  /** Optional value to control the aspect ratio of the card image; default\n   * value is `\"original\"` */\n  aspectRatio?: ImageRatios;\n  /** Optional value to control the size of the image */\n  size?: ImageSizes;\n  /** Sets the image size based on the width or height. Width by default. */\n  sizeBasedOn?: DimensionTypes;\n}\n\nexport interface ImageProps\n  extends ImageWrapperProps,\n    ImgHTMLAttributes<HTMLImageElement> {\n  /** Optionally pass in additional Chakra-based styles only for the figure. */\n  additionalFigureStyles?: { [key: string]: any };\n  /** Optionally pass in additional Chakra-based styles only for the image. */\n  additionalImageStyles?: { [key: string]: any };\n  /** Alternate text description of the image */\n  alt?: string;\n  /** Adding will wrap the image in a <figure> */\n  caption?: string;\n  /** Custom image component */\n  component?: JSX.Element | null;\n  /** Adding will wrap the image in a <figure> */\n  credit?: string;\n  /** Optional value for the image type */\n  imageType?: ImageTypes;\n  /** Flag to set the internal `Image` component to `isLazy` mode. */\n  isLazy?: boolean;\n  /** The src attribute is required, and contains the path to the image you want to embed. */\n  src?: string;\n}\n\nconst ImageWrapper = chakra(\n  (props: React.PropsWithChildren<ImageWrapperProps>) => {\n    const {\n      additionalWrapperStyles = {},\n      className = \"\",\n      children,\n      aspectRatio = \"original\",\n      size = \"default\",\n      sizeBasedOn = \"width\",\n      ...rest\n    } = props;\n    const styles = useMultiStyleConfig(\"CustomImageWrapper\", {\n      ratio: aspectRatio,\n      size,\n      sizeBasedOn,\n    });\n    return (\n      <Box\n        className={`the-wrap ${className}`}\n        __css={{ ...styles, ...additionalWrapperStyles }}\n        {...rest}\n      >\n        <Box className=\"the-crop\" __css={styles.crop}>\n          {children}\n        </Box>\n      </Box>\n    );\n  }\n);\n\nexport const Image = chakra(\n  forwardRef<HTMLDivElement, ImageProps>((props, ref?) => {\n    const {\n      additionalFigureStyles = {},\n      additionalImageStyles = {},\n      additionalWrapperStyles = {},\n      alt,\n      aspectRatio = \"original\",\n      caption,\n      className = \"\",\n      component,\n      credit,\n      imageType = \"default\",\n      isLazy = false,\n      size = \"default\",\n      sizeBasedOn = \"width\",\n      src,\n      ...rest\n    } = props;\n    // Check if the native browser lazy loading is supported.\n    const supportsLazyLoading = useNativeLazyLoading();\n    // If it is (mostly Chromium-based browsers), then skip creating\n    // the IntersectionObserver object.\n    const [inViewRef, inView] = useInView({\n      triggerOnce: true,\n      skip: supportsLazyLoading,\n    });\n    const useImageWrapper = aspectRatio !== \"original\";\n    const styles = useMultiStyleConfig(\"CustomImage\", {\n      variant: imageType,\n      ratio: aspectRatio,\n      size,\n      sizeBasedOn,\n    });\n    let imageComponent: JSX.Element | null = null;\n    let lazyRef = undefined;\n    let finalRefs = undefined;\n    let srcProp = isLazy ? {} : { src };\n\n    if (alt && alt.length > 300) {\n      throw new Error(\n        \"NYPL Reservoir Image: Alt text must be less than 300 characters.\"\n      );\n    }\n\n    // For lazying loading images, the initial `src` value is empty. Once\n    // the image is loaded, the `src` prop is set and passed to the image\n    // element so that it can load. This also lets it load with a gray\n    // background placeholder. We also only want to add the `inViewRef` ref\n    // when `isLazy` is true to keep track of when the image is visible.\n    if (isLazy && (inView || supportsLazyLoading)) {\n      lazyRef = inViewRef;\n      srcProp = { src };\n    }\n\n    // We want to add the `ref` from the `forwardRef` function regardless of\n    // whether the image is lazy or not. This is meant for usage with other\n    // components such as a `Tooltip`. The `inViewRef` is only added when\n    // the `isLazy` prop is true.\n    finalRefs = useMergeRefs(lazyRef, ref);\n\n    imageComponent = component ? (\n      component\n    ) : (\n      <Box\n        as=\"img\"\n        alt={alt}\n        loading={isLazy ? \"lazy\" : undefined}\n        {...srcProp}\n        __css={{ ...styles.img, ...additionalImageStyles }}\n        {...rest}\n      />\n    );\n    const finalImage = useImageWrapper ? (\n      <ImageWrapper\n        additionalWrapperStyles={additionalWrapperStyles}\n        aspectRatio={aspectRatio}\n        className={className}\n        size={size}\n        sizeBasedOn={sizeBasedOn}\n        {...(caption || credit ? {} : rest)}\n      >\n        {imageComponent}\n      </ImageWrapper>\n    ) : (\n      imageComponent\n    );\n\n    return (\n      <Box ref={finalRefs}>\n        {caption || credit ? (\n          <Box\n            as=\"figure\"\n            __css={{ ...styles.figure, ...additionalFigureStyles }}\n          >\n            {finalImage}\n            <Box as=\"figcaption\" __css={styles.figcaption}>\n              {caption && (\n                <HelperErrorText\n                  ariaLive=\"off\"\n                  ariaAtomic={false}\n                  text={caption}\n                />\n              )}\n              {credit && (\n                <HelperErrorText\n                  ariaLive=\"off\"\n                  ariaAtomic={false}\n                  text={credit}\n                />\n              )}\n            </Box>\n          </Box>\n        ) : (\n          finalImage\n        )}\n      </Box>\n    );\n  }),\n  { shouldForwardProp: () => true }\n);\n\nexport default Image;\n"],"names":["isSupported","useNativeLazyLoading","_useState","useState","supported","setSupported","useEffect","observerMap","RootIds","rootId","unsupportedValue","getRootId","root","optionsToId","options","key","createObserver","id","instance","elements","thresholds","observer","entries","entry","_elements$get","inView","threshold","callback","observe","element","fallbackInView","bounds","_createObserver","callbacks","useInView","_temp","_ref","delay","trackVisibility","rootMargin","triggerOnce","skip","initialInView","onChange","unobserve","React.useRef","_React$useState","React.useState","state","setState","setRef","React.useCallback","node","React.useEffect","result","imageRatiosArray","imageSizesArray","imageTypesArray","ImageWrapper","chakra","props","additionalWrapperStyles","className","children","aspectRatio","size","sizeBasedOn","rest","styles","useMultiStyleConfig","jsx","Box","Image","forwardRef","ref","additionalFigureStyles","additionalImageStyles","alt","caption","component","credit","imageType","isLazy","src","supportsLazyLoading","inViewRef","useImageWrapper","imageComponent","lazyRef","finalRefs","srcProp","useMergeRefs","finalImage","jsxs","HelperErrorText"],"mappings":"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","x_google_ignoreList":[0,1]}