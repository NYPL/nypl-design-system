{"version":3,"file":"Link-24c1437a.js","sources":["../../../src/utils/utils.ts","../../../src/components/Link/Link.tsx"],"sourcesContent":["import { HelperErrorTextType } from \"../components/HelperErrorText/HelperErrorText\";\nimport { AriaAttributes } from \"./interfaces\";\n// Utility functions to use throughout the codebase\n\n/**\n * range\n * Get an array of values from `start` to `stop` - 1 with an optional\n * `step` between values.\n */\nexport const range = (start: number, stop: number, step = 1): number[] => {\n  if (!start) {\n    return [];\n  }\n\n  return Array(Math.ceil((stop - start) / step))\n    .fill(start)\n    .map((x, y) => x + y * step);\n};\n\n/**\n * Given a pagination's pageCount, this will return (1) a page number,\n * derived from the current URL, and (2) a function that, when passed to\n * Pagination component, makes the URL change and refreshes the page.\n * @NOTE this is only used for Storybook documentation.\n */\nexport const getStorybookHrefProps = (pageCount: number) => {\n  const urlParams = new URLSearchParams(document.location.search);\n  const pageParam = urlParams.get(\"page\");\n\n  const getPageNumber = (page: number) => {\n    return page > 0 && page <= pageCount ? page : 1;\n  };\n  const computedCurrentPage =\n    pageParam && Number(pageParam) && getPageNumber(Number(pageParam));\n  const location = window.location;\n  // Passing this function into `Pagination` makes the URL to change\n  // and refreshes the page.\n  // NOTE: This is very flaky. It removes the `&page=[number]` from the URL\n  // and replaces it with the new page number. This is not ideal, but if it is\n  // not removed, the example `Pagination` won't work.\n  // Not a problem in real life apps (maybe?).\n  const getPageHref = (selectedPage: number) => {\n    const updatedHref = location.href.replace(/&page=.*/, \"\");\n    return `${updatedHref}&page=${selectedPage}`;\n  };\n\n  return { computedCurrentPage, getPageHref };\n};\n\ninterface GetAriaAttrsProps {\n  additionalAriaLabel?: string;\n  footnote: HelperErrorTextType;\n  id: string;\n  labelText: HelperErrorTextType;\n  name: string;\n  additionalHelperTextIds?: string;\n  showLabel: boolean;\n}\n/**\n * Get aria-* attributes for input components. This sets the `aria-label` and\n * `aria-describedby` attributes, based on the label and footnote values.\n */\nexport const getAriaAttrs = ({\n  additionalAriaLabel,\n  footnote,\n  id,\n  labelText,\n  name,\n  additionalHelperTextIds,\n  showLabel,\n}: GetAriaAttrsProps): AriaAttributes => {\n  let ariaAttributes: AriaAttributes = {};\n\n  // If both a label and an aria-label are present, screen\n  // readers will only read the aria-label so we need to\n  // provide all necessary details in the aria-label.\n  if (additionalAriaLabel) {\n    ariaAttributes[\"aria-label\"] = `${labelText}, ${additionalAriaLabel}`;\n  }\n\n  if (!showLabel) {\n    if (typeof labelText !== \"string\") {\n      console.warn(\n        `NYPL Reservoir ${name}: \\`labelText\\` must be a string when \\`showLabel\\` is false.`\n      );\n    }\n    // If showLabel is false and we have not yet added an\n    // aria-label, we need to add one with all relevant\n    // details.\n    if (!(\"aria-label\" in ariaAttributes)) {\n      ariaAttributes[\"aria-label\"] = labelText as string;\n    }\n  }\n\n  // Screen readers will read both the `aria-label` and the\n  // `aria-describedby`. The footnote should not be added to\n  // the `aria-label` because it would be read twice.\n  if (footnote) {\n    ariaAttributes[\"aria-describedby\"] = `${\n      additionalHelperTextIds ? additionalHelperTextIds + \" \" : \"\"\n    }${id}-helperText`;\n  }\n  return ariaAttributes;\n};\n\n/** Convert a hex color value to an rgb or rgba value */\nexport const hexToRGB = (hex: string, alpha: number) => {\n  const shortHex = hex.length === 4;\n  const rSlice = shortHex ? hex.slice(1, 2).repeat(2) : hex.slice(1, 3),\n    gSlice = shortHex ? hex.slice(2, 3).repeat(2) : hex.slice(3, 5),\n    bSlice = shortHex ? hex.slice(3, 4).repeat(2) : hex.slice(5, 7);\n  const r = parseInt(rSlice, 16),\n    g = parseInt(gSlice, 16),\n    b = parseInt(bSlice, 16);\n  const rgb = `${r}, ${g}, ${b}`;\n  return alpha ? `rgba(${rgb},${alpha})` : `rgb(${rgb})`;\n};\n\n/** Calculate color luminance */\nexport const colorLuminance = (r, g, b) => {\n  const a = [r, g, b].map(function (v) {\n    v /= 255;\n    return v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\n  });\n  return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;\n};\n\n/** Calculate color contrast ratio */\nexport const contrastRatio = (hex1: string, hex2: string) => {\n  const rgb1 = hexToRGB(hex1, null);\n  const rgb2 = hexToRGB(hex2, null);\n  const colorLuminance1 = colorLuminance(rgb1[0], rgb1[1], rgb1[2]);\n  const colorLuminance2 = colorLuminance(rgb2[0], rgb2[1], rgb2[2]);\n  const ratio =\n    colorLuminance1 > colorLuminance2\n      ? (colorLuminance2 + 0.05) / (colorLuminance1 + 0.05)\n      : (colorLuminance1 + 0.05) / (colorLuminance2 + 0.05);\n\n  return (ratio * 10).toFixed(2);\n};\n\n/** This method will truncate text by centain length. Default length is 60. */\nexport const truncateText = (text: string, truncateTextLength: number = 60) => {\n  const updatedText = text.substring(0, truncateTextLength - 1);\n  return `${updatedText.substring(0, updatedText.lastIndexOf(\" \"))}...`;\n};\n\n/** Prepare a string for use in an ID or class attribute */\nexport const sanitizeStringForAttribute = (str: string) => {\n  const sanitizedStr = str.replace(/[^a-z0-9]/gi, \"-\").toLowerCase();\n  return sanitizedStr;\n};\n","import { Box, chakra, useMultiStyleConfig } from \"@chakra-ui/react\";\nimport React, { forwardRef } from \"react\";\n\nimport Icon from \"../Icons/Icon\";\nimport { sanitizeStringForAttribute } from \"../../utils/utils\";\n\nexport const linkTypesArray = [\n  \"action\",\n  \"backwards\",\n  // The \"button\" type is deprecated as of 1.2.x.\n  \"button\",\n  // Instead, use the following \"buttonX\" types.\n  \"buttonPrimary\",\n  \"buttonSecondary\",\n  \"buttonPill\",\n  \"buttonCallout\",\n  \"buttonNoBrand\",\n  \"buttonDisabled\",\n  \"default\",\n  \"external\",\n  \"forwards\",\n  \"standalone\",\n] as const;\nexport type LinkTypes = typeof linkTypesArray[number];\n\nexport interface LinkProps {\n  /** Any child node passed to the component. */\n  children: React.ReactNode;\n  /** Additional class name to render in the `Link` component. */\n  className?: string;\n  /** Used to include or remove visited state styles. Default is true. */\n  hasVisitedState?: boolean;\n  /** The `href` attribute for the anchor element. */\n  href?: string;\n  /** ID used for accessibility purposes. */\n  id?: string;\n  /** Used to explicitly set the underline style for a text link. If true, link\n   * text will always be underlined; if false, link text will only show\n   * underline in hover state. */\n  isUnderlined?: boolean;\n  onClick?: (\n    event: React.MouseEvent<HTMLDivElement | HTMLAnchorElement, MouseEvent>\n  ) => void;\n  rel?: string;\n  /** Visibly hidden text that will only be read by screenreaders. */\n  screenreaderOnlyText?: string;\n  /** Prop that sets the HTML attribute to target where the link should go. */\n  target?: \"_blank\" | \"_parent\" | \"_self\" | \"_top\";\n  /** Controls the link visuals: action, button, backwards, forwards,\n   * standalone, or default. */\n  type?: LinkTypes;\n}\n\n/**\n * Renders the `Link` children components with a direction arrow icon based\n * on the `\"backwards\"` or `\"forwards\"` `linkType` value.\n */\nfunction getWithDirectionIcon(\n  children: JSX.Element,\n  type: LinkTypes,\n  linkId: string\n) {\n  let iconRotation;\n  let iconAlign;\n  let icon = null;\n\n  // An icon needs a position in order for it to be created and\n  // rendered in the link.\n  if (type === \"backwards\") {\n    iconRotation = \"rotate90\";\n    iconAlign = \"left\";\n  } else if (type === \"forwards\") {\n    iconRotation = \"rotate270\";\n    iconAlign = \"right\";\n  }\n\n  const iconId = `${linkId}-direction-icon`;\n\n  icon = (\n    <Icon\n      align={iconAlign}\n      iconRotation={iconRotation}\n      id={iconId}\n      name=\"arrow\"\n      size=\"medium\"\n    />\n  );\n\n  return (\n    <>\n      {type === \"backwards\" && icon}\n      {children}\n      {type === \"forwards\" && icon}\n    </>\n  );\n}\n\nfunction getExternalExtraElements(\n  children: JSX.Element,\n  linkId: string,\n  styles: object\n) {\n  const iconId = `${linkId}-external-icon`;\n  const extraElements = (\n    <>\n      <Box as=\"span\" __css={styles}>\n        This link opens in a new window\n      </Box>\n      <Icon\n        align={\"right\"}\n        id={iconId}\n        name=\"actionLaunch\"\n        size=\"medium\"\n        title=\"External link\"\n      />\n    </>\n  );\n\n  return (\n    <>\n      {children}\n      {extraElements}\n    </>\n  );\n}\n\nfunction getStandaloneIcon(children: JSX.Element, linkId: string) {\n  const iconId = `${linkId}-standalone-icon`;\n  const extraElements = (\n    <Icon\n      align={\"right\"}\n      iconRotation=\"rotate270\"\n      id={iconId}\n      name=\"arrow\"\n      size=\"xsmall\"\n      title=\"Navigation arrow\"\n    />\n  );\n\n  return (\n    <>\n      {children}\n      {extraElements}\n    </>\n  );\n}\n\n/**\n * A component that uses an `href` prop or a child anchor element, to create\n * an anchor element with added styling and conventions.\n */\nexport const Link = chakra(\n  forwardRef<HTMLDivElement & HTMLAnchorElement, LinkProps>((props, ref?) => {\n    const {\n      children,\n      className,\n      hasVisitedState = true,\n      href,\n      id,\n      isUnderlined = true,\n      onClick,\n      screenreaderOnlyText,\n      target,\n      type = \"default\",\n      ...rest\n    } = props;\n\n    // Set initial underline style for certain variants\n    const finalIsUnderlined =\n      type === \"backwards\" || type === \"forwards\" || type === \"standalone\"\n        ? false\n        : isUnderlined\n        ? true\n        : false;\n\n    // Merge the necessary props alongside any extra props for the\n    // anchor element.\n    const linkProps = {\n      id,\n      href,\n      ...rest,\n    };\n    // The \"default\" type.\n    let variant = \"link\";\n\n    if (typeof children === \"string\" && !href) {\n      throw new Error(\n        \"NYPL Reservoir Link: The `Link` component needs the `href` prop if its child element is a string.\"\n      );\n    }\n\n    if (\n      type === \"action\" ||\n      type === \"backwards\" ||\n      type === \"external\" ||\n      type === \"forwards\" ||\n      type === \"standalone\"\n    ) {\n      variant = \"moreLink\";\n    } else if (type.includes(\"button\")) {\n      /** This deprecation warning is temporarily being removed, but it will be\n       * reinstated once teams are able to update their `Link`s appropriately. */\n      // if (type === \"button\") {\n      //   console.warn(\n      //     `NYPL Reservoir Link: The \"button\" type is deprecated. Instead, use either \"buttonPrimary\", \"buttonSecondary\", \"buttonPill\", \"buttonCallout\", \"buttonNoBrand\", or \"buttonDisabled\".`\n      //   );\n      // }\n      variant = type;\n    }\n    const styles = useMultiStyleConfig(\"Link\", {\n      variant,\n      finalIsUnderlined,\n      hasVisitedState,\n    });\n    const rel = type === \"external\" ? \"nofollow noopener noreferrer\" : null;\n    const internalTarget =\n      type === \"external\" ? \"_blank\" : target ? target : null;\n    const sanitizedId = id\n      ? id\n      : sanitizeStringForAttribute(`link-${children as string}`);\n    // Render with specific direction arrows if the type is \"forwards\" or\n    // \"backwards\". Or render with the launch icon if the type is \"external\". Or\n    // render with a smaller right-arrow if the type is \"standalone.\" Otherwise,\n    // do not add an icon.\n    const newChildren =\n      ((type === \"forwards\" || type === \"backwards\") &&\n        getWithDirectionIcon(children as JSX.Element, type, sanitizedId)) ||\n      (type === \"external\" &&\n        getExternalExtraElements(\n          children as JSX.Element,\n          sanitizedId,\n          styles.screenreaderOnly\n        )) ||\n      (type === \"standalone\" &&\n        getStandaloneIcon(children as JSX.Element, sanitizedId)) ||\n      children;\n\n    if (!href) {\n      // React Types error makes this fail:\n      // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/32832\n      // let children = React.Children.only(children);\n      if (React.Children.count(children) > 1) {\n        throw new Error(\n          \"NYPL Reservoir Link: Please pass only one child into the `Link` component.\"\n        );\n      }\n      const childrenToClone: any = children[0] ? children[0] : children;\n      const childProps = childrenToClone.props;\n      return (\n        <>\n          <Box as=\"span\" __css={styles} {...rest}>\n            {React.cloneElement(\n              childrenToClone,\n              {\n                className,\n                ...linkProps,\n                ...childProps,\n                ref,\n                rel,\n                target: internalTarget,\n              },\n              [childrenToClone.props.children]\n            )}\n          </Box>\n          {screenreaderOnlyText && (\n            <Box as=\"span\" __css={styles.screenreaderOnly}>\n              {screenreaderOnlyText}\n            </Box>\n          )}\n        </>\n      );\n    } else {\n      return (\n        <Box\n          as=\"a\"\n          className={className}\n          ref={ref}\n          rel={rel}\n          onClick={onClick}\n          target={internalTarget}\n          {...linkProps}\n          __css={styles}\n        >\n          {newChildren}\n          {screenreaderOnlyText && (\n            <Box as=\"span\" __css={styles.screenreaderOnly}>\n              {screenreaderOnlyText}\n            </Box>\n          )}\n        </Box>\n      );\n    }\n  })\n);\n\nexport default Link;\n"],"names":["range","start","stop","step","x","y","getStorybookHrefProps","pageCount","pageParam","getPageNumber","page","computedCurrentPage","location","selectedPage","getAriaAttrs","additionalAriaLabel","footnote","id","labelText","name","additionalHelperTextIds","showLabel","ariaAttributes","hexToRGB","hex","alpha","shortHex","rSlice","gSlice","bSlice","r","g","b","rgb","truncateText","text","truncateTextLength","updatedText","sanitizeStringForAttribute","str","linkTypesArray","getWithDirectionIcon","children","type","linkId","iconRotation","iconAlign","icon","iconId","jsx","Icon","jsxs","Fragment","getExternalExtraElements","styles","Box","getStandaloneIcon","Link","chakra","forwardRef","props","ref","className","hasVisitedState","href","isUnderlined","onClick","screenreaderOnlyText","target","rest","finalIsUnderlined","linkProps","variant","useMultiStyleConfig","rel","internalTarget","sanitizedId","newChildren","React","childrenToClone","childProps"],"mappings":"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"}