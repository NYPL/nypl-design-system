{"version":3,"file":"SearchBar-83234cf6.js","sources":["../../../src/components/SearchBar/SearchBar.tsx"],"sourcesContent":["import { Box, chakra, useMultiStyleConfig } from \"@chakra-ui/react\";\nimport React, { forwardRef } from \"react\";\n\nimport Button from \"../Button/Button\";\nimport ComponentWrapper from \"../ComponentWrapper/ComponentWrapper\";\nimport { HelperErrorTextType } from \"../HelperErrorText/HelperErrorText\";\nimport Icon from \"../Icons/Icon\";\nimport Select, { SelectProps as InitialSelectProps } from \"../Select/Select\";\nimport TextInput, {\n  InputProps as InitialInputProps,\n} from \"../TextInput/TextInput\";\n\ninterface SelectOptionsProps {\n  text: string;\n  value: string;\n}\n\n// Internal types that are used only for `SearchBar` props. View the\n// respective `Select` and `TextInput` components to get full details\n// of each prop type value.\n\n// From the `Select` component, we only need a certain set of optional props,\n// except for `optionsData`.\nexport type SelectProps = Partial<\n  Pick<InitialSelectProps, \"id\" | \"labelText\" | \"name\" | \"onChange\" | \"value\">\n> & {\n  optionsData: SelectOptionsProps[];\n};\n// From the `TextInput` component, we only need a certain set of optional props.\nexport type TextInputProps = Pick<InitialInputProps, \"labelText\" | \"name\"> &\n  Partial<\n    Pick<\n      InitialInputProps,\n      | \"defaultValue\"\n      | \"id\"\n      | \"isClearable\"\n      | \"isClearableCallback\"\n      | \"max\"\n      | \"maxLength\"\n      | \"min\"\n      | \"onChange\"\n      | \"pattern\"\n      | \"placeholder\"\n      | \"value\"\n    >\n  >;\n\nexport interface SearchBarProps {\n  /** Adds 'action' property to the `form` element. */\n  action?: string;\n  /** The onClick callback function for the `Button` component. */\n  buttonOnClick?: (event: React.MouseEvent | React.KeyboardEvent) => void;\n  /** A class name for the `form` element. */\n  className?: string;\n  /** Optional string for the SearchBar's description above the component. */\n  descriptionText?: string;\n  /** Optional string value used to set the text for a `Heading` component, or\n   * a DS Heading component that can be passed in.\n   */\n  headingText?: string | JSX.Element;\n  /** The text to display below the form in a `HelperErrorText` component. */\n  helperText?: HelperErrorTextType;\n  /** ID that other components can cross reference for accessibility purposes */\n  id: string;\n  /** Optional string to populate the `HelperErrorText` for the error state\n   * when `isInvalid` is true. */\n  invalidText?: HelperErrorTextType;\n  /** Sets children form components in the disabled state. */\n  isDisabled?: boolean;\n  /** Sets children form components in the error state. */\n  isInvalid?: boolean;\n  /** Sets children form components in the required state. */\n  isRequired?: boolean;\n  /** Populates the `aria-label` attribute on the form element. */\n  labelText: string;\n  /** Adds 'method' property to the `form` element. */\n  method?: string;\n  /** Sets the `Button` variant type to `noBrand` when true;\n   * false by default which sets the type to `primary`. */\n  noBrandButtonType?: boolean;\n  /** Handler function when the form is submitted. */\n  onSubmit: (event: React.FormEvent) => void;\n  /** Required props to render a `Select` element. */\n  selectProps?: SelectProps | undefined;\n  /** Custom input element to render instead of a `TextInput` element. */\n  textInputElement?: JSX.Element;\n  /** Required props to render a `TextInput` element. */\n  textInputProps?: TextInputProps | undefined;\n}\n\n/**\n * Renders a wrapper `form` element to be used with `Select` (optional),\n * `Input`, and `Button` components together.\n */\nexport const SearchBar = chakra(\n  forwardRef<HTMLDivElement, SearchBarProps>((props, ref?) => {\n    const {\n      action,\n      buttonOnClick,\n      className,\n      descriptionText,\n      headingText,\n      helperText,\n      id,\n      invalidText,\n      isDisabled = false,\n      isInvalid = false,\n      isRequired = false,\n      labelText,\n      method,\n      noBrandButtonType = false,\n      onSubmit,\n      selectProps,\n      textInputElement,\n      textInputProps,\n      ...rest\n    } = props;\n    const styles = useMultiStyleConfig(\"SearchBar\", {});\n    const stateProps = {\n      helperText: \"\",\n      isDisabled,\n      isInvalid,\n      isRequired,\n      showHelperInvalidText: false,\n      showLabel: false,\n    };\n    const footnote = isInvalid ? invalidText : helperText;\n    const finalAriaLabel = footnote ? `${labelText} - ${footnote}` : labelText;\n    const inputPlaceholder = textInputProps?.placeholder || \"Search terms\";\n    const textInputPlaceholder = `${inputPlaceholder} ${\n      isRequired ? \"(Required)\" : \"\"\n    }`;\n    const buttonType = noBrandButtonType ? \"noBrand\" : \"primary\";\n    const searchBarButtonStyles = {\n      borderLeftRadius: \"none\",\n      borderRightRadius: { base: \"none\", md: \"sm\" },\n      lineHeight: \"1.70\",\n      marginBottom: \"auto\",\n    };\n\n    if (!id) {\n      console.warn(\n        \"NYPL Reservoir SearchBar: This component's required `id` prop was not passed.\"\n      );\n    }\n    // Render the `Select` component.\n    const selectElem = selectProps && (\n      <Select\n        id={selectProps?.id || `searchbar-select-${id}`}\n        labelText={selectProps?.labelText}\n        name={selectProps?.name}\n        onChange={selectProps?.onChange}\n        selectType=\"searchbar\"\n        value={selectProps?.value}\n        __css={styles.select}\n        {...stateProps}\n      >\n        {selectProps?.optionsData.map((option) => (\n          <option key={option.value} value={option.value}>\n            {option.text}\n          </option>\n        ))}\n      </Select>\n    );\n    // Render the `TextInput` component.\n    const textInputNative = textInputProps && (\n      <TextInput\n        defaultValue={textInputProps?.defaultValue}\n        id={textInputProps?.id || `searchbar-textinput-${id}`}\n        isClearable={textInputProps?.isClearable}\n        isClearableCallback={textInputProps?.isClearableCallback}\n        labelText={textInputProps?.labelText}\n        name={textInputProps?.name}\n        max={textInputProps?.max}\n        maxLength={textInputProps?.maxLength}\n        min={textInputProps?.min}\n        onChange={textInputProps?.onChange}\n        pattern={textInputProps?.pattern}\n        placeholder={textInputPlaceholder}\n        textInputType={selectElem ? \"searchBarSelect\" : \"searchBar\"}\n        type=\"text\"\n        value={textInputProps?.value}\n        {...stateProps}\n      />\n    );\n    // Render the `Button` component.\n    const buttonElem = (\n      <Button\n        buttonType={buttonType}\n        id={`searchbar-button-${id}`}\n        isDisabled={isDisabled}\n        onClick={buttonOnClick}\n        type=\"submit\"\n        sx={searchBarButtonStyles}\n      >\n        <Icon\n          align=\"left\"\n          id={`searchbar-icon-${id}`}\n          name=\"search\"\n          size=\"small\"\n        />\n        Search\n      </Button>\n    );\n    // If a custom input element was passed, use that element\n    // instead of the DS `TextInput` component.\n    const textInputElem = textInputElement || textInputNative;\n\n    return (\n      <ComponentWrapper\n        descriptionText={descriptionText}\n        headingText={headingText}\n        helperText={helperText}\n        id={id}\n        invalidText={invalidText}\n        isInvalid={isInvalid}\n        ref={ref}\n        {...rest}\n      >\n        <Box\n          as=\"form\"\n          id={`searchbar-form-${id}`}\n          className={className}\n          role=\"search\"\n          aria-label={finalAriaLabel}\n          onSubmit={onSubmit}\n          method={method}\n          action={action}\n          __css={styles}\n        >\n          {selectElem}\n          {textInputElem}\n          {buttonElem}\n        </Box>\n      </ComponentWrapper>\n    );\n  })\n);\n\nexport default SearchBar;\n"],"names":["SearchBar","chakra","forwardRef","props","ref","action","buttonOnClick","className","descriptionText","headingText","helperText","id","invalidText","isDisabled","isInvalid","isRequired","labelText","method","noBrandButtonType","onSubmit","selectProps","textInputElement","textInputProps","rest","styles","useMultiStyleConfig","stateProps","footnote","finalAriaLabel","textInputPlaceholder","buttonType","searchBarButtonStyles","selectElem","jsx","Select","option","textInputNative","TextInput","buttonElem","jsxs","Button","Icon","textInputElem","ComponentWrapper","Box"],"mappings":"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"}