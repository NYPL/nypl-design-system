import{j as t,F as b,a as u}from"./emotion-react-jsx-runtime.browser.esm-49aea89b.js";import{R as N,r as D}from"./index-0cbcd92a.js";import{I as f}from"./Icon-4eeffe51.js";import{T as C}from"./Tooltip-88733f7d.js";import{a as T,d as v,B as q,u as F,b as w,F as V}from"./chakra-ui-layout.esm-e0dbb94e.js";import{B as x}from"./Button-948e9be8.js";const h=({label:e,children:s})=>{const i=typeof e=="string"?e:e.props.children;return i.length>20&&typeof i=="string"?t(C,{content:i,children:s}):t(b,{children:s})};try{h.displayName="TooltipWrapper",h.__docgenInfo={description:"This helper component wrapper renders a DS `Tooltip` component if the text is\nlong or a React fragment. This assumes that the `label` prop is a rather\nsimple single root JSX element, such as `<Link ...>....</Link>`.",displayName:"TooltipWrapper",props:{}}}catch{}const g=T(e=>{const{id:s,tagSetData:a=[]}=e,i=v("TagSetExplore");return t(b,{children:a.map((r,n)=>(typeof r.label=="string"&&console.warn("NYPL Reservoir TagSet: Explore tags require all `label` props to be React components."),t(h,{label:r.label,children:u(q,{"data-testid":"explore-tags",id:`ts-explore-${s}-${n}`,__css:i,children:[r.iconName?t(f,{align:"left","data-testid":"ts-icon",name:r.iconName,size:"small"}):null,t("span",{children:r.label})]})},n)))})});try{g.displayName="TagSetExplore",g.__docgenInfo={description:'The "explore" `TagSet` variant will always display the tags passed as data.\nThe `label` property in the `tagSetData` prop should be set to a link-type\nJSX component for linking to specific content.',displayName:"TagSetExplore",props:{id:{defaultValue:null,description:"ID that other components can cross reference for accessibility purposes.",name:"id",required:!1,type:{name:"string"}},type:{defaultValue:null,description:'The `TagSet` variant to render; "filter" by default.',name:"type",required:!0,type:{name:'"explore"'}},onClick:{defaultValue:null,description:'The function to perform when a tag is clicked when `isDismissible` is\ntrue.  This prop is not used in the "explore" variant.',name:"onClick",required:!1,type:{name:"never"}},isDismissible:{defaultValue:null,description:'Whether the tags should be removable. This prop is not used in the "explore" variant.',name:"isDismissible",required:!1,type:{name:"never"}},tagSetData:{defaultValue:null,description:"The array of data to display as tags.",name:"tagSetData",required:!0,type:{name:"TagSetExploreDataProps[]"}}}}}catch{}const y=T(e=>{const{id:s,isDismissible:a=!1,onClick:i,tagSetData:r=[]}=e,[n,p]=N.useState(r),o=F("TagSetFilter",{isDismissible:a}),d=l=>{i&&i(l)},m=w("ui.gray.x-dark","dark.ui.typography.body"),k=w("ui.black","dark.ui.typography.body");return D.useEffect(()=>{p(r)},[r,p]),u(b,{children:[n.map((l,_)=>(typeof l.label!="string"&&console.warn("NYPL Reservoir TagSet: Filter tags require all `label` props to be strings."),a&&l.iconName&&console.warn("NYPL Reservoir TagSet: Filter tags will not render icons when `isDismissible` is set to true."),t(h,{label:l.label,children:u(x,{"aria-label":a?`${l.label}, click to remove filter`:void 0,"data-testid":"filter-tags",id:`ts-filter-${s}-${_}`,onClick:a?()=>d(l.label):void 0,sx:o,children:[!a&&l.iconName?t(f,{align:"left",color:k,"data-testid":"ts-icon",name:l.iconName,size:"small"}):null,t("span",{children:l.label}),a?t(f,{"data-testid":"filter-close-icon",align:"right",name:"close",size:"small",color:m,width:"12px"}):null]})},_))),n.length>1&&a?t(x,{buttonType:"link","data-testid":"filter-clear-all",id:`ts-filter-clear-all-${s}`,onClick:()=>d("clearFilters"),__css:o.clearAll,children:"Clear Filters"}):null]})});try{y.displayName="TagSetFilter",y.__docgenInfo={description:'The "filter" `TagSet` variant will display tags that can be removed when\n`isDismissible` is true and they are clicked.',displayName:"TagSetFilter",props:{id:{defaultValue:null,description:"ID that other components can cross reference for accessibility purposes.",name:"id",required:!1,type:{name:"string"}},type:{defaultValue:null,description:'The `TagSet` variant to render; "filter" by default.',name:"type",required:!0,type:{name:'"filter"'}},onClick:{defaultValue:null,description:"The function to perform when a tag is clicked when `isDismissible` is true.",name:"onClick",required:!1,type:{name:"(tagLabel: string) => void"}},isDismissible:{defaultValue:null,description:"Whether the tags should be removable.",name:"isDismissible",required:!1,type:{name:"boolean"}},tagSetData:{defaultValue:null,description:"The array of data to display as tags.",name:"tagSetData",required:!0,type:{name:"TagSetFilterDataProps[]"}}}}}catch{}function c(e){return e==="filter"}const S=T(D.forwardRef((e,s)=>{const{className:a,id:i,isDismissible:r=!1,onClick:n,tagSetData:p=[],type:o="filter",...d}=e,m=v("TagSet",{});return c(o)||(r&&console.warn("NYPL Reservoir TagSet: The `isDismissible` prop will be ignored when the `type` prop is set to 'explore'."),n&&console.warn("NYPL Reservoir TagSet: The `onClick` prop will be ignored when the `type` prop is set to 'explore'.")),u(V,{className:a,id:i,ref:s,__css:m,...d,children:[!c(o)&&t(g,{id:i,tagSetData:p,type:o}),c(o)&&t(y,{id:i,isDismissible:r,onClick:n,tagSetData:p,type:o})]})}));try{c.displayName="isFilterType",c.__docgenInfo={description:"",displayName:"isFilterType",props:{}}}catch{}try{S.displayName="TagSet",S.__docgenInfo={description:`The \`TagSet\` component renders a group of individual tags which have two
variants: "explore" and "filter". The "explore" tags are meant to be used for
exploratory linkable elements, whereas the "filter" tags are used to display
the filter values that were selected through another UI. Only "filter" tags
can be dismissible.

The width of a single tag will never be greater than 200px. If necessary, a
tag’s label text will be truncated to keep a tag’s width at or below 200px.
The full label text will be automatically revealed when the tag is hovered
with a DS \`Tooltip\` component.`,displayName:"TagSet",props:{className:{defaultValue:null,description:"Additional class for the component.",name:"className",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"ID that other components can cross reference for accessibility purposes.",name:"id",required:!1,type:{name:"string"}},type:{defaultValue:null,description:'The `TagSet` variant to render; "filter" by default.',name:"type",required:!0,type:{name:'"filter" | "explore"'}},onClick:{defaultValue:null,description:'The function to perform when a tag is clicked when `isDismissible` is true.\nThe function to perform when a tag is clicked when `isDismissible` is\ntrue.  This prop is not used in the "explore" variant.',name:"onClick",required:!1,type:{name:"(tagLabel: string) => void"}},isDismissible:{defaultValue:null,description:`Whether the tags should be removable.
Whether the tags should be removable. This prop is not used in the "explore" variant.`,name:"isDismissible",required:!1,type:{name:"boolean"}},tagSetData:{defaultValue:null,description:"The array of data to display as tags.",name:"tagSetData",required:!0,type:{name:"TagSetFilterDataProps[] | TagSetExploreDataProps[]"}}}}}catch{}export{S as T};
//# sourceMappingURL=TagSet-a9b99ddb.js.map
