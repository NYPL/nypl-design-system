{"version":3,"file":"Toggle-3062d19c.js","sources":["../../../node_modules/@chakra-ui/switch/dist/chakra-ui-switch.esm.js","../../../src/components/Toggle/Toggle.tsx"],"sourcesContent":["import { useCheckbox } from '@chakra-ui/checkbox';\nimport { forwardRef, useMultiStyleConfig, omitThemingProps, chakra } from '@chakra-ui/system';\nimport { cx, dataAttr, __DEV__ } from '@chakra-ui/utils';\nimport * as React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar _excluded = [\"spacing\", \"children\"];\nvar Switch = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useMultiStyleConfig(\"Switch\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      _omitThemingProps$spa = _omitThemingProps.spacing,\n      spacing = _omitThemingProps$spa === void 0 ? \"0.5rem\" : _omitThemingProps$spa,\n      children = _omitThemingProps.children,\n      ownProps = _objectWithoutPropertiesLoose(_omitThemingProps, _excluded);\n\n  var _useCheckbox = useCheckbox(ownProps),\n      state = _useCheckbox.state,\n      getInputProps = _useCheckbox.getInputProps,\n      getCheckboxProps = _useCheckbox.getCheckboxProps,\n      getRootProps = _useCheckbox.getRootProps,\n      getLabelProps = _useCheckbox.getLabelProps;\n\n  var containerStyles = React.useMemo(function () {\n    return _extends({\n      display: \"inline-block\",\n      position: \"relative\",\n      verticalAlign: \"middle\",\n      lineHeight: 0\n    }, styles.container);\n  }, [styles.container]);\n  var trackStyles = React.useMemo(function () {\n    return _extends({\n      display: \"inline-flex\",\n      flexShrink: 0,\n      justifyContent: \"flex-start\",\n      boxSizing: \"content-box\",\n      cursor: \"pointer\"\n    }, styles.track);\n  }, [styles.track]);\n  var labelStyles = React.useMemo(function () {\n    return _extends({\n      userSelect: \"none\",\n      marginStart: spacing\n    }, styles.label);\n  }, [spacing, styles.label]);\n  return /*#__PURE__*/React.createElement(chakra.label, _extends({}, getRootProps(), {\n    className: cx(\"chakra-switch\", props.className),\n    __css: containerStyles\n  }), /*#__PURE__*/React.createElement(\"input\", _extends({\n    className: \"chakra-switch__input\"\n  }, getInputProps({}, ref))), /*#__PURE__*/React.createElement(chakra.span, _extends({}, getCheckboxProps(), {\n    className: \"chakra-switch__track\",\n    __css: trackStyles\n  }), /*#__PURE__*/React.createElement(chakra.span, {\n    __css: styles.thumb,\n    className: \"chakra-switch__thumb\",\n    \"data-checked\": dataAttr(state.isChecked),\n    \"data-hover\": dataAttr(state.isHovered)\n  })), children && /*#__PURE__*/React.createElement(chakra.span, _extends({\n    className: \"chakra-switch__label\"\n  }, getLabelProps(), {\n    __css: labelStyles\n  }), children));\n});\n\nif (__DEV__) {\n  Switch.displayName = \"Switch\";\n}\n\nexport { Switch };\n","import {\n  Box,\n  chakra,\n  Switch,\n  useMultiStyleConfig,\n  useStyleConfig,\n} from \"@chakra-ui/react\";\nimport React, { forwardRef } from \"react\";\n\nimport ComponentWrapper from \"../ComponentWrapper/ComponentWrapper\";\nimport { HelperErrorTextType } from \"../HelperErrorText/HelperErrorText\";\nimport { getAriaAttrs } from \"../../utils/utils\";\n\nexport const toggleSizesArray = [\"default\", \"small\"] as const;\nexport type ToggleSizes = typeof toggleSizesArray[number];\n\nexport interface ToggleProps {\n  /** Used for uncontrolled scenarios.  Sets the state of the Toggle when the page first loads.\n   *   If true, the toggle will be initially set to the \"on\" position. */\n  defaultChecked?: boolean;\n  /** Optional string to populate the HelperErrorText for standard state */\n  helperText?: HelperErrorTextType;\n  /** ID that other components can cross reference for accessibility purposes */\n  id: string;\n  /** Optional string to populate the HelperErrorText for the error state\n   * when `isInvalid` is true. */\n  invalidText?: HelperErrorTextType;\n  /** When using the Toggle as a \"controlled\" form element, you can specify\n   * the Toggle's checked state using this prop.\n   * Learn more about controlled and uncontrolled form fields:\n   * https://goshakkk.name/controlled-vs-uncontrolled-inputs-react/ */\n  isChecked?: boolean;\n  /** Adds the 'disabled' and `aria-disabled` attributes to the input when true.\n   * This also makes the text italic and color scheme gray. */\n  isDisabled?: boolean;\n  /** Adds the 'aria-invalid' attribute to the input when true. */\n  isInvalid?: boolean;\n  /** Adds the 'required' attribute to the input when true. */\n  isRequired?: boolean;\n  /** The toggle's label. This will serve as the text content for the `<label>` element */\n  labelText: string;\n  /** The name prop indicates the `Toggle`'s form element name. If none is\n   * specified, 'default' will be used. */\n  name?: string;\n  /** The action to perform on the `<input>`'s onChange function  */\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  /** The size of the Toggle. Defaults to \"large\". */\n  size?: ToggleSizes;\n}\n\nexport const onChangeDefault = () => {\n  return;\n};\n\n/**\n * Component that renders Chakra's `Switch` component along with NYPL defaults.\n */\nexport const Toggle = chakra(\n  forwardRef<HTMLInputElement, ToggleProps>((props, ref?) => {\n    const {\n      defaultChecked = false,\n      helperText,\n      id,\n      invalidText,\n      isChecked,\n      isDisabled = false,\n      isInvalid = false,\n      isRequired = false,\n      labelText,\n      name,\n      onChange = onChangeDefault,\n      size = \"default\",\n      ...rest\n    } = props;\n    const styles = useMultiStyleConfig(\"Toggle\", { isDisabled, size });\n    const switchStyles = useStyleConfig(\"Switch\", { size });\n    const footnote = isInvalid ? invalidText : helperText;\n    const ariaAttributes = getAriaAttrs({\n      footnote,\n      id,\n      labelText,\n      name: \"Toggle\",\n      showLabel: true,\n    });\n\n    if (!id) {\n      console.warn(\n        \"NYPL Reservoir Toggle: This component's required `id` prop was not passed.\"\n      );\n    }\n\n    return (\n      <ComponentWrapper\n        helperText={helperText}\n        helperTextStyles={styles.helperErrorText}\n        id={id}\n        invalidText={invalidText}\n        isInvalid={isInvalid}\n        {...rest}\n      >\n        <Box __css={styles}>\n          <Switch\n            id={id}\n            isDisabled={isDisabled}\n            isInvalid={isInvalid}\n            isRequired={isRequired}\n            name={name || \"default\"}\n            ref={ref}\n            size={size === \"default\" ? \"lg\" : \"sm\"}\n            lineHeight=\"1.5\"\n            {...(isChecked !== undefined\n              ? {\n                  isChecked,\n                  onChange,\n                }\n              : {\n                  defaultChecked,\n                })}\n            {...ariaAttributes}\n            __css={switchStyles}\n          >\n            {labelText}\n          </Switch>\n        </Box>\n      </ComponentWrapper>\n    );\n  })\n);\n\nexport default Toggle;\n"],"names":["_extends","target","i","source","key","_objectWithoutPropertiesLoose","excluded","sourceKeys","_excluded","Switch","forwardRef","props","ref","styles","useMultiStyleConfig","_omitThemingProps","omitThemingProps","_omitThemingProps$spa","spacing","children","ownProps","_useCheckbox","useCheckbox","state","getInputProps","getCheckboxProps","getRootProps","getLabelProps","containerStyles","React.useMemo","trackStyles","labelStyles","React.createElement","chakra","cx","dataAttr","toggleSizesArray","onChangeDefault","Toggle","defaultChecked","helperText","id","invalidText","isChecked","isDisabled","isInvalid","isRequired","labelText","name","onChange","size","rest","switchStyles","useStyleConfig","ariaAttributes","getAriaAttrs","jsx","ComponentWrapper","Box"],"mappings":"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","x_google_ignoreList":[0]}