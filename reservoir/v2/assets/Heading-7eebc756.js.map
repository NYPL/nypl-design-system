{"version":3,"file":"Heading-7eebc756.js","sources":["../../../src/components/Heading/Heading.tsx"],"sourcesContent":["import {\n  Box,\n  chakra,\n  Heading as ChakraHeading,\n  useMultiStyleConfig,\n} from \"@chakra-ui/react\";\nimport React, { forwardRef } from \"react\";\n\nimport Link from \"../Link/Link\";\nimport Text from \"../Text/Text\";\n\nexport const headingSizesArray = [\n  \"display1\",\n  \"heading1\",\n  \"heading2\",\n  \"heading3\",\n  \"heading4\",\n  \"heading5\",\n  \"heading6\",\n  \"primary\",\n  \"secondary\",\n  \"tertiary\",\n  \"callout\",\n] as const;\nexport const headingLevelsArray = [\n  \"h1\",\n  \"h2\",\n  \"h3\",\n  \"h4\",\n  \"h5\",\n  \"h6\",\n  \"one\",\n  \"two\",\n  \"three\",\n  \"four\",\n  \"five\",\n  \"six\",\n] as const;\n\nexport type HeadingSizes = typeof headingSizesArray[number];\nexport type HeadingLevels = typeof headingLevelsArray[number];\n\nexport interface HeadingProps {\n  /** Optional className that appears in addition to `heading` */\n  className?: string;\n  /** Optional ID that other components can cross reference for accessibility\n   * purposes */\n  id?: string;\n  /** Optional prop used to show capitalized text */\n  isCapitalized?: boolean;\n  /** Optional prop used to show upper case text */\n  isUppercase?: boolean;\n  /** Optional prop used to show lower case text */\n  isLowercase?: boolean;\n  /** Optional number 1-6 used to create the `<h*>` tag; if prop is not passed,\n   * `Heading` will default to `<h2>` */\n  level?: HeadingLevels;\n  /** Optional prop used to remove default spacing */\n  noSpace?: boolean;\n  /** String to populate the overline element */\n  overline?: string;\n  /** Optional size used to override the default styles of the native HTML `<h>`\n   * elements */\n  size?: HeadingSizes;\n  /** String to populate the subtitle element */\n  subtitle?: string;\n  /** Inner text of the `<h*>` element */\n  text?: string;\n  /** Optional URL that header points to; when `url` prop is passed to\n   * `Heading`, a child `<a>` element is created and the heading text becomes an\n   * active link */\n  url?: string;\n  /** Optional className for the URL when the `url` prop is passed */\n  urlClass?: string;\n}\n\n/** Map the word heading level to the number heading level. The default is 2. */\nconst getMappedLevel = (level = \"two\") => {\n  const levelMap = {\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    h4: \"h4\",\n    h5: \"h5\",\n    h6: \"h6\",\n    one: \"h1\",\n    two: \"h2\",\n    three: \"h3\",\n    four: \"h4\",\n    five: \"h5\",\n    six: \"h6\",\n  };\n  return levelMap[level] || \"h2\";\n};\n\n// TODO: As part of Phase 2 of the typography updates, make sure to update the\n// default value for `level` to be \"h2\" instead of \"two\"\nexport const Heading = chakra(\n  forwardRef<HTMLHeadingElement, React.PropsWithChildren<HeadingProps>>(\n    (props, ref?) => {\n      const {\n        className,\n        id,\n        isCapitalized,\n        isUppercase,\n        isLowercase,\n        level = \"h2\",\n        noSpace,\n        overline,\n        size,\n        subtitle,\n        text,\n        url,\n        urlClass,\n        ...rest\n      } = props;\n      const finalLevel = getMappedLevel(level);\n      const variant = size ? size : level;\n      const styles = useMultiStyleConfig(\"Heading\", {\n        variant,\n        isCapitalized,\n        isUppercase,\n        isLowercase,\n        noSpace,\n        url,\n      });\n\n      // Combine native base styles with any additional styles.\n      // This is used in the `Hero` and `Notification` components.\n      const asHeading: any = finalLevel;\n\n      if (!props.children && !text) {\n        throw new Error(\n          \"NYPL Reservoir Heading: No children or value was passed to the `text` prop.\"\n        );\n      }\n\n      if (React.Children.count(props.children) > 1) {\n        // Catching the error because React's error isn't as helpful.\n        throw new Error(\n          \"NYPL Reservoir Heading: Only pass one child into Heading.\"\n        );\n      }\n\n      let textCase = 0;\n      if (isCapitalized) {\n        textCase++;\n      }\n      if (isUppercase) {\n        textCase++;\n      }\n      if (isLowercase) {\n        textCase++;\n      }\n\n      if (textCase > 1) {\n        console.warn(\n          \"NYPL Reservoir Heading: Multiple text case props have been passed \" +\n            \"and the component will not render properly.\"\n        );\n      }\n\n      const contentToRender = props.children ? props.children : text;\n      const content = url ? (\n        <Link className={urlClass} href={url} id={`${id}-link`}>\n          {contentToRender}\n        </Link>\n      ) : (\n        contentToRender\n      );\n\n      /** *********************************************************************\n       * The new heading component provide overline and subtitle elements and\n       * the font size for those elements is based on the level of the heading\n       * component. The conditions below determine the styles that should be\n       * used for the overline and subtitle elements.\n       * *********************************************************************/\n\n      /** The new heading styles use a number with the variant style to indicate\n       * which style should be used. For example, heading1, heading2, and so on.\n       * If that number is set, we'll need it later. Let's grab the last\n       * character in string now, so we can use later in the code. In fact,\n       * let's grab that character and type it as an integer. */\n      const sizeIndex = parseInt(variant.at(-1));\n\n      /** This is the heading size index that acts as a separator between the\n       * smaller and larger sizing styles of the overline and subtitle elements.\n       * This demarcation is purely based on design and aesthetics. */\n      const overlineSubtitleSizeDemarcation = 2;\n\n      /** Set the size of the overline based on the heading size index. */\n      const overlineSize = !isNaN(sizeIndex)\n        ? sizeIndex <= overlineSubtitleSizeDemarcation\n          ? \"overline1\"\n          : \"overline2\"\n        : undefined;\n\n      /** Set the size of the subtitle based on the heading size index. */\n      const subtitleSize = !isNaN(sizeIndex)\n        ? sizeIndex <= overlineSubtitleSizeDemarcation\n          ? \"subtitle1\"\n          : \"subtitle2\"\n        : undefined;\n\n      /** The styles that should be applied to the outer-most wrapper of the\n       * Heading component. */\n      const wrapperStyles = styles.headingWrapper;\n\n      /** The styles for the actual native heading element. If the native\n       * element is going to sit by itself, without the overline or subtitle\n       * elements, then the wrapper styles can be applied directly to the native\n       * element. Otherwise, the wrapper styles will be used later. */\n      const headingStyles =\n        overline || subtitle\n          ? {\n              ...styles,\n            }\n          : {\n              ...styles,\n              ...wrapperStyles,\n            };\n\n      /** The final text elements that will make up the rendered component. */\n      const finalContent = (\n        <>\n          {overline && (\n            <Text\n              aria-roledescription=\"Subtitle\"\n              mb=\"xxs\"\n              role=\"paragraph\"\n              size={overlineSize}\n            >\n              {overline}\n            </Text>\n          )}\n          <ChakraHeading\n            as={asHeading}\n            className={className}\n            id={id}\n            ref={ref}\n            sx={{\n              ...headingStyles,\n            }}\n            {...rest}\n          >\n            {content}\n          </ChakraHeading>\n          {subtitle && (\n            <Text\n              aria-roledescription=\"Subtitle\"\n              mt=\"xs\"\n              noSpace\n              role=\"paragraph\"\n              size={subtitleSize}\n            >\n              {subtitle}\n            </Text>\n          )}\n        </>\n      );\n\n      /** Return the final content. If either the overline or subtitle elements\n       * are included, then the heading lockup needs to be wrapped in am\n       * <hgroup> element for semantic and accessibility reasons. */\n      return overline || subtitle ? (\n        <Box\n          as=\"hgroup\"\n          role=\"group\"\n          aria-roledescription=\"Heading group\"\n          sx={{ ...wrapperStyles }}\n          {...rest}\n        >\n          {finalContent}\n        </Box>\n      ) : (\n        <>{finalContent}</>\n      );\n    }\n  )\n);\n\nexport default Heading;\n"],"names":["headingSizesArray","headingLevelsArray","getMappedLevel","level","Heading","chakra","forwardRef","props","ref","className","id","isCapitalized","isUppercase","isLowercase","noSpace","overline","size","subtitle","text","url","urlClass","rest","finalLevel","variant","styles","useMultiStyleConfig","asHeading","React","textCase","contentToRender","content","jsx","Link","sizeIndex","overlineSubtitleSizeDemarcation","overlineSize","subtitleSize","wrapperStyles","headingStyles","finalContent","jsxs","Fragment","Text","ChakraHeading","Box"],"mappings":"+RAWO,MAAAA,EAAA,CAA0B,WAC/B,WACA,WACA,WACA,WACA,WACA,WACA,UACA,YACA,WACA,SAEF,EACOC,EAAA,CAA2B,KAChC,KACA,KACA,KACA,KACA,KACA,MACA,MACA,QACA,OACA,OACA,KAEF,EAwCAC,EAAA,CAAAC,EAAA,SACE,CAAiB,GAAA,KACX,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,IAAA,KACC,IAAA,KACA,MAAA,KACE,KAAA,KACD,KAAA,KACA,IAAA,IACD,GAEPA,CAAA,GAAA,KAKKC,EAAAC,EAAgBC,EAAA,WACrB,CAAAC,EAAAC,IAAA,CAEI,KAAA,CAAM,UAAAC,EACJ,GAAAC,EACA,cAAAC,EACA,YAAAC,EACA,YAAAC,EACA,MAAAV,EAAA,KACQ,QAAAW,EACR,SAAAC,EACA,KAAAC,EACA,SAAAC,EACA,KAAAC,EACA,IAAAC,EACA,SAAAC,EACA,GAAAC,CACG,EAAAd,EAELe,EAAApB,EAAAC,CAAA,EACAoB,EAAAP,GAAAb,EACAqB,EAAAC,EAAA,UAAA,CAA8C,QAAAF,EAC5C,cAAAZ,EACA,YAAAC,EACA,YAAAC,EACA,QAAAC,EACA,IAAAK,CACA,CAAA,EAKFO,EAAAJ,EAEA,GAAA,CAAAf,EAAA,UAAA,CAAAW,EACE,MAAA,IAAA,MAAU,6EACR,EAIJ,GAAAS,EAAA,SAAA,MAAApB,EAAA,QAAA,EAAA,EAEE,MAAA,IAAA,MAAU,2DACR,EAIJ,IAAAqB,EAAA,EACAjB,GACEiB,IAEFhB,GACEgB,IAEFf,GACEe,IAGFA,EAAA,GACE,QAAA,KAAQ,+GACN,EAKJ,MAAAC,EAAAtB,EAAA,SAAAA,EAAA,SAAAW,EACAY,EAAAX,EAAAY,EAAAC,EAAA,CAAA,UAAAZ,EAAA,KAAAD,EAAA,GAAA,GAAAT,CAAA,QAAA,SAAAmB,CAAA,CAAA,EAAAA,EAoBAI,EAAA,SAAAV,EAAA,GAAA,EAAA,CAAA,EAKAW,EAAA,EAGAC,EAAA,MAAAF,CAAA,EAAA,OAAAA,GAAAC,EAAA,YAAA,YAOAE,EAAA,MAAAH,CAAA,EAAA,OAAAA,GAAAC,EAAA,YAAA,YAQAG,EAAAb,EAAA,eAMAc,EAAAvB,GAAAE,EAAA,CAEM,GAAAO,CACK,EAAA,CAEL,GAAAA,EACK,GAAAa,CACA,EAIXE,EAAAC,EAAAC,EAAA,CAAA,SAAA,CAEK1B,GAAAgB,EACCW,EAAC,CAAA,uBAAA,WACsB,GAAA,MAClB,KAAA,YACE,KAAAP,EACC,SAAApB,CAEL,CAAA,EACHgB,EAEFY,EAAC,CAAA,GAAAjB,EACK,UAAAjB,EACJ,GAAAC,EACA,IAAAF,EACA,GAAA,CACI,GAAA8B,CACC,EACL,GAAAjB,EACI,SAAAS,CAEH,CAAA,EACHb,GAAAc,EAEEW,EAAC,CAAA,uBAAA,WACsB,GAAA,KAClB,QAAA,GACI,KAAA,YACF,KAAAN,EACC,SAAAnB,CAEL,CAAA,CACH,CAAA,CAAA,EAQN,OAAAF,GAAAE,EAAAc,EACEa,EAAC,CAAA,GAAA,SACI,KAAA,QACE,uBAAA,gBACgB,GAAA,CAAA,GAAAP,CAAA,EACE,GAAAhB,EACnB,SAAAkB,CAEH,CAAA,EAAAR,EAAAU,EAAA,CAAA,SAAAF,CAAA,CAAA,CAGa,CAEpB,CAEJ;"}