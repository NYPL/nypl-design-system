{"version":3,"file":"SocialMediaLinks-b6af0be3.js","sources":["../../../src/components/SocialMediaLinks/SocialMediaLinksUtils.ts","../../../src/components/SocialMediaLinks/SocialMediaLinks.tsx"],"sourcesContent":["export const socialMediaDataMap = [\n  {\n    type: \"blog\",\n    iconName: \"fileTypeGenericDoc\",\n    labelText: \"NYPL Blog\",\n    url: \"https://nypl.org/blog\",\n  },\n  {\n    type: \"facebook\",\n    iconName: \"socialFacebook\",\n    labelText: \"Facebook\",\n    url: \"https://facebook.com/nypl\",\n  },\n  {\n    type: \"instagram\",\n    iconName: \"socialInstagram\",\n    labelText: \"Instagram\",\n    url: \"https://instagram.com/nypl\",\n  },\n  {\n    type: \"pinterest\",\n    iconName: \"socialPinterest\",\n    labelText: \"Pinterest\",\n    url: \"https://pinterest.com/nypl\",\n  },\n  {\n    type: \"soundcloud\",\n    iconName: \"socialSoundCloud\",\n    labelText: \"SoundCloud\",\n    url: \"https://soundcloud.com/nypl\",\n  },\n  {\n    type: \"tiktok\",\n    iconName: \"socialTikTok\",\n    labelText: \"TikTok\",\n    url: \"https://tiktok.com/@nypl\",\n  },\n  {\n    type: \"tumblr\",\n    iconName: \"socialTumblr\",\n    labelText: \"Tumblr\",\n    url: \"https://nypl.tumblr.com\",\n  },\n  {\n    type: \"twitter\",\n    iconName: \"socialTwitter\",\n    labelText: \"Twitter\",\n    url: \"https://twitter.com/nypl\",\n  },\n  {\n    type: \"youtube\",\n    iconName: \"socialYoutube\",\n    labelText: \"YouTube\",\n    url: \"https://youtube.com/newyorkpubliclibrary\",\n  },\n];\n\n/* Helper function for .mdx <Table... /> component.\n *\n * @returns the SocialMediaDataMap values as an array of arrays\n */\nexport function GetTableData() {\n  let tableData = [];\n  socialMediaDataMap.forEach((smPlatform) => {\n    let row = [\n      smPlatform.type,\n      smPlatform.labelText,\n      smPlatform.url,\n      smPlatform.iconName,\n    ];\n    tableData.push(row);\n  });\n  return tableData;\n}\n","import { chakra, useStyleConfig } from \"@chakra-ui/react\";\nimport List from \"../List/List\";\nimport Link from \"../Link/Link\";\nimport Icon, { IconSizes } from \"../Icons/Icon\";\nimport { LayoutTypes } from \"../../helpers/types\";\nimport { socialMediaDataMap } from \"./SocialMediaLinksUtils\";\nimport React, { forwardRef } from \"react\";\n\nexport const borderTypeArray = [\"none\", \"circular\", \"straight\"] as const;\nexport type BorderType = typeof borderTypeArray[number];\n\nexport const colorTypeArray = [\"link\", \"textDefault\", \"textInverse\"] as const;\nexport type ColorType = typeof colorTypeArray[number];\n\nexport const sizeTypeArray = [\"small\", \"medium\", \"large\"] as const;\nexport type SizeType = typeof sizeTypeArray[number];\n\n// This list of allowed types is defined in the SocialMediaDataMap found in SocialMediaLinksUtils.ts and extracted here.\nexport const socialMediaLinkTypeArray = socialMediaDataMap.map(\n  ({ type }) => type\n);\nexport type SocialMediaLinkType = typeof socialMediaLinkTypeArray[number];\n\nexport interface SocialMediaLinkDataProps {\n  /** Optional override for default platform name */\n  labelText?: string;\n  /** Required. Must be one of socialMediaLinkTypeArray */\n  type: SocialMediaLinkType;\n  /** Optional override for default social media url */\n  url?: string;\n}\n\nexport interface SocialMediaLinksProps {\n  /** Optional border: straight, circular or none. */\n  borders?: BorderType;\n  /** Optional className you can add in addition to \"social-media-links.\" */\n  className?: string;\n  /** Any of three optional values that will change the color of the svg and label text (if any). */\n  color?: ColorType;\n  /** ID that other components can cross-reference for accessibility purposes. */\n  id?: string;\n  /** Optional desktop layout. Smaller viewports are always in a column. */\n  layout?: LayoutTypes;\n  /** Optional array of social media platform types, urls, and label texts. */\n  linksData?: SocialMediaLinkDataProps[];\n  /** Optional true/false to display names of platforms along with icons.\n   *  NOTE: Labels will NOT be shown with a circular border */\n  showLabels?: boolean;\n  /** Optional size: small, medium, or large. */\n  size?: SizeType;\n}\n\n/* Accepts an array containing one or more data objects, each representing a social media platform and optional\n * overrides for the label and/or URL.\n *\n * @returns an array of data objects for each requested platform type that includes type, iconName, labelText and\n * url. The labelText and url props will include any values supplied to override the defaults.\n */\nfunction getLinksData(platforms: SocialMediaLinkDataProps[]) {\n  let allData = [];\n  platforms.forEach((myPlatform) => {\n    // Get the dataset for this platform.\n    let thisPlatformArray = socialMediaDataMap.filter(\n      (socialMediaSlice) => socialMediaSlice.type === myPlatform.type\n    );\n\n    // The filter function returns an array of objects, so let's just get the objects out of the array.\n    let thisPlatformData = thisPlatformArray[0];\n\n    // If a url value exists in myPlatform use it, else use the default.\n    let newUrl = myPlatform.url ?? thisPlatformData.url;\n\n    // If a labelText value exists in myPlatform use it, else use the default.\n    let newLabelText = myPlatform.labelText ?? thisPlatformData.labelText;\n\n    let thisObj = {\n      type: thisPlatformData.type,\n      iconName: thisPlatformData.iconName,\n      labelText: newLabelText,\n      url: newUrl,\n    };\n    allData.push(thisObj);\n  }); // end forEach\n\n  return allData;\n}\n\n/**\n * The SocialMediaLinks component renders a list of links for accessing social media sites.\n */\nexport const SocialMediaLinks = chakra(\n  forwardRef<\n    HTMLDivElement & HTMLUListElement & HTMLOListElement,\n    SocialMediaLinksProps\n  >((props, ref?) => {\n    const {\n      borders = \"none\",\n      color = \"textDefault\",\n      className,\n      id,\n      linksData,\n      layout = \"row\",\n      showLabels = false,\n      size = \"small\",\n      ...rest\n    } = props;\n\n    // Turns out you can pass whatever props you want to this thing in order to do logic in the theme.\n    const styles = useStyleConfig(\"SocialMediaLinks\", {\n      variant: borders,\n      size, // Shortcut: if the key and variable names are the same, you can just pass the variable.\n      color,\n      layout,\n    });\n\n    let labelsOn = showLabels;\n    if (labelsOn && borders === \"circular\") {\n      labelsOn = false;\n      console.error(\n        \"NYPL Reservoir SocialMediaLinks: 'showLabels' is set to true, but labels can not be shown with a circular border.\"\n      );\n    }\n\n    // If linksData has values, use them, else use the entire list of platforms.\n    const socialMediaDataArray = linksData\n      ? getLinksData(linksData)\n      : socialMediaDataMap;\n\n    // Loop through the platform data array and build an array of links.\n    const thisLinksData = [];\n    socialMediaDataArray.forEach((modifiedPlatform) => {\n      // The size prop for the Icon component does not exactly match the convention for SocialMediaLinks size prop.\n      // So let's set the correct Icon size.\n      let iconSize: IconSizes = \"medium\";\n      switch (size) {\n        case \"medium\":\n          iconSize = \"large\";\n          break;\n        case \"large\":\n          iconSize = \"xlarge\";\n          break;\n      }\n\n      const linkData = (\n        <Link\n          href={modifiedPlatform.url}\n          key={modifiedPlatform.type}\n          screenreaderOnlyText={!labelsOn ? modifiedPlatform.labelText : null} // If labels are on, this is redundant, so turn it off\n          rel=\"nofollow noopener noreferrer\"\n          target=\"_blank\"\n        >\n          <div className={\"platLink\"}>\n            <Icon\n              name={modifiedPlatform.iconName}\n              size={iconSize}\n              title={modifiedPlatform.labelText}\n            />\n            {labelsOn ? <span>{modifiedPlatform.labelText}</span> : null}\n          </div>\n        </Link>\n      );\n\n      thisLinksData.push(linkData);\n    }); // end socialMediaDataArray foreach\n\n    return (\n      <List\n        type=\"ul\"\n        listItems={thisLinksData}\n        inline={layout === \"row\"}\n        noStyling={true}\n        className={className}\n        id={id}\n        __css={styles}\n        ref={ref}\n        {...rest}\n      />\n    );\n  }),\n  { shouldForwardProp: () => true }\n);\n\nexport default SocialMediaLinks;\n"],"names":["socialMediaDataMap","GetTableData","tableData","smPlatform","row","borderTypeArray","colorTypeArray","sizeTypeArray","getLinksData","platforms","allData","myPlatform","thisPlatformData","socialMediaSlice","newUrl","newLabelText","thisObj","SocialMediaLinks","chakra","forwardRef","props","ref","borders","color","className","id","linksData","layout","showLabels","size","rest","styles","useStyleConfig","labelsOn","socialMediaDataArray","thisLinksData","modifiedPlatform","iconSize","linkData","jsx","Link","jsxs","Icon","List"],"mappings":"0SAAO,MAAMA,EAAqB,CAChC,CACE,KAAM,OACN,SAAU,qBACV,UAAW,YACX,IAAK,uBACP,EACA,CACE,KAAM,WACN,SAAU,iBACV,UAAW,WACX,IAAK,2BACP,EACA,CACE,KAAM,YACN,SAAU,kBACV,UAAW,YACX,IAAK,4BACP,EACA,CACE,KAAM,YACN,SAAU,kBACV,UAAW,YACX,IAAK,4BACP,EACA,CACE,KAAM,aACN,SAAU,mBACV,UAAW,aACX,IAAK,6BACP,EACA,CACE,KAAM,SACN,SAAU,eACV,UAAW,SACX,IAAK,0BACP,EACA,CACE,KAAM,SACN,SAAU,eACV,UAAW,SACX,IAAK,yBACP,EACA,CACE,KAAM,UACN,SAAU,gBACV,UAAW,UACX,IAAK,0BACP,EACA,CACE,KAAM,UACN,SAAU,gBACV,UAAW,UACX,IAAK,0CACP,CACF,EAMO,SAASC,GAAe,CAC7B,IAAIC,EAAY,CAAA,EACG,OAAAF,EAAA,QAASG,GAAe,CACzC,IAAIC,EAAM,CACRD,EAAW,KACXA,EAAW,UACXA,EAAW,IACXA,EAAW,QAAA,EAEbD,EAAU,KAAKE,CAAG,CAAA,CACnB,EACMF,CACT,CCjEO,MAAAG,EAAA,CAAA,OAAA,WAAA,UAAA,EAGAC,EAAA,CAAA,OAAA,cAAA,aAAA,EAGAC,EAAA,CAAA,QAAA,SAAA,OAAA,EA4CP,SAAAC,EAAAC,EAAA,CACE,IAAAC,EAAA,CAAA,EACA,OAAAD,EAAA,QAAAE,GAAA,CAOE,IAAAC,EALAZ,EAAA,OAA2Ca,GAAAA,EAAA,OAAAF,EAAA,IACkB,EAI7D,CAAA,EAGAG,EAAAH,EAAA,KAAAC,EAAA,IAGAG,EAAAJ,EAAA,WAAAC,EAAA,UAEAI,EAAA,CAAc,KAAAJ,EAAA,KACW,SAAAA,EAAA,SACI,UAAAG,EAChB,IAAAD,CACN,EAEPJ,EAAA,KAAAM,CAAA,CAAoB,CAAA,EAGtBN,CACF,CAKO,MAAAO,EAAAC,EAAyBC,aAAA,CAAAC,EAAAC,IAAA,CAK5B,KAAA,CAAM,QAAAC,EAAA,OACM,MAAAC,EAAA,cACF,UAAAC,EACR,GAAAC,EACA,UAAAC,EACA,OAAAC,EAAA,MACS,WAAAC,EAAA,GACI,KAAAC,EAAA,QACN,GAAAC,CACJ,EAAAV,EAILW,EAAAC,EAAA,mBAAA,CAAkD,QAAAV,EACvC,KAAAO,EACT,MAAAN,EACA,OAAAI,CACA,CAAA,EAGF,IAAAM,EAAAL,EACAK,GAAAX,IAAA,aACEW,EAAA,GACA,QAAA,MAAQ,mHACN,GAKJ,MAAAC,EAAAR,EAAAlB,EAAAkB,CAAA,EAAA1B,EAKAmC,EAAA,CAAA,EACA,OAAAD,EAAA,QAAAE,GAAA,CAGE,IAAAC,EAAA,SACA,OAAAR,EAAA,CAAc,IAAA,SAEVQ,EAAA,QACA,MAAA,IAAA,QAEAA,EAAA,SACA,KAAA,CAGJ,MAAAC,EAAAC,EACEC,EAAC,CAAA,KAAAJ,EAAA,IACwB,qBAAAH,EAAA,KAAAG,EAAA,UAEwC,IAAA,+BAC3D,OAAA,SACG,SAAAK,EAAA,MAAA,CAAA,UAAA,WAAA,SAAA,CAGLF,EAAAG,EAAC,CAAA,KAAAN,EAAA,SACwB,KAAAC,EACjB,MAAAD,EAAA,SACkB,CAAA,EAC1BH,EAAAM,EAAA,OAAA,CAAA,SAAAH,EAAA,SAAA,CAAA,EAAA,IACwD,EAAA,CAC1D,EAAAA,EAAA,IAZsB,EAgB1BD,EAAA,KAAAG,CAAA,CAA2B,CAAA,EAG7BC,EACEI,EAAC,CAAA,KAAA,KACM,UAAAR,EACM,OAAAR,IAAA,MACQ,UAAA,GACR,UAAAH,EACX,GAAAC,EACA,MAAAM,EACO,IAAAV,EACP,GAAAS,CACI,CAAA,CACN,CAAA,EAEH,CAAA,kBAAA,IAAA,EAAA,CAEH;"}