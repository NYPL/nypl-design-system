import{j as a,a as C}from"./emotion-react-jsx-runtime.browser.esm-49aea89b.js";import{r as w,R as c}from"./index-0cbcd92a.js";import{u as x}from"./useDSHeading-94e72700.js";import{a as E,u as v,B as g}from"./chakra-ui-layout.esm-e0dbb94e.js";const S=["ol","ul","dl"],L=E(w.forwardRef((l,o)=>{const{children:r,className:e,id:i,inline:_=!1,listItems:n,noStyling:D=!1,title:b,type:s="ul",...y}=l,u=v("List",{inline:_,noStyling:D,variant:s}),N=x({title:b,id:i,additionalStyles:u.heading});let m=null;if(r&&n&&(n==null?void 0:n.length)>0)return console.warn("NYPL Reservoir List: Pass in either `<li>`, `<dt>`, or `<dd>` children or use the `listItems` data prop. Do not use both."),null;if(!r&&!n)return console.warn("NYPL Reservoir List: Pass in either `<li>` children or pass data in the `listItems` prop, not both."),null;const h=t=>r||(n?t==="ol"||t==="ul"?n.map((d,p)=>a("li",{children:d},p)):t==="dl"?n.map((d,p)=>[a("dt",{children:d.term},`${p}-term`),a("dd",{children:d.description},`${p}-des`)]):null:null);return s==="ol"||s==="ul"?(f(r,s),m=a(g,{as:s,id:i,className:e,ref:o,__css:u,...y,children:h(s)})):s==="dl"&&((()=>{c.Children.map(r,t=>{t.type!=="dt"&&t.type!=="dd"&&t.type!==c.Fragment&&t.props.mdxType!=="dt"&&t.props.mdxType!=="dd"&&t.props.mdxType!==c.Fragment&&console.warn("NYPL Reservoir List: Direct children of `List` (description) must be `<dt>`s and `<dd>`s.")})})(),m=C(g,{as:"section",id:i,className:e,ref:o,__css:u,...y,children:[N,a("dl",{children:h(s)})]})),m})),f=(l,o="ul",r="List")=>{c.Children.map(l,e=>{var i;e&&(e==null?void 0:e.type)!=="li"&&((i=e==null?void 0:e.props)==null?void 0:i.mdxType)!=="li"&&console.warn(`NYPL Reservoir ${r}: Direct children of \`${r}\` (${o}) must be \`<li>\`s.`)})};try{L.displayName="List",L.__docgenInfo={description:"A component that renders list item `li` elements or description item `dt`\nand `dd` elements based on the `type` prop. Note that the `title` prop will\nonly display for the `Description` list type.",displayName:"List",props:{title:{defaultValue:null,description:"Optional string value used to set the text for a `Heading` component, or\na DS Heading component that can be passed in. This title only applies to\nto Description Lists and will render above the list.",name:"title",required:!1,type:{name:"string | Element"}},className:{defaultValue:null,description:"ClassName you can add in addition to 'list'",name:"className",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"ID that other components can cross reference for accessibility purposes",name:"id",required:!1,type:{name:"string"}},inline:{defaultValue:null,description:"Display the list in a row.",name:"inline",required:!1,type:{name:"boolean"}},type:{defaultValue:null,description:'The type of list: "ol", "ul", or "dl". "ul" by default.',name:"type",required:!0,type:{name:'"dl" | "ol" | "ul"'}},listItems:{defaultValue:null,description:'Data to render if children are not passed. For `listTypes` ordered `"ol"`\nand unordered `"ul"` `List` types, the data structure is an array of strings\nto renders as `li` items. For description `"dl"` `List` types, the data\nstructure is an array of objects with `term` and `description` properties\nto render `dt` and `dd` elements, respectively.',name:"listItems",required:!1,type:{name:"(string | Element | DescriptionProps)[]"}},noStyling:{defaultValue:null,description:"Remove list styling.",name:"noStyling",required:!1,type:{name:"boolean"}}}}}catch{}try{f.displayName="checkListChildrenError",f.__docgenInfo={description:"Checks for `li` elements and consoles a warning if the\nchildren are different HTML elements.",displayName:"checkListChildrenError",props:{}}}catch{}export{L,f as c,S as l};
//# sourceMappingURL=List-582282a6.js.map
