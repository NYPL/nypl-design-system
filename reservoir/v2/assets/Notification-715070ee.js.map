{"version":3,"file":"Notification-715070ee.js","sources":["../../../src/components/Notification/Notification.tsx"],"sourcesContent":["import {\n  Box,\n  chakra,\n  useColorMode,\n  useColorModeValue,\n  useMultiStyleConfig,\n} from \"@chakra-ui/react\";\nimport React, { forwardRef, useState } from \"react\";\nimport useDSHeading from \"../../hooks/useDSHeading\";\n\nimport Button from \"../Button/Button\";\nimport Heading from \"../Heading/Heading\";\nimport Icon, { IconColors, IconNames, IconSizes } from \"../Icons/Icon\";\n\nexport const notificationTypesArray = [\n  \"standard\",\n  \"announcement\",\n  \"warning\",\n] as const;\nexport type NotificationTypes = typeof notificationTypesArray[number];\n\ninterface BaseProps {\n  /** Optional prop to control text alignment in `NotificationContent` */\n  alignText?: boolean;\n  /** Optional custom `Icon` that will override the default `Icon`. */\n  icon?: JSX.Element;\n  /** ID that other components can cross reference for accessibility purposes. */\n  id?: string;\n  /** Optional prop to control horizontal alignment of the `Notification` content */\n  isCentered?: boolean;\n  /** Optional content to be rendered in a `NotificationHeading` component. A\n   * string value is used to set the text for a `Heading` component, or\n   * a DS Heading component that can be passed in.\n   */\n  notificationHeading?: string | JSX.Element;\n  /** Optional prop to control the coloring of the `Notification` text and the\n   * visibility of an applicable icon. */\n  notificationType?: NotificationTypes;\n  /** Prop to display the `Notification` icon. Defaults to `true`. */\n  showIcon?: boolean;\n}\n\n// Used for `NotificationHeading`\ntype NotificationHeadingProps = Omit<BasePropsWithoutAlignText, \"showIcon\">;\n// Used for `NotificationContent`\ntype NotificationContentProps = Omit<BaseProps, \"icon\">;\n\n// Used for `Notification`\ntype BasePropsWithoutAlignText = Omit<BaseProps, \"alignText\">;\n\nexport interface NotificationProps extends BasePropsWithoutAlignText {\n  /** Label used to describe the `Notification`'s aside HTML element. */\n  ariaLabel?: string;\n  /** Additional `className` to add.  */\n  className?: string;\n  /** Optional prop to control whether a `Notification` can be dismissed\n   * (closed) by a user. */\n  dismissible?: boolean;\n  /** Optional custom `Icon` that will override the default `Icon`. */\n  icon?: JSX.Element;\n  /** Optional prop to control the margin around the `Notification` component. */\n  noMargin?: boolean;\n  /** Content to be rendered in a `NotificationContent` component. */\n  notificationContent: string | JSX.Element;\n}\n\n/**\n * NotificationHeading child-component.\n */\nexport const NotificationHeading = chakra(\n  (props: React.PropsWithChildren<NotificationHeadingProps>) => {\n    const { children, icon, id, isCentered, notificationType, ...rest } = props;\n    const styles = useMultiStyleConfig(\"NotificationHeading\", {\n      icon,\n      isCentered,\n      notificationType,\n    });\n    // Only if a heading child was passed, then either render the string in the\n    // default NotificationHeading h4 with its default styles, or render the\n    // custom `Heading` or heading child with the `NotificationHeading` styles.\n    const title = children ? (\n      typeof children === \"string\" ? (\n        <Heading\n          id={`${id}-heading`}\n          level=\"h4\"\n          noSpace\n          size=\"heading6\"\n          __css={styles.heading}\n        >\n          {children}\n        </Heading>\n      ) : (\n        React.cloneElement(children as any, {\n          __css: styles.heading,\n          noSpace: true,\n          size: \"heading6\",\n        })\n      )\n    ) : undefined;\n    const finalTitle = useDSHeading({\n      title,\n      id,\n    });\n\n    return (\n      <Box as=\"header\" __css={styles} {...rest}>\n        {icon}\n        {children && finalTitle}\n      </Box>\n    );\n  }\n);\n\n/**\n * NotificationContent child-component.\n */\nexport const NotificationContent = chakra(\n  (props: React.PropsWithChildren<NotificationContentProps>) => {\n    const {\n      alignText,\n      children,\n      isCentered,\n      notificationHeading,\n      notificationType,\n      showIcon,\n      ...rest\n    } = props;\n    const styles = useMultiStyleConfig(\"NotificationContent\", {\n      alignText,\n      isCentered,\n      notificationHeading,\n      notificationType,\n      showIcon,\n    });\n\n    return (\n      <Box __css={styles} {...rest}>\n        {children && <Box __css={styles.content}>{children}</Box>}\n      </Box>\n    );\n  }\n);\n\n/**\n * Component used to present users with three different levels of notifications:\n * standard, announcement, and warning.\n */\nexport const Notification = chakra(\n  forwardRef<HTMLDivElement, NotificationProps>((props, ref?) => {\n    const {\n      ariaLabel,\n      className,\n      dismissible = false,\n      icon,\n      id,\n      isCentered = false,\n      noMargin = false,\n      notificationContent,\n      notificationHeading,\n      notificationType = \"standard\",\n      showIcon = true,\n      ...rest\n    } = props;\n    const [isOpen, setIsOpen] = useState(true);\n    const { colorMode } = useColorMode();\n    const handleClose = () => setIsOpen(false);\n    const styles = useMultiStyleConfig(\"Notification\", {\n      isCentered,\n      noMargin,\n      notificationHeading,\n      notificationType,\n      showIcon,\n    });\n\n    const iconElement = () => {\n      const baseIconProps = {\n        size: \"large\" as IconSizes,\n        __css: styles.icon,\n      };\n      // If the icon should not display, return undefined.\n      if (!showIcon) {\n        return undefined;\n      }\n      // If a custom icon is passed, add specific `Notification` styles.\n      if (icon)\n        return React.cloneElement(icon, {\n          id: `${id}-custom-notification-icon`,\n          ...baseIconProps,\n        });\n      interface IconProps {\n        color: IconColors;\n        name: IconNames;\n        title: string;\n      }\n      const iconProps = {\n        announcement: {\n          color:\n            colorMode === \"dark\"\n              ? \"dark.ui.success.primary\"\n              : \"section.research.secondary\",\n          name: \"speakerNotes\",\n          title: \"Notification announcement icon\",\n        } as IconProps,\n        standard: {\n          color: colorMode === \"dark\" ? \"ui.status.primary\" : \"ui.black\",\n          name: \"alertNotificationImportant\",\n          title: \"Notification standard icon\",\n        } as IconProps,\n        warning: {\n          color:\n            colorMode === \"dark\" ? \"dark.ui.error.primary\" : \"brand.primary\",\n          name: \"errorFilled\",\n          title: \"Notification warning icon\",\n        } as IconProps,\n      };\n      return (\n        <Icon\n          className=\"notification-icon\"\n          id={`${id}-notification-icon`}\n          {...iconProps[notificationType]}\n          {...baseIconProps}\n        />\n      );\n    };\n    /** Setting the icon color in the styles is not working, so we need to\n     * explicitly override the icon color directly on the component. */\n    const dismissibleButtonIconColor = useColorModeValue(\n      \"ui.black\",\n      \"dark.ui.typography.heading\"\n    );\n    const dismissibleButton = dismissible && (\n      <Button\n        aria-label=\"Close the notification\"\n        buttonType=\"text\"\n        id={`${id}-notification-dismissible-button`}\n        onClick={handleClose}\n        __css={styles.dismissibleButton}\n      >\n        <Icon\n          fill={dismissibleButtonIconColor}\n          id={`${id}-dismissible-notification-icon`}\n          name=\"close\"\n          size=\"large\"\n          title=\"Notification close icon\"\n        />\n      </Button>\n    );\n    const iconElem = iconElement();\n    const childHeading = (notificationHeading || showIcon) && (\n      <NotificationHeading\n        icon={iconElem}\n        id={id}\n        isCentered={isCentered}\n        notificationType={notificationType}\n      >\n        {notificationHeading}\n      </NotificationHeading>\n    );\n    // Specific alignment styles for the content.\n    const alignText = !!(childHeading && showIcon && (!!icon || !isCentered));\n    const childContent = (\n      <NotificationContent\n        alignText={alignText}\n        isCentered={isCentered}\n        notificationHeading={notificationHeading}\n        notificationType={notificationType}\n        showIcon={showIcon}\n      >\n        {notificationContent}\n      </NotificationContent>\n    );\n\n    // If the `Notification` is closed, don't render anything.\n    if (!isOpen) {\n      return null;\n    }\n    return (\n      <Box\n        aria-label={ariaLabel}\n        as=\"aside\"\n        className={className}\n        data-type={notificationType}\n        id={id}\n        ref={ref}\n        __css={styles}\n        {...rest}\n      >\n        <Box __css={styles.container}>\n          {childHeading}\n          {childContent}\n        </Box>\n        {dismissibleButton}\n      </Box>\n    );\n  })\n);\n\nexport default Notification;\n"],"names":["notificationTypesArray","NotificationHeading","chakra","props","children","icon","id","isCentered","notificationType","rest","styles","useMultiStyleConfig","title","jsx","Heading","React","finalTitle","useDSHeading","jsxs","Box","NotificationContent","alignText","notificationHeading","showIcon","Notification","forwardRef","ref","ariaLabel","className","dismissible","noMargin","notificationContent","isOpen","setIsOpen","useState","colorMode","useColorMode","handleClose","iconElement","baseIconProps","iconProps","Icon","dismissibleButtonIconColor","useColorModeValue","dismissibleButton","Button","iconElem","childHeading","childContent"],"mappings":"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"}