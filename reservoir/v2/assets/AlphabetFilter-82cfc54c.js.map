{"version":3,"file":"AlphabetFilter-82cfc54c.js","sources":["../../../src/components/AlphabetFilter/AlphabetFilter.tsx"],"sourcesContent":["import React, { forwardRef, useRef, useState } from \"react\";\nimport {\n  Box,\n  chakra,\n  Flex,\n  useColorModeValue,\n  useMultiStyleConfig,\n} from \"@chakra-ui/react\";\nimport { Button } from \"../Button/Button\";\nimport ComponentWrapper from \"../ComponentWrapper/ComponentWrapper\";\n\nexport interface AlphabetFilterProps {\n  /** Array of letters to specify which `Button` components should be set in an `enabled`\n   * state. By default, all buttons are `enabled`. */\n  activeLetters?: string[];\n  /** A class name for the AlphabetFilter parent div. */\n  className?: string;\n  /** The currentLetter can be used to programatically set the selected letter without the\n   * user explicitly requesting it. */\n  currentLetter?: string;\n  /** Value used to set the text for a `Text` component that will be displayed above the letter buttons. */\n  descriptionText?: string | JSX.Element;\n  /** Optional string value used to set the text for a `Heading` component, or\n   * a DS Heading component that can be passed in.\n   */\n  headingText?: string | JSX.Element;\n  /** ID that other components can cross reference for accessibility purposes. */\n  id?: string;\n  /** Adds the `disabled` prop to the AlphabetFilter when true. */\n  isDisabled?: boolean;\n  /** The callback function called when a letter button or the Show All button is clicked. */\n  onClick: (filterValue: string) => void;\n}\n\nexport const AlphabetFilter = chakra(\n  forwardRef<HTMLDivElement, AlphabetFilterProps>((props, ref?) => {\n    const {\n      activeLetters,\n      className,\n      currentLetter,\n      descriptionText,\n      headingText,\n      id,\n      isDisabled,\n      onClick,\n      ...rest\n    } = props;\n\n    const styles = useMultiStyleConfig(\"AlphabetFilter\", {});\n\n    const filterButtons = [\n      { text: \"#\", value: \"#\" },\n      { text: \"A\", value: \"a\" },\n      { text: \"B\", value: \"b\" },\n      { text: \"C\", value: \"c\" },\n      { text: \"D\", value: \"d\" },\n      { text: \"E\", value: \"e\" },\n      { text: \"F\", value: \"f\" },\n      { text: \"G\", value: \"g\" },\n      { text: \"H\", value: \"h\" },\n      { text: \"I\", value: \"i\" },\n      { text: \"J\", value: \"j\" },\n      { text: \"K\", value: \"k\" },\n      { text: \"L\", value: \"l\" },\n      { text: \"M\", value: \"m\" },\n      { text: \"N\", value: \"n\" },\n      { text: \"O\", value: \"o\" },\n      { text: \"P\", value: \"p\" },\n      { text: \"Q\", value: \"q\" },\n      { text: \"R\", value: \"r\" },\n      { text: \"S\", value: \"s\" },\n      { text: \"T\", value: \"t\" },\n      { text: \"U\", value: \"u\" },\n      { text: \"V\", value: \"v\" },\n      { text: \"W\", value: \"w\" },\n      { text: \"X\", value: \"x\" },\n      { text: \"Y\", value: \"y\" },\n      { text: \"Z\", value: \"z\" },\n      { text: \"Show All\", value: \"showAll\" },\n    ];\n\n    const refCurrentLetter = useRef(currentLetter);\n    const [selectedLetter, setSelectedLetter] = useState<string>(currentLetter);\n\n    // If the parent passes down a new currentLetter, then set the internal state – selectedLetter –\n    // to the new currentLetter and update the refCurrentLetter with that value.\n    React.useEffect(() => {\n      if (currentLetter && currentLetter !== refCurrentLetter.current) {\n        setSelectedLetter(currentLetter);\n        refCurrentLetter.current = currentLetter;\n      }\n    }, [currentLetter, onClick]);\n\n    /**\n     * This function is only called when clicking on a link should\n     * not update the URL or refresh the page.\n     */\n    const handleOnClick = (\n      e: React.MouseEvent | React.KeyboardEvent,\n      clickedLetter: string\n    ) => {\n      e.preventDefault && e.preventDefault();\n      if (selectedLetter === clickedLetter) return;\n      setSelectedLetter(clickedLetter);\n      onClick && onClick(clickedLetter);\n    };\n\n    // Set the color of the border of the selected letter based on the color mode.\n    const selectedLetterBorderColor = useColorModeValue(\n      \"ui.gray.dark\",\n      \"ui.gray.medium\"\n    );\n\n    const getButtonElement = (item) => {\n      const isSelectedLetter =\n        selectedLetter === item.value && item.value !== \"showAll\";\n      const isShowAll = item.value === \"showAll\";\n      const isButtonDisabled =\n        isDisabled ||\n        (activeLetters && !activeLetters.includes(item.value) && !isShowAll);\n\n      const buttonStyles = isSelectedLetter\n        ? {\n            ...styles.button,\n            border: \"1px solid\",\n            borderColor: selectedLetterBorderColor,\n          }\n        : {\n            ...styles.button,\n            border: \"1px solid transparent\", // prevent shifting when letter is selected\n          };\n\n      return (\n        <Button\n          aria-current={isSelectedLetter ? \"page\" : null}\n          aria-label={\n            item.text === \"Show All\" ? item.text : \"Page \" + item.text\n          }\n          buttonType=\"text\"\n          id={`filter-${item.value}`}\n          isDisabled={isButtonDisabled}\n          key={item.value}\n          sx={buttonStyles}\n          onClick={(e: React.MouseEvent | React.KeyboardEvent) => {\n            handleOnClick(e, item.value);\n          }}\n        >\n          {item.text}\n        </Button>\n      );\n    };\n\n    const getFilterLetters = () => {\n      return filterButtons.map((item) => {\n        return getButtonElement(item);\n      });\n    };\n\n    return (\n      <Box as=\"nav\" ref={ref} aria-label=\"Filter by letter\">\n        <ComponentWrapper\n          id={id}\n          className={className}\n          __css={styles}\n          {...rest}\n          headingText={headingText ? headingText : undefined}\n          descriptionText={descriptionText ? descriptionText : undefined}\n        >\n          <Flex wrap=\"wrap\">{getFilterLetters()}</Flex>\n        </ComponentWrapper>\n      </Box>\n    );\n  })\n);\n\nexport default AlphabetFilter;\n"],"names":["AlphabetFilter","chakra","forwardRef","props","ref","activeLetters","className","currentLetter","descriptionText","headingText","id","isDisabled","onClick","rest","styles","useMultiStyleConfig","filterButtons","refCurrentLetter","useRef","selectedLetter","setSelectedLetter","useState","React","handleOnClick","clickedLetter","selectedLetterBorderColor","useColorModeValue","getButtonElement","item","isSelectedLetter","isShowAll","isButtonDisabled","buttonStyles","jsx","Button","e","Box","ComponentWrapper","Flex"],"mappings":"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"}