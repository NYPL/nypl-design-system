{"version":3,"file":"Card-4cbdbbf1.js","sources":["../../../src/components/Card/Card.tsx"],"sourcesContent":["import {\n  Box,\n  chakra,\n  LinkBox as ChakraLinkBox,\n  LinkOverlay as ChakraLinkOverlay,\n  useMultiStyleConfig,\n  useStyleConfig,\n} from \"@chakra-ui/react\";\nimport React, { forwardRef } from \"react\";\n\nimport { LayoutTypes } from \"../../helpers/types\";\nimport Heading from \"../Heading/Heading\";\nimport Image, { ComponentImageProps, ImageProps } from \"../Image/Image\";\n\ninterface CustomColorProps {\n  backgroundColor?: string;\n  color?: string;\n}\n\ninterface CardBaseProps {\n  /** Optional value to control the alignment of the text and elements. */\n  isCentered?: boolean;\n  /** Optional value to render the layout in a row or column.\n   * Default is `\"column\"`. */\n  layout?: LayoutTypes;\n}\n\ninterface CardWrapperProps {\n  /** Optional CSS class name to add. */\n  className?: string;\n  /** ID that other components can cross reference for accessibility purposes. */\n  id?: string;\n  /** Main link to use when the full `Card` component should be clickable. */\n  mainActionLink?: string;\n  /** Additional object for styling the `Card`'s `div` wrapper. */\n  styles?: any;\n}\n\n// Used internally only for the `imageProps` prop for the `Card` component.\ninterface CardImageProps extends ComponentImageProps {\n  /** Optional boolean value to control the position of the `CardImage`. */\n  isAtEnd?: boolean;\n}\n\ninterface CardActionsProps extends CardBaseProps {\n  /** Optional boolean value to control visibility of border on the bottom edge\n   * of the card actions element */\n  bottomBorder?: boolean;\n  /** Optional boolean value to control visibility of border on the top edge of\n   * the card actions element */\n  topBorder?: boolean;\n}\n\n/** Used only internally for the `CardImage` component. */\ninterface CardImageComponentProps extends CardBaseProps, ImageProps {\n  /** Optional boolean value to control the position of the `CardImage`. */\n  isAtEnd?: boolean;\n}\n\nexport interface CardProps extends CardBaseProps, CardWrapperProps {\n  /** Optional hex color value used to set the card background color. */\n  backgroundColor?: string;\n  /** Optional hex color value used to override the default text color. */\n  foregroundColor?: string;\n  /** Optional boolean value to control the visibility of a border around\n   * the card. */\n  isBordered?: boolean;\n  /** Object used to create and render the `Image` component. */\n  imageProps?: CardImageProps;\n  /** Set CardActions to the right content side. This only works in\n   * the row layout. */\n  isAlignedRightActions?: boolean;\n}\n\n/**\n * The CardImage component is used internally in the `Card` component. It\n * renders an `Image` component but with overriding styles specific to the\n * `Card` component.\n */\nfunction CardImage(\n  props: React.ComponentProps<\"img\"> & CardImageComponentProps\n) {\n  const {\n    alt,\n    aspectRatio,\n    caption,\n    component,\n    credit,\n    isAtEnd,\n    isCentered,\n    isLazy,\n    layout,\n    size,\n    src,\n  } = props;\n  // Additional styles to add to the `Image` component.\n  const styles = useStyleConfig(\"CardImage\", {\n    imageIsAtEnd: isAtEnd,\n    isCentered,\n    layout,\n    size,\n  });\n\n  return (\n    <Box __css={styles}>\n      <Image\n        alt={alt}\n        aspectRatio={aspectRatio}\n        caption={caption}\n        component={component}\n        credit={credit}\n        isLazy={isLazy}\n        size={size}\n        src={src}\n      />\n    </Box>\n  );\n}\n\n// CardHeading child-component\nexport const CardHeading = chakra(Heading);\n\n// CardContent child-component\nexport const CardContent = chakra((props: React.PropsWithChildren<{}>) => {\n  const { children, ...rest } = props;\n  const styles = useStyleConfig(\"CardContent\");\n  return children ? (\n    <Box __css={styles} {...rest}>\n      {children}\n    </Box>\n  ) : null;\n});\n\n// CardActions child-component\nexport const CardActions = chakra(\n  (props: React.PropsWithChildren<CardActionsProps>) => {\n    const { bottomBorder, children, isCentered, layout, topBorder, ...rest } =\n      props;\n    const styles = useStyleConfig(\"CardActions\", {\n      bottomBorder,\n      isCentered,\n      layout,\n      topBorder,\n    });\n\n    return children ? (\n      <Box __css={styles} {...rest}>\n        {children}\n      </Box>\n    ) : null;\n  }\n);\n\n/**\n * If `mainActionLink` is passed, then this adds Chakra's `LinkBox` wrapper\n * component to the entire `Card` component. This works together with the\n * `CardLinkOverlay` component to provide a clickable overlay.\n */\nconst CardWrapper = chakra(\n  forwardRef<HTMLDivElement, React.PropsWithChildren<CardWrapperProps>>(\n    ({ className, children, id, mainActionLink, styles, ...rest }, ref) =>\n      mainActionLink ? (\n        <ChakraLinkBox\n          id={id}\n          className={className}\n          ref={ref}\n          sx={styles}\n          {...rest}\n        >\n          {children}\n        </ChakraLinkBox>\n      ) : (\n        <Box id={id} className={className} ref={ref} __css={styles} {...rest}>\n          {children}\n        </Box>\n      )\n  )\n);\n\n/**\n * If `mainActionLink` is passed, then this adds Chakra's `LinkOverlay` around\n * text that should be linked, in this case the `CardHeading` text. This works\n * together with the `CardWrapper` component to provide a clickable overlay to\n * the `Card` component while still allowing links in the `CardActions` to be\n * clickable.\n */\nfunction CardLinkOverlay({\n  children,\n  mainActionLink,\n}: React.PropsWithChildren<CardWrapperProps>) {\n  return mainActionLink ? (\n    <ChakraLinkOverlay href={mainActionLink}>{children}</ChakraLinkOverlay>\n  ) : (\n    <>{children}</>\n  );\n}\n\nexport const Card = chakra(\n  forwardRef<HTMLDivElement, React.PropsWithChildren<CardProps>>(\n    (props, ref?) => {\n      const {\n        backgroundColor,\n        children,\n        className,\n        foregroundColor,\n        id,\n        imageProps = {\n          alt: \"\",\n          aspectRatio: \"square\",\n          caption: undefined,\n          component: undefined,\n          credit: undefined,\n          isAtEnd: false,\n          isLazy: false,\n          size: \"default\",\n          src: \"\",\n        },\n        isAlignedRightActions = false,\n        isBordered,\n        isCentered = false,\n        layout = \"column\",\n        mainActionLink,\n        ...rest\n      } = props;\n      const hasImage = imageProps.src || imageProps.component;\n      const finalImageAspectRatio = imageProps.component\n        ? \"original\"\n        : imageProps.aspectRatio;\n      const customColors: CustomColorProps = {};\n      const cardContents: JSX.Element[] = [];\n      const cardRightContents: JSX.Element[] = [];\n      let cardHeadingCount = 0;\n\n      if (imageProps.component && imageProps.aspectRatio) {\n        console.warn(\n          \"NYPL Reservoir Card: Both the `imageProps.component` and `imageProps.aspectRatio` \" +\n            \"props were set but `imageProps.aspectRatio` will be ignored in favor \" +\n            \"of the aspect ratio on `imageProps.component` prop.\"\n        );\n      }\n\n      backgroundColor && (customColors[\"backgroundColor\"] = backgroundColor);\n      foregroundColor && (customColors[\"color\"] = foregroundColor);\n\n      const styles = useMultiStyleConfig(\"Card\", {\n        hasImage,\n        imageIsAtEnd: imageProps.isAtEnd,\n        isAlignedRightActions,\n        isBordered,\n        isCentered,\n        layout,\n        mainActionLink,\n      });\n\n      React.Children.map(\n        children as JSX.Element,\n        (child: React.ReactElement, key) => {\n          const isCardActions =\n            child.type === CardActions || child.props.mdxType === \"CardActions\";\n          if (\n            child.type === CardHeading ||\n            child.props.mdxType === \"CardHeading\"\n          ) {\n            // If the child is a `CardHeading` component, then we add the\n            // `CardLinkOverlay` inside of the `Heading` component and wrap its text.\n            // This allows other links in the `CardActions` to be clickable. This is\n            // only done for the first `CardHeading` component but does not affect\n            // the full-click feature.\n            const newChildren =\n              cardHeadingCount === 0 ? (\n                <CardLinkOverlay mainActionLink={mainActionLink}>\n                  {child.props.children}\n                </CardLinkOverlay>\n              ) : (\n                child.props.children\n              );\n            const elem = React.cloneElement(child, {\n              key,\n              // Override the child text with the potential `CardLinkOverlay`.\n              children: newChildren,\n              layout,\n              __css: styles.heading,\n            });\n            cardContents.push(elem);\n            cardHeadingCount++;\n          } else if (\n            child.type === CardContent ||\n            child.props.mdxType === \"CardContent\"\n          ) {\n            const elem = React.cloneElement(child, { key });\n            cardContents.push(elem);\n          } else if (isCardActions) {\n            const elem = React.cloneElement(child, { key, isCentered, layout });\n\n            // Only allow `CardActions` to align to the right of the main\n            // `CardContent` component when in the row layout.\n            if (isAlignedRightActions && layout === \"row\") {\n              cardRightContents.push(elem);\n            } else {\n              cardContents.push(elem);\n            }\n          }\n        }\n      );\n\n      return (\n        <CardWrapper\n          id={id}\n          className={className}\n          mainActionLink={mainActionLink}\n          ref={ref}\n          styles={{\n            ...styles,\n            ...customColors,\n          }}\n          {...rest}\n        >\n          {hasImage && (\n            <CardImage\n              alt={imageProps.alt}\n              aspectRatio={finalImageAspectRatio}\n              caption={imageProps.caption}\n              component={imageProps.component}\n              credit={imageProps.credit}\n              isAtEnd={imageProps.isAtEnd}\n              isLazy={imageProps.isLazy}\n              layout={layout}\n              size={imageProps.size}\n              src={imageProps.src ? imageProps.src : undefined}\n            />\n          )}\n          <Box className=\"card-body\" __css={styles.body}>\n            {cardContents}\n          </Box>\n          {cardRightContents.length ? (\n            <Box\n              className=\"card-right\"\n              __css={{ ...styles.body, ...styles.actions }}\n            >\n              {cardRightContents}\n            </Box>\n          ) : null}\n        </CardWrapper>\n      );\n    }\n  )\n);\n\nexport default Card;\n"],"names":["CardImage","props","alt","aspectRatio","caption","component","credit","isAtEnd","isCentered","isLazy","layout","size","src","styles","useStyleConfig","jsx","Box","Image","CardHeading","chakra","Heading","CardContent","children","rest","CardActions","bottomBorder","topBorder","CardWrapper","forwardRef","className","id","mainActionLink","ref","ChakraLinkBox","CardLinkOverlay","ChakraLinkOverlay","Fragment","Card","backgroundColor","foregroundColor","imageProps","isAlignedRightActions","isBordered","hasImage","finalImageAspectRatio","customColors","cardContents","cardRightContents","cardHeadingCount","useMultiStyleConfig","React","child","key","isCardActions","newChildren","elem","jsxs"],"mappings":"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"}